import { ApiRequestHandler, ApiService } from '../../api';
import { TelemetrySyncRequest, TelemetrySyncStat } from '..';
import { KeyValueStore } from '../../key-value-store';
import { SdkConfig } from '../../sdk-config';
import { DeviceInfo } from '../../util/device';
import { DbService } from '../../db';
import { SharedPreferences } from '../../util/shared-preferences';
import { AppInfo } from '../../util/app';
import { DeviceRegisterService } from '../../device-register';
import { Observable } from 'rxjs';
export declare class TelemetrySyncHandler implements ApiRequestHandler<TelemetrySyncRequest, TelemetrySyncStat> {
    private dbService;
    private sdkConfig;
    private deviceInfo;
    private sharedPreferences;
    private appInfoService;
    private deviceRegisterService;
    private keyValueStore?;
    private apiService?;
    static readonly TELEMETRY_LOG_MIN_ALLOWED_OFFSET_KEY: string;
    private static readonly LAST_SYNCED_DEVICE_REGISTER_ATTEMPT_TIME_STAMP_KEY;
    private static readonly LAST_SYNCED_DEVICE_REGISTER_IS_SUCCESSFUL_KEY;
    private static readonly TELEMETRY_ENDPOINT;
    private static readonly REGISTER_API_SUCCESS_TTL;
    private static readonly REGISTER_API_FAILURE_TTL;
    private readonly preprocessors;
    private readonly telemetryConfig;
    private readonly apiConfig;
    constructor(dbService: DbService, sdkConfig: SdkConfig, deviceInfo: DeviceInfo, sharedPreferences: SharedPreferences, appInfoService: AppInfo, deviceRegisterService: DeviceRegisterService, keyValueStore?: KeyValueStore | undefined, apiService?: ApiService | undefined);
    resetDeviceRegisterTTL(): Observable<undefined>;
    handle({ ignoreSyncThreshold, ignoreAutoSyncMode }: TelemetrySyncRequest): Observable<TelemetrySyncStat>;
    processEventsBatch(): Observable<number>;
    private registerDevice;
    private hasTelemetryThresholdCrossed;
    private fetchEvents;
    private processEvents;
    private persistProcessedEvents;
    private deleteEvents;
    private handleProcessedEventsBatch;
    private fetchProcessedEventsBatch;
    private syncProcessedEvent;
    private deleteProcessedEvent;
}
