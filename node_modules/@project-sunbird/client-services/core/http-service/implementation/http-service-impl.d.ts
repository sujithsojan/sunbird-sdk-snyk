import { CsHttpService, CsRequest, CsRequestInterceptor, CsResponse, CsResponseInterceptor } from '../interface';
import { Observable } from 'rxjs';
import { Container } from 'inversify';
import { HttpClient } from './http-client-adapters/http-client';
import { BearerTokenInjectRequestInterceptor } from './interceptors/bearer-token-inject-request-interceptor';
import { UserTokenInjectRequestInterceptor } from './interceptors/user-token-inject-request-interceptor';
import { CsClientStorage } from '../../cs-client-storage';
export declare class HttpServiceImpl implements CsHttpService {
    private container;
    private http;
    private clientStorage?;
    private _requestInterceptors;
    private _responseInterceptors;
    private _traceId?;
    private _bearerTokenInjectRequestInterceptor?;
    get bearerTokenInjectRequestInterceptor(): BearerTokenInjectRequestInterceptor;
    private _userTokenInjectRequestInterceptor?;
    get userTokenInjectRequestInterceptor(): UserTokenInjectRequestInterceptor;
    get host(): string;
    get channelId(): string;
    get deviceId(): string;
    get producerId(): string;
    get sessionId(): string;
    get appVersion(): string;
    constructor(container: Container, http: HttpClient, clientStorage?: CsClientStorage | undefined);
    init(): void;
    get requestInterceptors(): CsRequestInterceptor[];
    set requestInterceptors(value: CsRequestInterceptor[]);
    get responseInterceptors(): CsResponseInterceptor[];
    set responseInterceptors(value: CsResponseInterceptor[]);
    fetch<T = any>(request: CsRequest): Observable<CsResponse<T>>;
    private addGlobalHeader;
    private interceptRequest;
    private interceptResponse;
    private buildInterceptorsFromRequest;
}
