import { CsResponseInterceptor } from './cs-response-interceptor';
import { CsRequestInterceptor } from './cs-request-interceptor';
export declare enum CsHttpSerializer {
    JSON = "json",
    URLENCODED = "urlencoded",
    UTF8 = "utf8",
    RAW = "raw"
}
export declare enum CsHttpRequestType {
    GET = "GET",
    POST = "POST",
    PATCH = "PATCH",
    DELETE = "DELETE",
    PUT = "PUT"
}
export interface CsSerializedRequest {
    type: CsHttpRequestType;
    host: string | undefined;
    path: string;
    serializer: CsHttpSerializer;
    withBearerToken: boolean;
    withUserToken: boolean;
    headers: {
        [key: string]: string;
    };
    body: {
        [key: string]: string;
    } | string;
    parameters: {
        [key: string]: string;
    };
}
export declare class CsRequest {
    static fromJSON(json: Partial<CsSerializedRequest>): CsRequest;
    static Builder: any;
    private _host?;
    private _serializer;
    private _responseInterceptors;
    private _withBearerToken;
    private _path;
    private _type;
    get serializer(): CsHttpSerializer;
    set serializer(value: CsHttpSerializer);
    get withBearerToken(): boolean;
    set withBearerToken(value: boolean);
    private _headers?;
    private _body?;
    private _parameters?;
    get body(): {};
    protected constructor();
    private _withUserToken;
    set path(value: string);
    get type(): CsHttpRequestType;
    set responseInterceptors(value: Array<CsResponseInterceptor>);
    set headers(value: {
        [p: string]: string;
    });
    set body(value: {});
    get path(): string;
    set type(value: CsHttpRequestType);
    get responseInterceptors(): Array<CsResponseInterceptor>;
    get headers(): {
        [p: string]: string;
    };
    get parameters(): {
        [key: string]: string;
    };
    set parameters(value: {
        [key: string]: string;
    });
    get withUserToken(): boolean;
    set withUserToken(value: boolean);
    private _requestInterceptors;
    get requestInterceptors(): CsRequestInterceptor[];
    get host(): string | undefined;
    toJSON(): string;
}
