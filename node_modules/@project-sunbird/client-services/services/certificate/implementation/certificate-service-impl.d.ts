import { Container } from "inversify";
import { CsLearnerCertificate, CsLearnerCertificateV1 } from "../../../models";
import { CSGetLearnerCerificateRequest } from "..";
import { Observable } from "rxjs";
import { CsCertificateServiceConfig } from '../../../index';
import { CsHttpService } from '../../../core/http-service/interface';
import { CsCertificateService, GetPublicKeyRequest, GetPublicKeyResponse, FetchCertificateResponse, FetchCertificateRequest, GetLegacyCertificateRequest, GetLegacyCertificateResponse, CsVerifyCertificateRequest, CsCertificateDetailsResponse, CsGetCertificateRequest, CsVerifyCertificateResponse, CsLearnerCertificateResponse } from "../interface";
import { CsSystemSettingsService } from "../../system-settings/interface/";
export declare class CertificateServiceImpl implements CsCertificateService {
    private httpService;
    private apiPath;
    private apiPathLegacy;
    private rcApiPath;
    private systemSettingsService;
    private container;
    constructor(httpService: CsHttpService, apiPath: string, apiPathLegacy: string, rcApiPath: string, systemSettingsService: CsSystemSettingsService, container: Container);
    fetchCertificatesV1(request: CSGetLearnerCerificateRequest, config?: CsCertificateServiceConfig): Observable<{
        count: number;
        content: CsLearnerCertificateV1[];
    }>;
    fetchCertificatesV2(request: CSGetLearnerCerificateRequest, config?: CsCertificateServiceConfig): Observable<CsLearnerCertificate[]>;
    fetchCertificates(request: CSGetLearnerCerificateRequest, config?: CsCertificateServiceConfig): Observable<CsLearnerCertificateResponse>;
    getPublicKey(request: GetPublicKeyRequest, config?: CsCertificateServiceConfig): Observable<GetPublicKeyResponse>;
    getCerificateDownloadURI(request: FetchCertificateRequest, config?: CsCertificateServiceConfig): Observable<FetchCertificateResponse>;
    getLegacyCerificateDownloadURI(req: GetLegacyCertificateRequest, config?: CsCertificateServiceConfig): Observable<GetLegacyCertificateResponse>;
    getCertificateDetails(request: CsGetCertificateRequest, config?: CsCertificateServiceConfig): Observable<CsCertificateDetailsResponse>;
    getEncodedData(encodedData: any): Promise<any>;
    verifyCertificate(req: CsVerifyCertificateRequest, config?: CsCertificateServiceConfig): Observable<CsVerifyCertificateResponse>;
}
