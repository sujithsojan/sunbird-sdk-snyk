import { Container } from 'inversify';
import { CsDiscussionServiceConfig } from '../../..';
import { Observable } from 'rxjs';
import { CsHttpService } from '../../../core/http-service/interface';
import { CsAttachForumRequest, CsAttachForumResponse, CsDiscussionService, CsGetContextBasedDiscussionRequest, CsGetContextBasedTagDiscussionRequest, CsGetContextBasedTagDiscussionResponse, CsGetContextBasedTagRequest, CsGetContextBasedTagResponse, CsRemoveForumRequest, CsRemoveForumResponse } from '../interface/cs-discussion-service';
import { CsFormService } from 'src/services/form/interface/cs-form-service';
export declare class DiscussionServiceImpl implements CsDiscussionService {
    private httpService;
    private apiPath;
    private container;
    private formService;
    constructor(httpService: CsHttpService, apiPath: string, container: Container, formService: CsFormService);
    fetchAllTags(config?: any): Observable<{
        result: {};
    }>;
    createPost(data: any, config?: any): Observable<{
        result: {};
    }>;
    fetchAllCategories(config?: CsDiscussionServiceConfig): Observable<{
        result: {};
    }>;
    fetchSingleCategoryDetails(cid: any, config?: any): Observable<{
        result: {};
    }>;
    votePost(pid: number, data: any, config?: any): Observable<{
        result: {};
    }>;
    deleteVotePost(pid: number, config?: any): Observable<{
        result: {};
    }>;
    bookmarkPost(pid: number, config?: any): Observable<{
        result: {};
    }>;
    deleteBookmarkPost(pid: number, config?: any): Observable<{
        result: {};
    }>;
    replyPost(tid: number, data: any, config?: any): Observable<{
        result: {};
    }>;
    fetchRecentD(page?: any, config?: any): Observable<{
        result: {};
    }>;
    fetchTopicById(topicId: number, slug?: any, page?: any, config?: any): Observable<{
        result: {};
    }>;
    fetchTopicByIdSort(topicId: number, sort: any, page?: any, config?: any): Observable<{
        result: {};
    }>;
    fetchUnreadCOunt(config?: any): Observable<{
        result: {};
    }>;
    fetchProfileInfo(slug: string, config?: any): Observable<{
        result: {};
    }>;
    fetchUpvoted(slug: any, pageId?: number, config?: any): Observable<{
        result: {};
    }>;
    fetchDownvoted(slug: any, pageId?: number, config?: any): Observable<{
        result: {};
    }>;
    fetchSaved(slug: any, pageId?: number, config?: any): Observable<{
        result: {};
    }>;
    fetchNetworkProfile(slug: any, config?: any): Observable<{
        result: {};
    }>;
    getContextBasedTopic(slug: string, pageId: number, config?: any): Observable<{
        result: {};
    }>;
    createUser(data: any, config?: any): Observable<{
        result: {};
    }>;
    getForumIds(data: any, config?: any): Observable<{
        result: {};
    }>;
    getUserDetails(userId: any, config?: any): Observable<{
        result: {};
    }>;
    editPost(pid: number, data: any, config?: any): Observable<{
        result: {};
    }>;
    deletePost(pid: number, uid: number, config?: any): Observable<{
        result: {};
    }>;
    removeForum(data: CsRemoveForumRequest, config?: CsDiscussionServiceConfig): Observable<CsRemoveForumResponse>;
    createForum(data: any, config?: CsDiscussionServiceConfig): Observable<CsAttachForumResponse>;
    attachForum(request: CsAttachForumRequest): Observable<CsAttachForumResponse>;
    deleteTopic(tid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    editTopic(tid: number, data: any, config?: CsDiscussionServiceConfig): Observable<CsAttachForumResponse>;
    getContextBasedDiscussion(data: CsGetContextBasedDiscussionRequest, config?: CsDiscussionServiceConfig): Observable<any>;
    getContextBasedTagDiscussion(data: CsGetContextBasedTagDiscussionRequest, config?: CsDiscussionServiceConfig): Observable<CsGetContextBasedTagDiscussionResponse>;
    recentPost(userSlug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<{
        result: {};
    }>;
    fetchBestPost(userSlug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<{
        result: {};
    }>;
    popularPost(config?: CsDiscussionServiceConfig): Observable<{
        result: {};
    }>;
    getSingleCategoryDetails(cid: number, config?: CsDiscussionServiceConfig): Observable<{
        result: {};
    }>;
    contextBasedTags(data: CsGetContextBasedTagRequest, config?: CsDiscussionServiceConfig): Observable<CsGetContextBasedTagResponse>;
    getTagBasedDiscussion(tag: string, config?: CsDiscussionServiceConfig): Observable<{
        result: {};
    }>;
}
