import { Observable } from 'rxjs';
import { CsDiscussionServiceConfig } from '../../../index';
export interface CsGetForumIdsRequest {
}
export interface CsGetForumIdsResponse {
    result: any;
}
export interface CsCreateUserRequest {
}
export interface CsCreateUserResponse {
    result: any;
}
export interface CsAttachForumRequest {
    context: {
        type: string;
        identifier: string;
    };
    type: string;
}
export interface CsAttachForumResponse {
}
export interface CsRemoveForumRequest {
    sbType: string;
    sbIdentifier: string;
    cid: number;
}
export interface CsRemoveForumResponse {
}
export interface CsGetContextBasedDiscussionRequest {
    cids: any[];
}
export interface CsGetContextBasedDiscussionResponse {
    cids: any[];
    tag: string;
}
export interface CsGetContextBasedTagDiscussionRequest {
}
export interface CsGetContextBasedTagRequest {
}
export interface CsGetContextBasedTagDiscussionResponse {
}
export interface CsGetContextBasedTagResponse {
}
export interface CsDiscussionService {
    fetchAllTags(config?: CsDiscussionServiceConfig): Observable<any>;
    createPost(data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchAllCategories(config?: CsDiscussionServiceConfig): Observable<any>;
    fetchSingleCategoryDetails(cid: any, config?: CsDiscussionServiceConfig): Observable<any>;
    votePost(pid: number, data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    deleteVotePost(pid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    bookmarkPost(pid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    deleteBookmarkPost(pid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    replyPost(tid: number, data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchRecentD(page?: any, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchTopicById(topicId: number, slug?: any, page?: any, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchTopicByIdSort(topicId: number, sort: any, page?: any, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchUnreadCOunt(config?: CsDiscussionServiceConfig): Observable<any>;
    fetchProfileInfo(slug: string, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchUpvoted(slug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchDownvoted(slug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchSaved(slug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchNetworkProfile(slug: string, config?: CsDiscussionServiceConfig): Observable<any>;
    createUser(data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    getForumIds(data: CsGetForumIdsRequest, config?: CsDiscussionServiceConfig): Observable<CsGetForumIdsResponse>;
    getUserDetails(data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    getContextBasedTopic(uid: string, pageId: number, config?: CsDiscussionServiceConfig): Observable<any>;
    editPost(pid: number, data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    deletePost(pid: number, uid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    attachForum(data: CsAttachForumRequest): Observable<CsAttachForumResponse>;
    removeForum(data: CsRemoveForumRequest, config?: CsDiscussionServiceConfig): Observable<CsRemoveForumResponse>;
    createForum(data: any, config?: CsDiscussionServiceConfig): Observable<CsAttachForumResponse>;
    deleteTopic(tid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    editTopic(tid: number, data: any, config?: CsDiscussionServiceConfig): Observable<any>;
    getContextBasedDiscussion(data: CsGetContextBasedDiscussionRequest, config?: CsDiscussionServiceConfig): Observable<CsGetContextBasedDiscussionResponse>;
    getContextBasedTagDiscussion(data: CsGetContextBasedTagDiscussionRequest, config?: CsDiscussionServiceConfig): Observable<CsGetContextBasedTagDiscussionResponse>;
    contextBasedTags(data: CsGetContextBasedTagRequest, config?: CsDiscussionServiceConfig): Observable<CsGetContextBasedTagResponse>;
    recentPost(userSlug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<any>;
    fetchBestPost(userSlug: string, pageId?: number, config?: CsDiscussionServiceConfig): Observable<any>;
    popularPost(config?: CsDiscussionServiceConfig): Observable<any>;
    getSingleCategoryDetails(cid: number, config?: CsDiscussionServiceConfig): Observable<any>;
    getTagBasedDiscussion(tag: string, config?: CsDiscussionServiceConfig): Observable<any>;
}
