import { CsGroupSuspendResponse, CsGroupReactivateResponse, CsGroupUpdateGroupGuidelinesResponse, CsGroupUpdateGroupGuidelinesRequest } from './../interface/cs-group-service';
import { CsGroup } from './../../../models/group/index';
import { Container } from 'inversify';
import { CsGroupAddActivitiesRequest, CsGroupAddActivitiesResponse, CsGroupAddMembersRequest, CsGroupAddMembersResponse, CsGroupCreateRequest, CsGroupCreateResponse, CsGroupDeleteResponse, CsGroupRemoveActivitiesRequest, CsGroupRemoveActivitiesResponse, CsGroupRemoveMembersRequest, CsGroupRemoveMembersResponse, CsGroupSearchCriteria, CsGroupSearchResponse, CsGroupService, CsGroupSupportedActivitiesFormField, CsGroupUpdateActivitiesRequest, CsGroupUpdateActivitiesResponse, CsGroupUpdateMembersRequest, CsGroupUpdateMembersResponse, CsGroupUpdateRequest, CsGroupUpdateResponse } from '../interface';
import { CsGroupServiceConfig } from '../../..';
import { Observable } from 'rxjs';
import { CsHttpService } from '../../../core/http-service/interface';
import { CsGroupActivityService } from '../activity/interface';
import { CsFormService } from '../../form/interface/cs-form-service';
import { Form } from '../../../models/form';
export declare class GroupServiceImpl implements CsGroupService {
    private httpService;
    private apiPath;
    private container;
    private formService;
    private updateGroupGuidelinesApiPath;
    constructor(httpService: CsHttpService, apiPath: string, container: Container, formService: CsFormService, updateGroupGuidelinesApiPath: string);
    private _activityService?;
    get activityService(): CsGroupActivityService;
    create(createRequest: CsGroupCreateRequest, config?: CsGroupServiceConfig): Observable<CsGroupCreateResponse>;
    updateById(id: string, updateRequest: CsGroupUpdateRequest, config?: CsGroupServiceConfig): Observable<CsGroupUpdateResponse>;
    addMembers(groupId: string, addMembersRequest: CsGroupAddMembersRequest, config?: CsGroupServiceConfig): Observable<CsGroupAddMembersResponse>;
    removeMembers(groupId: string, removeMembersRequest: CsGroupRemoveMembersRequest, config?: CsGroupServiceConfig): Observable<CsGroupRemoveMembersResponse>;
    updateMembers(groupId: string, updateMembersRequest: CsGroupUpdateMembersRequest, config?: CsGroupServiceConfig): Observable<CsGroupUpdateMembersResponse>;
    addActivities(groupId: string, addActivitiesRequest: CsGroupAddActivitiesRequest, config?: CsGroupServiceConfig): Observable<CsGroupAddActivitiesResponse>;
    updateActivities(groupId: string, updateActivitiesRequest: CsGroupUpdateActivitiesRequest, config?: CsGroupServiceConfig): Observable<CsGroupUpdateActivitiesResponse>;
    removeActivities(groupId: string, removeActivitiesRequest: CsGroupRemoveActivitiesRequest, config?: CsGroupServiceConfig): Observable<CsGroupRemoveActivitiesResponse>;
    getById(id: string, options?: {
        includeMembers?: boolean;
        includeActivities?: boolean;
        groupActivities?: boolean;
    }, config?: CsGroupServiceConfig): Observable<CsGroup>;
    search(searchCriteria: CsGroupSearchCriteria, config?: CsGroupServiceConfig): Observable<CsGroupSearchResponse[]>;
    deleteById(id: string, config?: CsGroupServiceConfig): Observable<CsGroupDeleteResponse>;
    suspendById(id: string, config?: CsGroupServiceConfig): Observable<CsGroupSuspendResponse>;
    reactivateById(id: string, config?: CsGroupServiceConfig): Observable<CsGroupReactivateResponse>;
    getSupportedActivities(config?: CsGroupServiceConfig): Observable<Form<CsGroupSupportedActivitiesFormField>>;
    updateGroupGuidelines(request: CsGroupUpdateGroupGuidelinesRequest, config?: CsGroupServiceConfig): Observable<CsGroupUpdateGroupGuidelinesResponse>;
    getActivityDataById(groupData: any, activity: any): never[];
    groupContentsByActivityType(activitiesGrouped: any): {
        activities: any;
    };
}
