import { CheckUserExistsResponse, CsDeleteUserFeedResponse, CsProfileDetailsRequest, CsProfileUpdateRequest, CsProfileUpdateResponse, CsUpdateUserDeclarationsResponse, CsUpdateUserFeedRequest, CsUpdateUserFeedResponse, CsUserService, ReadConsentResponse, UpdateConsentResponse } from '../interface';
import { Observable } from 'rxjs';
import { CsUserServiceConfig } from '../../../index';
import { CsHttpService } from '../../../core/http-service/interface';
import { Consent, User, UserDeclaration, UserFeedCategory, UserFeedEntry } from 'src/models';
export declare class UserServiceImpl implements CsUserService {
    private httpService;
    private apiPath;
    constructor(httpService: CsHttpService, apiPath: string);
    checkUserExists(matching: {
        key: string;
        value: string;
    }, captchaResponse?: {
        token: string;
        app?: string;
    }, config?: CsUserServiceConfig): Observable<CheckUserExistsResponse>;
    updateUserDeclarations(declarations: UserDeclaration[], config?: CsUserServiceConfig): Observable<CsUpdateUserDeclarationsResponse>;
    updateConsent(consent: Consent, config?: CsUserServiceConfig): Observable<UpdateConsentResponse>;
    getConsent(consent: Consent, config?: CsUserServiceConfig): Observable<ReadConsentResponse>;
    getUserFeed(uid: string, config?: CsUserServiceConfig): Observable<UserFeedEntry[]>;
    updateUserFeedEntry(uid: string, feedEntryId: string, category: UserFeedCategory, request: CsUpdateUserFeedRequest, config?: CsUserServiceConfig): Observable<CsUpdateUserFeedResponse>;
    deleteUserFeedEntry(uid: string, feedEntryId: string, category: UserFeedCategory, config?: CsUserServiceConfig): Observable<CsDeleteUserFeedResponse>;
    getProfileDetails(profileDetailsRequest: CsProfileDetailsRequest, config?: CsUserServiceConfig): Observable<User>;
    updateProfile(profileUpdateRequest: CsProfileUpdateRequest, config?: CsUserServiceConfig): Observable<CsProfileUpdateResponse>;
}
