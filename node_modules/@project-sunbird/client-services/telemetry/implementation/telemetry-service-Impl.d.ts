import { TelemetryService } from '../interface';
import { IActor, ICDataEntry, IProducerdata, ITelemetry, ITelemetryContext, ITelemetryObject } from '../interface/cs-telemetry-request';
export declare class TelemetryServiceImpl implements TelemetryService {
    _isInitialsed: boolean;
    telemetryProvider: any;
    context: ITelemetryContext;
    pData: IProducerdata;
    actor: IActor;
    config: ITelemetry;
    raiseEndTelemetryWith(cdata: ICDataEntry[], env: string, edata: any, telemetryObject?: ITelemetryObject | undefined): void;
    initTelemetry(telemetryContext: ITelemetryContext): void;
    initTelmetry(pdata: IProducerdata, actor: IActor, channel: string, sid: string, did: string): void;
    setTelemetryAttributes(pdata: IProducerdata, actor: IActor, channel: string, sid: string, did: string): void;
    formulateBasicConfigForTelemetry(): void;
    initProducerData(pdata: IProducerdata): IProducerdata | undefined;
    private isTelemetryInitialised;
    raiseInteractTelemetry(interactObject: any): void;
    raiseSearchTelemetry(interactObject: any): void;
    raiseSearchTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseInteractTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseImpressionTelemetry(impressionObject: any): void;
    raiseImpressionTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseLogTelemetry(logObject: any): void;
    raiseLogTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseErrorTelemetry(errorObject: any): void;
    raiseErrorTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseAuditTelemetry(auditObject: any): void;
    raiseAuditTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseStartTelemetry(startEventObject: any): void;
    raiseEndTelemetry(endEventObject: any): void;
    raiseShareTelemetry(shareEventObject: any): void;
    raiseShareTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseFeedBackTelemetry(feedbackEventObject: any): void;
    raiseFeedBackTelemetryWith(cdata: Array<ICDataEntry>, env: string, edata: any, telemetryObject?: ITelemetryObject): void;
    raiseAssesTelemetry(data: any, options: any): void;
    raiseResponseTelemetry(data: any, options: any): void;
    raiseSummaryTelemetry(data: any, options: any): void;
}
