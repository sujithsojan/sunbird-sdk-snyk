declare type Primitive = string | number | boolean;
interface SortCriteria {
    [key: string]: 'asc' | 'desc' | SortComprehension;
}
interface SortComprehension {
    order: 'asc' | 'desc';
    preference?: Primitive[];
}
export declare class Aggregator {
    static groupByIntoMap<T>(list: T[], field: keyof T | string): {
        [key: string]: T[];
    };
    static groupByIntoPairList<T>(list: T[], field: keyof T | string): [string, T[]][];
    static sorted<T>(list: T[], sort: SortCriteria[], comparator?: (a: any, b: any) => number): T[];
    static filtered<T>(list: T[], filter: {
        [key: string]: {
            operation: '==' | '<=' | '>=' | '!=';
            value: any;
        };
    }[]): T[];
    private static deepGet;
}
export {};
