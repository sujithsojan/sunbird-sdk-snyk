import { DbConstants } from '../../../db';
export var NetworkQueueEntry;
(function (NetworkQueueEntry) {
    NetworkQueueEntry.TABLE_NAME = 'network_queue';
    NetworkQueueEntry._ID = '_id';
    NetworkQueueEntry.COLUMN_NAME_MSG_ID = 'msg_id';
    NetworkQueueEntry.COLUMN_NAME_PRIORITY = 'priority';
    NetworkQueueEntry.COLUMN_NAME_TIMESTAMP = 'timestamp';
    NetworkQueueEntry.COLUMN_NAME_DATA = 'data';
    NetworkQueueEntry.COLUMN_NAME_REQUEST = 'request';
    NetworkQueueEntry.COLUMN_NAME_NUMBER_OF_ITEM = 'item_count';
    NetworkQueueEntry.COLUMN_NAME_CONFIG = 'config';
    NetworkQueueEntry.COLUMN_NAME_TYPE = 'type';
    NetworkQueueEntry.getCreateEntry = function () {
        return 'CREATE TABLE IF NOT EXISTS ' + NetworkQueueEntry.TABLE_NAME + ' (' +
            NetworkQueueEntry._ID + ' INTEGER PRIMARY KEY' + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_MSG_ID + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_PRIORITY + DbConstants.SPACE + DbConstants.INT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_TIMESTAMP + DbConstants.SPACE + DbConstants.INT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_DATA + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_NUMBER_OF_ITEM + DbConstants.SPACE + DbConstants.INT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_CONFIG + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_TYPE + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            NetworkQueueEntry.COLUMN_NAME_REQUEST + DbConstants.SPACE + DbConstants.TEXT_TYPE +
            ')';
    };
    NetworkQueueEntry.deleteTable = function () {
        return 'DROP TABLE IF EXISTS' + NetworkQueueEntry.TABLE_NAME;
    };
    var Mapper = /** @class */ (function () {
        function Mapper() {
        }
        Mapper.networkQueueRequestToEntry = function (networkQueueRequest) {
            var _a;
            return _a = {},
                _a[NetworkQueueEntry.COLUMN_NAME_MSG_ID] = networkQueueRequest.msgId,
                _a[NetworkQueueEntry.COLUMN_NAME_PRIORITY] = networkQueueRequest.priority,
                _a[NetworkQueueEntry.COLUMN_NAME_TIMESTAMP] = networkQueueRequest.ts,
                _a[NetworkQueueEntry.COLUMN_NAME_DATA] = networkQueueRequest.data,
                _a[NetworkQueueEntry.COLUMN_NAME_NUMBER_OF_ITEM] = networkQueueRequest.itemCount,
                _a[NetworkQueueEntry.COLUMN_NAME_CONFIG] = networkQueueRequest.config,
                _a[NetworkQueueEntry.COLUMN_NAME_TYPE] = networkQueueRequest.type,
                _a[NetworkQueueEntry.COLUMN_NAME_REQUEST] = networkQueueRequest.networkRequest.toJSON(),
                _a;
        };
        return Mapper;
    }());
    NetworkQueueEntry.Mapper = Mapper;
})(NetworkQueueEntry || (NetworkQueueEntry = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS9uZXR3b3JrLXF1ZXVlL2RiL3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sS0FBVyxpQkFBaUIsQ0F3RGpDO0FBeERELFdBQWlCLGlCQUFpQjtJQUVsQiw0QkFBVSxHQUFHLGVBQWUsQ0FBQztJQUM3QixxQkFBRyxHQUFHLEtBQUssQ0FBQztJQUNaLG9DQUFrQixHQUFHLFFBQVEsQ0FBQztJQUM5QixzQ0FBb0IsR0FBRyxVQUFVLENBQUM7SUFDbEMsdUNBQXFCLEdBQUcsV0FBVyxDQUFDO0lBQ3BDLGtDQUFnQixHQUFHLE1BQU0sQ0FBQztJQUMxQixxQ0FBbUIsR0FBRyxTQUFTLENBQUM7SUFDaEMsNENBQTBCLEdBQUcsWUFBWSxDQUFDO0lBQzFDLG9DQUFrQixHQUFHLFFBQVEsQ0FBQztJQUM5QixrQ0FBZ0IsR0FBRyxNQUFNLENBQUM7SUFhMUIsZ0NBQWMsR0FBbUI7UUFDNUMsT0FBTyw2QkFBNkIsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsSUFBSTtZQUN4RSxpQkFBaUIsQ0FBQyxHQUFHLEdBQUcsc0JBQXNCLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDdEUsaUJBQWlCLENBQUMsa0JBQWtCLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ3hHLGtCQUFBLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUztZQUN2RixrQkFBQSxxQkFBcUIsR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDeEYsa0JBQUEsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ3BGLGtCQUFBLDBCQUEwQixHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUztZQUM3RixrQkFBQSxrQkFBa0IsR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDdEYsa0JBQUEsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ3BGLGtCQUFBLG1CQUFtQixHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDL0QsR0FBRyxDQUFDO0lBQ1IsQ0FBQyxDQUFDO0lBRVcsNkJBQVcsR0FBbUI7UUFDekMsT0FBTyxzQkFBc0IsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7SUFDL0QsQ0FBQyxDQUFDO0lBRUY7UUFBQTtRQWFBLENBQUM7UUFaUSxpQ0FBMEIsR0FBakMsVUFBa0MsbUJBQXdDOztZQUN4RTtnQkFDRSxHQUFDLGlCQUFpQixDQUFDLGtCQUFrQixJQUFHLG1CQUFtQixDQUFDLEtBQUs7Z0JBQ2pFLEdBQUMsaUJBQWlCLENBQUMsb0JBQW9CLElBQUcsbUJBQW1CLENBQUMsUUFBUTtnQkFDdEUsR0FBQyxpQkFBaUIsQ0FBQyxxQkFBcUIsSUFBRyxtQkFBbUIsQ0FBQyxFQUFFO2dCQUNqRSxHQUFDLGlCQUFpQixDQUFDLGdCQUFnQixJQUFHLG1CQUFtQixDQUFDLElBQUk7Z0JBQzlELEdBQUMsaUJBQWlCLENBQUMsMEJBQTBCLElBQUcsbUJBQW1CLENBQUMsU0FBUztnQkFDN0UsR0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsSUFBRyxtQkFBbUIsQ0FBQyxNQUFNO2dCQUNsRSxHQUFDLGlCQUFpQixDQUFDLGdCQUFnQixJQUFHLG1CQUFtQixDQUFDLElBQUk7Z0JBQzlELEdBQUMsaUJBQWlCLENBQUMsbUJBQW1CLElBQUcsbUJBQW1CLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTttQkFDcEY7UUFDSixDQUFDO1FBQ0gsYUFBQztJQUFELENBQUMsQUFiRCxJQWFDO0lBYlksd0JBQU0sU0FhbEIsQ0FBQTtBQUNKLENBQUMsRUF4RGdCLGlCQUFpQixLQUFqQixpQkFBaUIsUUF3RGpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYkNvbnN0YW50c30gZnJvbSAnLi4vLi4vLi4vZGInO1xuaW1wb3J0IHtOZXR3b3JrUXVldWVSZXF1ZXN0fSBmcm9tICcuLic7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTmV0d29ya1F1ZXVlRW50cnkge1xuXG4gICBleHBvcnQgY29uc3QgVEFCTEVfTkFNRSA9ICduZXR3b3JrX3F1ZXVlJztcbiAgIGV4cG9ydCBjb25zdCBfSUQgPSAnX2lkJztcbiAgIGV4cG9ydCBjb25zdCBDT0xVTU5fTkFNRV9NU0dfSUQgPSAnbXNnX2lkJztcbiAgIGV4cG9ydCBjb25zdCBDT0xVTU5fTkFNRV9QUklPUklUWSA9ICdwcmlvcml0eSc7XG4gICBleHBvcnQgY29uc3QgQ09MVU1OX05BTUVfVElNRVNUQU1QID0gJ3RpbWVzdGFtcCc7XG4gICBleHBvcnQgY29uc3QgQ09MVU1OX05BTUVfREFUQSA9ICdkYXRhJztcbiAgIGV4cG9ydCBjb25zdCBDT0xVTU5fTkFNRV9SRVFVRVNUID0gJ3JlcXVlc3QnO1xuICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX05VTUJFUl9PRl9JVEVNID0gJ2l0ZW1fY291bnQnO1xuICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX0NPTkZJRyA9ICdjb25maWcnO1xuICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX1RZUEUgPSAndHlwZSc7XG5cbiAgIGV4cG9ydCBpbnRlcmZhY2UgU2NoZW1hTWFwIHtcbiAgICAgW0NPTFVNTl9OQU1FX01TR19JRF06IHN0cmluZztcbiAgICAgW0NPTFVNTl9OQU1FX1BSSU9SSVRZXTogbnVtYmVyO1xuICAgICBbQ09MVU1OX05BTUVfVElNRVNUQU1QXTogbnVtYmVyO1xuICAgICBbQ09MVU1OX05BTUVfUkVRVUVTVF06IHN0cmluZztcbiAgICAgW0NPTFVNTl9OQU1FX0RBVEFdOiBzdHJpbmc7XG4gICAgIFtDT0xVTU5fTkFNRV9UWVBFXTogc3RyaW5nO1xuICAgICBbQ09MVU1OX05BTUVfTlVNQkVSX09GX0lURU1dOiBudW1iZXI7XG4gICAgIFtDT0xVTU5fTkFNRV9DT05GSUddOiBzdHJpbmc7XG4gICB9XG5cbiAgIGV4cG9ydCBjb25zdCBnZXRDcmVhdGVFbnRyeTogKCgpID0+IHN0cmluZykgPSAoKSA9PiB7XG4gICAgIHJldHVybiAnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJyArIE5ldHdvcmtRdWV1ZUVudHJ5LlRBQkxFX05BTUUgKyAnICgnICtcbiAgICAgICBOZXR3b3JrUXVldWVFbnRyeS5fSUQgKyAnIElOVEVHRVIgUFJJTUFSWSBLRVknICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICBOZXR3b3JrUXVldWVFbnRyeS5DT0xVTU5fTkFNRV9NU0dfSUQgKyBEYkNvbnN0YW50cy5TUEFDRSArIERiQ29uc3RhbnRzLlRFWFRfVFlQRSArIERiQ29uc3RhbnRzLkNPTU1BX1NFUCArXG4gICAgICAgQ09MVU1OX05BTUVfUFJJT1JJVFkgKyBEYkNvbnN0YW50cy5TUEFDRSArIERiQ29uc3RhbnRzLklOVF9UWVBFICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICBDT0xVTU5fTkFNRV9USU1FU1RBTVAgKyBEYkNvbnN0YW50cy5TUEFDRSArIERiQ29uc3RhbnRzLklOVF9UWVBFICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICBDT0xVTU5fTkFNRV9EQVRBICsgRGJDb25zdGFudHMuU1BBQ0UgKyBEYkNvbnN0YW50cy5URVhUX1RZUEUgKyBEYkNvbnN0YW50cy5DT01NQV9TRVAgK1xuICAgICAgIENPTFVNTl9OQU1FX05VTUJFUl9PRl9JVEVNICsgRGJDb25zdGFudHMuU1BBQ0UgKyBEYkNvbnN0YW50cy5JTlRfVFlQRSArIERiQ29uc3RhbnRzLkNPTU1BX1NFUCArXG4gICAgICAgQ09MVU1OX05BTUVfQ09ORklHICsgRGJDb25zdGFudHMuU1BBQ0UgKyBEYkNvbnN0YW50cy5URVhUX1RZUEUgKyBEYkNvbnN0YW50cy5DT01NQV9TRVAgK1xuICAgICAgIENPTFVNTl9OQU1FX1RZUEUgKyBEYkNvbnN0YW50cy5TUEFDRSArIERiQ29uc3RhbnRzLlRFWFRfVFlQRSArIERiQ29uc3RhbnRzLkNPTU1BX1NFUCArXG4gICAgICAgQ09MVU1OX05BTUVfUkVRVUVTVCArIERiQ29uc3RhbnRzLlNQQUNFICsgRGJDb25zdGFudHMuVEVYVF9UWVBFICtcbiAgICAgICAnKSc7XG4gICB9O1xuXG4gICBleHBvcnQgY29uc3QgZGVsZXRlVGFibGU6ICgoKSA9PiBzdHJpbmcpID0gKCkgPT4ge1xuICAgICByZXR1cm4gJ0RST1AgVEFCTEUgSUYgRVhJU1RTJyArIE5ldHdvcmtRdWV1ZUVudHJ5LlRBQkxFX05BTUU7XG4gICB9O1xuXG4gICBleHBvcnQgY2xhc3MgTWFwcGVyIHtcbiAgICAgc3RhdGljIG5ldHdvcmtRdWV1ZVJlcXVlc3RUb0VudHJ5KG5ldHdvcmtRdWV1ZVJlcXVlc3Q6IE5ldHdvcmtRdWV1ZVJlcXVlc3QpOiBOZXR3b3JrUXVldWVFbnRyeS5TY2hlbWFNYXAge1xuICAgICAgIHJldHVybiB7XG4gICAgICAgICBbTmV0d29ya1F1ZXVlRW50cnkuQ09MVU1OX05BTUVfTVNHX0lEXTogbmV0d29ya1F1ZXVlUmVxdWVzdC5tc2dJZCxcbiAgICAgICAgIFtOZXR3b3JrUXVldWVFbnRyeS5DT0xVTU5fTkFNRV9QUklPUklUWV06IG5ldHdvcmtRdWV1ZVJlcXVlc3QucHJpb3JpdHksXG4gICAgICAgICBbTmV0d29ya1F1ZXVlRW50cnkuQ09MVU1OX05BTUVfVElNRVNUQU1QXTogbmV0d29ya1F1ZXVlUmVxdWVzdC50cyxcbiAgICAgICAgIFtOZXR3b3JrUXVldWVFbnRyeS5DT0xVTU5fTkFNRV9EQVRBXTogbmV0d29ya1F1ZXVlUmVxdWVzdC5kYXRhLFxuICAgICAgICAgW05ldHdvcmtRdWV1ZUVudHJ5LkNPTFVNTl9OQU1FX05VTUJFUl9PRl9JVEVNXTogbmV0d29ya1F1ZXVlUmVxdWVzdC5pdGVtQ291bnQsXG4gICAgICAgICBbTmV0d29ya1F1ZXVlRW50cnkuQ09MVU1OX05BTUVfQ09ORklHXTogbmV0d29ya1F1ZXVlUmVxdWVzdC5jb25maWcsXG4gICAgICAgICBbTmV0d29ya1F1ZXVlRW50cnkuQ09MVU1OX05BTUVfVFlQRV06IG5ldHdvcmtRdWV1ZVJlcXVlc3QudHlwZSxcbiAgICAgICAgIFtOZXR3b3JrUXVldWVFbnRyeS5DT0xVTU5fTkFNRV9SRVFVRVNUXTogbmV0d29ya1F1ZXVlUmVxdWVzdC5uZXR3b3JrUmVxdWVzdC50b0pTT04oKVxuICAgICAgIH07XG4gICAgIH1cbiAgIH1cbn1cbiJdfQ==