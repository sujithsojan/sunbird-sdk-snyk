import { HttpRequestType, HttpSerializer, Request } from '../..';
import { NetworkQueueType } from '..';
import { TelemetrySyncHandler } from '../../../telemetry/handler/telemetry-sync-handler';
import { UpdateContentStateApiHandler } from '../../../course/handlers/update-content-state-api-handler';
var NetworkRequestHandler = /** @class */ (function () {
    function NetworkRequestHandler(config) {
        this.config = config;
    }
    NetworkRequestHandler.prototype.generateNetworkQueueRequest = function (type, data, messageId, eventsCount, isForceSynced) {
        var body;
        var apiRequest;
        if (type === NetworkQueueType.TELEMETRY) {
            var gzippedCharData = data.split('').map(function (c) {
                return c.charCodeAt(0);
            });
            body = new Uint8Array(gzippedCharData);
            apiRequest = new Request.Builder()
                .withSerializer(HttpSerializer.RAW)
                .withHost(this.config.telemetryConfig.host)
                .withType(HttpRequestType.POST)
                .withPath(this.config.telemetryConfig.apiPath + TelemetrySyncHandler.TELEMETRY_ENDPOINT)
                .withHeaders({
                'Content-Type': 'application/json',
                'Content-Encoding': 'gzip'
            })
                .withBody(body)
                .withBearerToken(true)
                .build();
        }
        else {
            body = data;
            apiRequest = new Request.Builder()
                .withType(HttpRequestType.PATCH)
                .withPath(this.config.courseServiceConfig.apiPath + UpdateContentStateApiHandler.UPDATE_CONTENT_STATE_ENDPOINT)
                .withBearerToken(true)
                .withUserToken(true)
                .withBody(body)
                .build();
        }
        var networkQueueRequest = {
            msgId: messageId,
            data: (type === NetworkQueueType.TELEMETRY) ? data : JSON.stringify(data),
            networkRequest: apiRequest,
            priority: (type === NetworkQueueType.TELEMETRY) ? 2 : 1,
            itemCount: eventsCount,
            type: type,
            config: JSON.stringify({ shouldPublishResult: isForceSynced }),
            ts: Date.now()
        };
        return networkQueueRequest;
    };
    return NetworkRequestHandler;
}());
export { NetworkRequestHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay1yZXF1ZXN0LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL25ldHdvcmstcXVldWUvaGFuZGxlcnMvbmV0d29yay1yZXF1ZXN0LWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBQy9ELE9BQU8sRUFBc0IsZ0JBQWdCLEVBQUMsTUFBTSxJQUFJLENBQUM7QUFDekQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sbURBQW1ELENBQUM7QUFFdkYsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sMkRBQTJELENBQUM7QUFFdkc7SUFFRSwrQkFBb0IsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUNyQyxDQUFDO0lBRU0sMkRBQTJCLEdBQWxDLFVBQW1DLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxhQUFhO1FBQ2xGLElBQUksSUFBSSxDQUFDO1FBQ1QsSUFBSSxVQUFtQixDQUFDO1FBQ3hCLElBQUksSUFBSSxLQUFLLGdCQUFnQixDQUFDLFNBQVMsRUFBRTtZQUN2QyxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUM7Z0JBQzNDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztZQUNILElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN2QyxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO2lCQUMvQixjQUFjLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztpQkFDbEMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUssQ0FBQztpQkFDM0MsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7aUJBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEdBQUcsb0JBQW9CLENBQUMsa0JBQWtCLENBQUM7aUJBQ3ZGLFdBQVcsQ0FBQztnQkFDWCxjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxrQkFBa0IsRUFBRSxNQUFNO2FBQzNCLENBQUM7aUJBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQztpQkFDZCxlQUFlLENBQUMsSUFBSSxDQUFDO2lCQUNyQixLQUFLLEVBQUUsQ0FBQztTQUNaO2FBQU07WUFDTCxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ1osVUFBVSxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtpQkFDL0IsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7aUJBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sR0FBRyw0QkFBNEIsQ0FBQyw2QkFBNkIsQ0FBQztpQkFDOUcsZUFBZSxDQUFDLElBQUksQ0FBQztpQkFDckIsYUFBYSxDQUFDLElBQUksQ0FBQztpQkFDbkIsUUFBUSxDQUFDLElBQUksQ0FBQztpQkFDZCxLQUFLLEVBQUUsQ0FBQztTQUNaO1FBRUQsSUFBTSxtQkFBbUIsR0FBd0I7WUFDL0MsS0FBSyxFQUFFLFNBQVM7WUFDaEIsSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ3pFLGNBQWMsRUFBRSxVQUFVO1lBQzFCLFFBQVEsRUFBRSxDQUFDLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFNBQVMsRUFBRSxXQUFXO1lBQ3RCLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxtQkFBbUIsRUFBRSxhQUFhLEVBQUMsQ0FBQztZQUM1RCxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtTQUNmLENBQUM7UUFFRixPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFqREQsSUFpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBSZXF1ZXN0VHlwZSwgSHR0cFNlcmlhbGl6ZXIsIFJlcXVlc3R9IGZyb20gJy4uLy4uJztcbmltcG9ydCB7TmV0d29ya1F1ZXVlUmVxdWVzdCwgTmV0d29ya1F1ZXVlVHlwZX0gZnJvbSAnLi4nO1xuaW1wb3J0IHtUZWxlbWV0cnlTeW5jSGFuZGxlcn0gZnJvbSAnLi4vLi4vLi4vdGVsZW1ldHJ5L2hhbmRsZXIvdGVsZW1ldHJ5LXN5bmMtaGFuZGxlcic7XG5pbXBvcnQge1Nka0NvbmZpZ30gZnJvbSAnLi4vLi4vLi4vc2RrLWNvbmZpZyc7XG5pbXBvcnQge1VwZGF0ZUNvbnRlbnRTdGF0ZUFwaUhhbmRsZXJ9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS9oYW5kbGVycy91cGRhdGUtY29udGVudC1zdGF0ZS1hcGktaGFuZGxlcic7XG5cbmV4cG9ydCBjbGFzcyBOZXR3b3JrUmVxdWVzdEhhbmRsZXIge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBTZGtDb25maWcpIHtcbiAgfVxuXG4gIHB1YmxpYyBnZW5lcmF0ZU5ldHdvcmtRdWV1ZVJlcXVlc3QodHlwZSwgZGF0YSwgbWVzc2FnZUlkLCBldmVudHNDb3VudCwgaXNGb3JjZVN5bmNlZCk6IE5ldHdvcmtRdWV1ZVJlcXVlc3Qge1xuICAgIGxldCBib2R5O1xuICAgIGxldCBhcGlSZXF1ZXN0OiBSZXF1ZXN0O1xuICAgIGlmICh0eXBlID09PSBOZXR3b3JrUXVldWVUeXBlLlRFTEVNRVRSWSkge1xuICAgICAgY29uc3QgZ3ppcHBlZENoYXJEYXRhID0gZGF0YS5zcGxpdCgnJykubWFwKChjKSA9PiB7XG4gICAgICAgIHJldHVybiBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICB9KTtcbiAgICAgIGJvZHkgPSBuZXcgVWludDhBcnJheShnemlwcGVkQ2hhckRhdGEpO1xuICAgICAgYXBpUmVxdWVzdCA9IG5ldyBSZXF1ZXN0LkJ1aWxkZXIoKVxuICAgICAgICAud2l0aFNlcmlhbGl6ZXIoSHR0cFNlcmlhbGl6ZXIuUkFXKVxuICAgICAgICAud2l0aEhvc3QodGhpcy5jb25maWcudGVsZW1ldHJ5Q29uZmlnLmhvc3QhKVxuICAgICAgICAud2l0aFR5cGUoSHR0cFJlcXVlc3RUeXBlLlBPU1QpXG4gICAgICAgIC53aXRoUGF0aCh0aGlzLmNvbmZpZy50ZWxlbWV0cnlDb25maWcuYXBpUGF0aCArIFRlbGVtZXRyeVN5bmNIYW5kbGVyLlRFTEVNRVRSWV9FTkRQT0lOVClcbiAgICAgICAgLndpdGhIZWFkZXJzKHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdDb250ZW50LUVuY29kaW5nJzogJ2d6aXAnXG4gICAgICAgIH0pXG4gICAgICAgIC53aXRoQm9keShib2R5KVxuICAgICAgICAud2l0aEJlYXJlclRva2VuKHRydWUpXG4gICAgICAgIC5idWlsZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBib2R5ID0gZGF0YTtcbiAgICAgIGFwaVJlcXVlc3QgPSBuZXcgUmVxdWVzdC5CdWlsZGVyKClcbiAgICAgICAgLndpdGhUeXBlKEh0dHBSZXF1ZXN0VHlwZS5QQVRDSClcbiAgICAgICAgLndpdGhQYXRoKHRoaXMuY29uZmlnLmNvdXJzZVNlcnZpY2VDb25maWcuYXBpUGF0aCArIFVwZGF0ZUNvbnRlbnRTdGF0ZUFwaUhhbmRsZXIuVVBEQVRFX0NPTlRFTlRfU1RBVEVfRU5EUE9JTlQpXG4gICAgICAgIC53aXRoQmVhcmVyVG9rZW4odHJ1ZSlcbiAgICAgICAgLndpdGhVc2VyVG9rZW4odHJ1ZSlcbiAgICAgICAgLndpdGhCb2R5KGJvZHkpXG4gICAgICAgIC5idWlsZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ldHdvcmtRdWV1ZVJlcXVlc3Q6IE5ldHdvcmtRdWV1ZVJlcXVlc3QgPSB7XG4gICAgICBtc2dJZDogbWVzc2FnZUlkLFxuICAgICAgZGF0YTogKHR5cGUgPT09IE5ldHdvcmtRdWV1ZVR5cGUuVEVMRU1FVFJZKSA/IGRhdGEgOiBKU09OLnN0cmluZ2lmeShkYXRhKSAsXG4gICAgICBuZXR3b3JrUmVxdWVzdDogYXBpUmVxdWVzdCxcbiAgICAgIHByaW9yaXR5OiAodHlwZSA9PT0gTmV0d29ya1F1ZXVlVHlwZS5URUxFTUVUUlkpID8gMiA6IDEsXG4gICAgICBpdGVtQ291bnQ6IGV2ZW50c0NvdW50LFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGNvbmZpZzogSlNPTi5zdHJpbmdpZnkoe3Nob3VsZFB1Ymxpc2hSZXN1bHQ6IGlzRm9yY2VTeW5jZWR9KSxcbiAgICAgIHRzOiBEYXRlLm5vdygpXG4gICAgfTtcblxuICAgIHJldHVybiBuZXR3b3JrUXVldWVSZXF1ZXN0O1xuICB9XG59XG4iXX0=