import { of } from 'rxjs';
import { mapTo, mergeMap } from 'rxjs/operators';
import { CsInjectionTokens } from '../../injection-tokens';
import { CertificatePublicKeyEntry } from '../db/schema';
var GetPublicKeyHandler = /** @class */ (function () {
    function GetPublicKeyHandler(dbService, container, certificateServiceConfig, apiConfig) {
        this.dbService = dbService;
        this.container = container;
        this.certificateServiceConfig = certificateServiceConfig;
        this.apiConfig = apiConfig;
    }
    Object.defineProperty(GetPublicKeyHandler.prototype, "csCertificateService", {
        get: function () {
            return this.container.get(CsInjectionTokens.CERTIFICATE_SERVICE);
        },
        enumerable: false,
        configurable: true
    });
    GetPublicKeyHandler.prototype.handle = function (request) {
        var _this = this;
        return this.dbService.read({
            table: CertificatePublicKeyEntry.TABLE_NAME,
            selection: CertificatePublicKeyEntry.COLUMN_NAME_IDENTIFIER + "= ?",
            selectionArgs: [request.osid.toString()]
        }).pipe(mergeMap(function (publicKeyInDb) {
            if (publicKeyInDb && publicKeyInDb.length) {
                if (publicKeyInDb[0].expiry_time < Date.now()) {
                    return _this.fetchFromServer(request).pipe(mergeMap(function (response) {
                        return _this.updatePublicKey(response);
                    }));
                }
                else {
                    return of({
                        osid: publicKeyInDb[0].identifier,
                        value: publicKeyInDb[0].public_key,
                        alg: publicKeyInDb[0].alg,
                        osOwner: publicKeyInDb[0].owner ? publicKeyInDb[0].owner.split(',') : []
                    });
                }
            }
            else {
                return _this.fetchFromServer(request).pipe(mergeMap(function (response) {
                    return _this.insertPublicKey(response);
                }));
            }
        }));
    };
    GetPublicKeyHandler.prototype.updatePublicKey = function (response) {
        return this.dbService.update({
            table: CertificatePublicKeyEntry.TABLE_NAME,
            selection: CertificatePublicKeyEntry.COLUMN_NAME_IDENTIFIER + " = ?",
            selectionArgs: [response.osid],
            modelJson: {
                identifier: response.osid,
                public_key: response.value,
                alg: response.alg,
                owner: response.osOwner && response.osOwner.length ? response.osOwner.join(',') : '',
                expiry_time: Date.now() + this.apiConfig.cached_requests.timeToLive
            }
        }).pipe(mapTo(response));
    };
    GetPublicKeyHandler.prototype.insertPublicKey = function (response) {
        return this.dbService.insert({
            table: CertificatePublicKeyEntry.TABLE_NAME,
            modelJson: {
                identifier: response.osid,
                public_key: response.value,
                alg: response.alg,
                owner: response.osOwner && response.osOwner.length ? response.osOwner.join(',') : '',
                expiry_time: Date.now() + this.apiConfig.cached_requests.timeToLive
            }
        }).pipe(mapTo(response));
    };
    GetPublicKeyHandler.prototype.fetchFromServer = function (request) {
        return this.csCertificateService.getPublicKey(request);
    };
    return GetPublicKeyHandler;
}());
export { GetPublicKeyHandler };
//# sourceMappingURL=data:application/json;base64,