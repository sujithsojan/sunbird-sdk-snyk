import { Response } from '../../../api';
import { ContentErrorCode, FileName } from '../../util/content-constants';
var WriteManifest = /** @class */ (function () {
    function WriteManifest(fileService, deviceInfo) {
        this.fileService = fileService;
        this.deviceInfo = deviceInfo;
    }
    WriteManifest.prototype.execute = function (exportContentContext) {
        var _this = this;
        var response = new Response();
        return this.deviceInfo.getAvailableInternalMemorySize().toPromise()
            .then(function (deviceUsableSpace) {
            var usableSpace = Number(deviceUsableSpace);
            if (usableSpace > 0 && usableSpace < (1024 * 1024)) {
                response.errorMesg = ContentErrorCode.EXPORT_FAILED_MEMORY_NOT_SUFFICIENT;
                throw response;
            }
            return _this.fileService.writeFile(exportContentContext.tmpLocationPath, FileName.MANIFEST.valueOf(), JSON.stringify(exportContentContext.manifest), { replace: true });
        }).then(function () {
            response.body = exportContentContext;
            return Promise.resolve(response);
        }).catch(function () {
            response.errorMesg = ContentErrorCode.EXPORT_FAILED_WRITING_MANIFEST;
            return Promise.reject(response);
        });
    };
    return WriteManifest;
}());
export { WriteManifest };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGUtbWFuaWZlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29udGVudC9oYW5kbGVycy9leHBvcnQvd3JpdGUtbWFuaWZlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsUUFBUSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFJeEU7SUFFSSx1QkFBb0IsV0FBd0IsRUFDeEIsVUFBc0I7UUFEdEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUUxQyxDQUFDO0lBRUQsK0JBQU8sR0FBUCxVQUFRLG9CQUEwQztRQUFsRCxpQkFxQkM7UUFwQkcsSUFBTSxRQUFRLEdBQWEsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxTQUFTLEVBQUU7YUFDOUQsSUFBSSxDQUFDLFVBQUMsaUJBQWlCO1lBQ3BCLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzlDLElBQUksV0FBVyxHQUFHLENBQUMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUU7Z0JBQ2hELFFBQVEsQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsbUNBQW1DLENBQUM7Z0JBQzFFLE1BQU0sUUFBUSxDQUFDO2FBQ2xCO1lBRUQsT0FBTyxLQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFnQixFQUNuRSxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxFQUM3QyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNKLFFBQVEsQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLENBQUM7WUFDckMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNMLFFBQVEsQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsOEJBQThCLENBQUM7WUFDckUsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQTdCRCxJQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmlsZVNlcnZpY2V9IGZyb20gJy4uLy4uLy4uL3V0aWwvZmlsZS9kZWYvZmlsZS1zZXJ2aWNlJztcbmltcG9ydCB7UmVzcG9uc2V9IGZyb20gJy4uLy4uLy4uL2FwaSc7XG5pbXBvcnQge0NvbnRlbnRFcnJvckNvZGUsIEZpbGVOYW1lfSBmcm9tICcuLi8uLi91dGlsL2NvbnRlbnQtY29uc3RhbnRzJztcbmltcG9ydCB7RXhwb3J0Q29udGVudENvbnRleHR9IGZyb20gJy4uLy4uJztcbmltcG9ydCB7RGV2aWNlSW5mb30gZnJvbSAnLi4vLi4vLi4vdXRpbC9kZXZpY2UnO1xuXG5leHBvcnQgY2xhc3MgV3JpdGVNYW5pZmVzdCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpbGVTZXJ2aWNlOiBGaWxlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRldmljZUluZm86IERldmljZUluZm8pIHtcblxuICAgIH1cblxuICAgIGV4ZWN1dGUoZXhwb3J0Q29udGVudENvbnRleHQ6IEV4cG9ydENvbnRlbnRDb250ZXh0KTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZTogUmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlSW5mby5nZXRBdmFpbGFibGVJbnRlcm5hbE1lbW9yeVNpemUoKS50b1Byb21pc2UoKVxuICAgICAgICAgICAgLnRoZW4oKGRldmljZVVzYWJsZVNwYWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNhYmxlU3BhY2UgPSBOdW1iZXIoZGV2aWNlVXNhYmxlU3BhY2UpO1xuICAgICAgICAgICAgICAgIGlmICh1c2FibGVTcGFjZSA+IDAgJiYgdXNhYmxlU3BhY2UgPCAoMTAyNCAqIDEwMjQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yTWVzZyA9IENvbnRlbnRFcnJvckNvZGUuRVhQT1JUX0ZBSUxFRF9NRU1PUllfTk9UX1NVRkZJQ0lFTlQ7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVTZXJ2aWNlLndyaXRlRmlsZShleHBvcnRDb250ZW50Q29udGV4dC50bXBMb2NhdGlvblBhdGghLFxuICAgICAgICAgICAgICAgICAgICBGaWxlTmFtZS5NQU5JRkVTVC52YWx1ZU9mKCksXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGV4cG9ydENvbnRlbnRDb250ZXh0Lm1hbmlmZXN0KSxcbiAgICAgICAgICAgICAgICAgICAge3JlcGxhY2U6IHRydWV9KTtcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSBleHBvcnRDb250ZW50Q29udGV4dDtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5lcnJvck1lc2cgPSBDb250ZW50RXJyb3JDb2RlLkVYUE9SVF9GQUlMRURfV1JJVElOR19NQU5JRkVTVDtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIl19