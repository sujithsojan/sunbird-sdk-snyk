import { MimeType, SortOrder, State, Visibility } from '..';
import { ContentAccessEntry, ContentEntry, ContentMarkerEntry } from '../db/schema';
import { ArrayUtil } from '../../util/array-util';
var GetContentsHandler = /** @class */ (function () {
    function GetContentsHandler() {
    }
    GetContentsHandler.prototype.getAllLocalContentQuery = function (request) {
        if (!request.primaryCategories || !request.primaryCategories.length) {
            request.primaryCategories = [
                'Course',
                'Learning Resource',
                'Explanation Content',
                'Teacher Resource',
                'Content Playlist',
                'Digital Textbook',
                'Practice Question Set',
                'eTextBook',
                'Course Assessment'
            ];
        }
        var uid = request.uid;
        var contentVisibilityFilter = request.resourcesOnly ? '' :
            "c." + ContentEntry.COLUMN_NAME_VISIBILITY + " = '" + Visibility.DEFAULT.valueOf() + "' AND";
        var artifactAvailabilityFilter = "c." + ContentEntry.COLUMN_NAME_CONTENT_STATE + " = '" + State.ARTIFACT_AVAILABLE.valueOf() + "'";
        var filter = contentVisibilityFilter + " " + artifactAvailabilityFilter;
        if (request.resourcesOnly) {
            var mimeTypeFilter = "c." + ContentEntry.COLUMN_NAME_MIME_TYPE + " != '" + MimeType.COLLECTION.valueOf() + "'";
            filter = filter + "  AND (" + mimeTypeFilter + ")";
        }
        else {
            var primaryCategoryString = ArrayUtil.joinPreservingQuotes(request.primaryCategories);
            var primaryCategoryFilter = "c." + ContentEntry.COLUMN_NAME_PRIMARY_CATEGORY + " IN(" + primaryCategoryString.toLowerCase() + ")";
            filter = filter + "  AND (" + primaryCategoryFilter + ")";
        }
        var audienceFilter = this.getAudienceFilter(request.audience);
        var pragmaFilter = this.getPragmaFilter(request.exclPragma, request.pragma);
        var offlineSearchQuery = this.generateFieldMatchQuery(request);
        if (audienceFilter) {
            filter = filter + "  AND (" + audienceFilter + ")";
        }
        if (pragmaFilter) {
            filter = filter + "  AND (" + pragmaFilter + ")";
        }
        if (offlineSearchQuery) {
            filter = filter + "  AND (" + offlineSearchQuery + ")";
        }
        var whereClause = "WHERE (" + filter + ")";
        var query = '';
        var orderBy = request.resourcesOnly ? '' : this.generateSortByQuery(request.sortCriteria, uid);
        if (request.recentlyViewed) {
            if (uid) {
                if (request.localOnly) {
                    filter = "ca." + ContentAccessEntry.COLUMN_NAME_UID + " = '" + uid + "' AND " + artifactAvailabilityFilter + "\n                    AND cm." + ContentEntry.COLUMN_NAME_MIME_TYPE + " NOT IN ('" + MimeType.COLLECTION.valueOf() + "', '')";
                }
                else {
                    filter = "ca." + ContentAccessEntry.COLUMN_NAME_UID + " = '" + uid + "'\n                    AND cm." + ContentEntry.COLUMN_NAME_MIME_TYPE + " NOT IN ('" + MimeType.COLLECTION.valueOf() + "', '')";
                }
                whereClause = "WHERE (" + filter + ")";
                query = this.getRecentlyViewedQuery(whereClause, orderBy, request.limit);
            }
        }
        else {
            if (uid) {
                query = this.getLocalOnlyQuery(whereClause, orderBy, uid);
            }
            else {
                query = "SELECT c.* FROM " + ContentEntry.TABLE_NAME + " c " + whereClause + " " + orderBy;
            }
        }
        return query;
    };
    GetContentsHandler.prototype.getAudienceFilter = function (audience) {
        var filter = '';
        if (audience) {
            audience.forEach(function (element) {
                filter = filter.concat(filter.length > 0 ? ' OR ' : '', "c." + ContentEntry.COLUMN_NAME_AUDIENCE + " LIKE '%%" + element + "%%'");
            });
        }
        return filter;
    };
    GetContentsHandler.prototype.getPragmaFilter = function (exclPragma, pragma) {
        var filter = '';
        if (exclPragma) {
            exclPragma.forEach(function (element) {
                filter = filter.concat(filter.length > 0 ? ' OR ' : '', "c." + ContentEntry.COLUMN_NAME_PRAGMA + " NOT LIKE '%%" + element + "%%'");
            });
        }
        else if (pragma) {
            pragma.forEach(function (element) {
                filter = filter.concat(filter.length > 0 ? ' OR ' : '', "c." + ContentEntry.COLUMN_NAME_PRAGMA + " LIKE '%%" + element + "%%'");
            });
        }
        return filter;
    };
    GetContentsHandler.prototype.getRecentlyViewedQuery = function (whereClause, orderBy, limit) {
        return "SELECT c.*, ca." + ContentAccessEntry.COLUMN_NAME_EPOCH_TIMESTAMP + ",\n                cm." + ContentMarkerEntry.COLUMN_NAME_DATA + " FROM " + ContentAccessEntry.TABLE_NAME + " ca LEFT JOIN\n                " + ContentMarkerEntry.TABLE_NAME + " cm ON\n                (cm." + ContentMarkerEntry.COLUMN_NAME_UID + " = ca." + ContentAccessEntry.COLUMN_NAME_UID + "\n                AND cm." + ContentMarkerEntry.COLUMN_NAME_CONTENT_IDENTIFIER + " = ca." + ContentAccessEntry.COLUMN_NAME_CONTENT_IDENTIFIER + ")\n                LEFT JOIN " + ContentEntry.TABLE_NAME + "  c ON\n                c." + ContentEntry.COLUMN_NAME_IDENTIFIER + " = ca." + ContentAccessEntry.COLUMN_NAME_CONTENT_IDENTIFIER + "\n                " + whereClause + " " + orderBy + " LIMIT " + limit;
    };
    GetContentsHandler.prototype.getLocalOnlyQuery = function (whereClause, orderBy, uid) {
        var uidFilter = '';
        if (Array.isArray(uid)) {
            uidFilter = "ca." + ContentAccessEntry.COLUMN_NAME_UID + " IN (" + ArrayUtil.joinPreservingQuotes(uid) + ")";
        }
        else {
            uidFilter = "ca." + ContentAccessEntry.COLUMN_NAME_UID + " ='" + uid + "'";
        }
        return "SELECT c.*, ca." + ContentAccessEntry.COLUMN_NAME_EPOCH_TIMESTAMP + "\n                FROM " + ContentEntry.TABLE_NAME + " c LEFT JOIN " + ContentAccessEntry.TABLE_NAME + " ca\n                ON c." + ContentEntry.COLUMN_NAME_IDENTIFIER + " = ca." + ContentAccessEntry.COLUMN_NAME_CONTENT_IDENTIFIER + "\n                AND " + uidFilter + "\n                " + whereClause + " " + orderBy;
    };
    GetContentsHandler.prototype.generateSortByQuery = function (sortCriteriaList, uid) {
        var _this = this;
        var orderBy = '';
        var i = 0;
        if (!sortCriteriaList) {
            sortCriteriaList = [];
            sortCriteriaList.push({ sortAttribute: 'lastUsedOn', sortOrder: SortOrder.DESC });
            sortCriteriaList.push({ sortAttribute: 'localLastUpdatedOn', sortOrder: SortOrder.DESC });
        }
        sortCriteriaList.forEach(function (sortCriteria) {
            if (sortCriteria) {
                if ('lastUsedOn' === sortCriteria.sortAttribute.valueOf() && uid) {
                    orderBy = _this.generateOrderByQuery(i, orderBy, " ca." + ContentAccessEntry.COLUMN_NAME_EPOCH_TIMESTAMP, sortCriteria.sortOrder.valueOf());
                    i++;
                }
                else if ('localLastUpdatedOn' === sortCriteria.sortAttribute.valueOf()) {
                    orderBy = _this.generateOrderByQuery(i, orderBy, " c." + ContentEntry.COLUMN_NAME_LOCAL_LAST_UPDATED_ON, sortCriteria.sortOrder.valueOf());
                    i++;
                }
                else if ('sizeOnDevice' === sortCriteria.sortAttribute.valueOf()) {
                    orderBy = _this.generateOrderByQuery(i, orderBy, " c." + ContentEntry.COLUMN_NAME_SIZE_ON_DEVICE, sortCriteria.sortOrder.valueOf());
                    i++;
                }
            }
        });
        return orderBy;
    };
    GetContentsHandler.prototype.generateOrderByQuery = function (index, orderBy, columnName, sortOrder) {
        var orderByQuery = '';
        if (index > 0) {
            orderByQuery = orderBy.concat(',');
        }
        else {
            orderByQuery = orderBy.concat('ORDER BY');
        }
        orderByQuery = orderByQuery.concat(columnName + " " + sortOrder);
        return orderByQuery;
    };
    GetContentsHandler.prototype.generateFieldMatchQuery = function (request) {
        var _this = this;
        var fields = [
            { field: 'board', column: ContentEntry.COLUMN_NAME_BOARD },
            { field: 'medium', column: ContentEntry.COLUMN_NAME_MEDIUM },
            { field: 'grade', column: ContentEntry.COLUMN_NAME_GRADE },
            { field: 'dialcodes', column: ContentEntry.COLUMN_NAME_DIALCODES },
            { field: 'childNodes', column: ContentEntry.COLUMN_NAME_CHILD_NODES }
        ];
        return fields.reduce(function (acc, _a) {
            var field = _a.field, column = _a.column;
            if (request[field] && request[field].length) {
                acc.push(_this.generateLikeQuery(request[field], column));
            }
            return acc;
        }, []).join(" AND ");
    };
    GetContentsHandler.prototype.generateLikeQuery = function (data, coloumnName) {
        var likeQuery = '';
        var initialQuery = coloumnName + " LIKE ";
        for (var i = 0; i < data.length; i++) {
            if (i < data.length - 1) {
                likeQuery = likeQuery.concat(initialQuery, "'%%~" + data[i].toLowerCase().trim() + "~%%' OR ");
            }
            else {
                likeQuery = likeQuery.concat(initialQuery, "'%%~" + data[i].toLowerCase().trim() + "~%%' ");
            }
        }
        return "(" + likeQuery + ")";
    };
    return GetContentsHandler;
}());
export { GetContentsHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWNvbnRlbnRzLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udGVudC9oYW5kbGVycy9nZXQtY29udGVudHMtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXNDLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBQyxNQUFNLElBQUksQ0FBQztBQUMvRixPQUFPLEVBQUMsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ2xGLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVoRDtJQUFBO0lBa01BLENBQUM7SUEvTEcsb0RBQXVCLEdBQXZCLFVBQXdCLE9BQXVCO1FBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFO1lBQ2pFLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRztnQkFDeEIsUUFBUTtnQkFDUixtQkFBbUI7Z0JBQ25CLHFCQUFxQjtnQkFDckIsa0JBQWtCO2dCQUNsQixrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIsdUJBQXVCO2dCQUN2QixXQUFXO2dCQUNYLG1CQUFtQjthQUN0QixDQUFDO1NBQ0w7UUFDRCxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBRXhCLElBQU0sdUJBQXVCLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEQsT0FBSyxZQUFZLENBQUMsc0JBQXNCLFlBQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBTyxDQUFDO1FBQ3ZGLElBQU0sMEJBQTBCLEdBQUcsT0FBSyxZQUFZLENBQUMseUJBQXlCLFlBQU8sS0FBSyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxNQUFHLENBQUM7UUFDM0gsSUFBSSxNQUFNLEdBQU0sdUJBQXVCLFNBQUksMEJBQTRCLENBQUM7UUFFeEUsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLElBQU0sY0FBYyxHQUFHLE9BQUssWUFBWSxDQUFDLHFCQUFxQixhQUFRLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQUcsQ0FBQztZQUN2RyxNQUFNLEdBQU0sTUFBTSxlQUFVLGNBQWMsTUFBRyxDQUFDO1NBQ2pEO2FBQU07WUFDSCxJQUFNLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN4RixJQUFNLHFCQUFxQixHQUFHLE9BQUssWUFBWSxDQUFDLDRCQUE0QixZQUFPLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxNQUFHLENBQUM7WUFDMUgsTUFBTSxHQUFNLE1BQU0sZUFBVSxxQkFBcUIsTUFBRyxDQUFDO1NBQ3hEO1FBRUQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxRQUFTLENBQUMsQ0FBQztRQUNqRSxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU8sQ0FBQyxDQUFDO1FBRWhGLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pFLElBQUksY0FBYyxFQUFFO1lBQ2hCLE1BQU0sR0FBTSxNQUFNLGVBQVUsY0FBYyxNQUFHLENBQUM7U0FDakQ7UUFDRCxJQUFJLFlBQVksRUFBRTtZQUNkLE1BQU0sR0FBTSxNQUFNLGVBQVUsWUFBWSxNQUFHLENBQUM7U0FDL0M7UUFFRCxJQUFJLGtCQUFrQixFQUFFO1lBQ3BCLE1BQU0sR0FBTSxNQUFNLGVBQVUsa0JBQWtCLE1BQUcsQ0FBQztTQUNyRDtRQUNELElBQUksV0FBVyxHQUFHLFlBQVUsTUFBTSxNQUFHLENBQUM7UUFDdEMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFlBQWEsRUFBRSxHQUFJLENBQUMsQ0FBQztRQUNuRyxJQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUU7WUFDeEIsSUFBSSxHQUFHLEVBQUU7Z0JBQ0wsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO29CQUNuQixNQUFNLEdBQUcsUUFBTSxrQkFBa0IsQ0FBQyxlQUFlLFlBQU8sR0FBRyxjQUFTLDBCQUEwQixxQ0FDckYsWUFBWSxDQUFDLHFCQUFxQixrQkFBYSxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxXQUFRLENBQUM7aUJBQ2pHO3FCQUFNO29CQUNILE1BQU0sR0FBRyxRQUFNLGtCQUFrQixDQUFDLGVBQWUsWUFBTyxHQUFHLHNDQUNsRCxZQUFZLENBQUMscUJBQXFCLGtCQUFhLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFdBQVEsQ0FBQztpQkFDakc7Z0JBQ0QsV0FBVyxHQUFHLFlBQVUsTUFBTSxNQUFHLENBQUM7Z0JBQ2xDLEtBQUssR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBTSxDQUFDLENBQUM7YUFDN0U7U0FDSjthQUFNO1lBQ0gsSUFBSSxHQUFHLEVBQUU7Z0JBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzdEO2lCQUFNO2dCQUNILEtBQUssR0FBRyxxQkFBbUIsWUFBWSxDQUFDLFVBQVUsV0FBTSxXQUFXLFNBQUksT0FBUyxDQUFDO2FBQ3BGO1NBQ0o7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRU8sOENBQWlCLEdBQXpCLFVBQTBCLFFBQWtCO1FBQ3hDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLFFBQVEsRUFBRTtZQUNWLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUNyQixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBSyxZQUFZLENBQUMsb0JBQW9CLGlCQUFZLE9BQU8sUUFBSyxDQUFDLENBQUM7WUFDNUgsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTyw0Q0FBZSxHQUF2QixVQUF3QixVQUFvQixFQUFFLE1BQWdCO1FBQzFELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLFVBQVUsRUFBRTtZQUNaLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUN2QixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBSyxZQUFZLENBQUMsa0JBQWtCLHFCQUFnQixPQUFPLFFBQUssQ0FBQyxDQUFDO1lBQzlILENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTSxJQUFJLE1BQU0sRUFBRTtZQUNmLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUNuQixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBSyxZQUFZLENBQUMsa0JBQWtCLGlCQUFZLE9BQU8sUUFBSyxDQUFDLENBQUM7WUFDMUgsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxtREFBc0IsR0FBOUIsVUFBK0IsV0FBbUIsRUFBRSxPQUFlLEVBQUUsS0FBYTtRQUM5RSxPQUFPLG9CQUFrQixrQkFBa0IsQ0FBQywyQkFBMkIsOEJBQzFELGtCQUFrQixDQUFDLGdCQUFnQixjQUFTLGtCQUFrQixDQUFDLFVBQVUsdUNBQzVFLGtCQUFrQixDQUFDLFVBQVUsb0NBQ3pCLGtCQUFrQixDQUFDLGVBQWUsY0FBUyxrQkFBa0IsQ0FBQyxlQUFlLGlDQUMxRSxrQkFBa0IsQ0FBQyw4QkFBOEIsY0FBUyxrQkFBa0IsQ0FBQyw4QkFBOEIscUNBQ3hHLFlBQVksQ0FBQyxVQUFVLGtDQUMvQixZQUFZLENBQUMsc0JBQXNCLGNBQVMsa0JBQWtCLENBQUMsOEJBQThCLDBCQUMvRixXQUFXLFNBQUksT0FBTyxlQUFVLEtBQU8sQ0FBQztJQUN0RCxDQUFDO0lBRU8sOENBQWlCLEdBQXpCLFVBQTBCLFdBQW1CLEVBQUUsT0FBZSxFQUFFLEdBQXNCO1FBQ2xGLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsU0FBUyxHQUFHLFFBQU0sa0JBQWtCLENBQUMsZUFBZSxhQUFRLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBRyxDQUFDO1NBQ3RHO2FBQU07WUFDSCxTQUFTLEdBQUcsUUFBTSxrQkFBa0IsQ0FBQyxlQUFlLFdBQU0sR0FBRyxNQUFHLENBQUM7U0FDcEU7UUFDRCxPQUFPLG9CQUFrQixrQkFBa0IsQ0FBQywyQkFBMkIsK0JBQ3hELFlBQVksQ0FBQyxVQUFVLHFCQUFnQixrQkFBa0IsQ0FBQyxVQUFVLGtDQUNwRSxZQUFZLENBQUMsc0JBQXNCLGNBQVMsa0JBQWtCLENBQUMsOEJBQThCLDhCQUM5RixTQUFTLDBCQUNiLFdBQVcsU0FBSSxPQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVPLGdEQUFtQixHQUEzQixVQUE0QixnQkFBdUMsRUFBRSxHQUFzQjtRQUEzRixpQkEyQkM7UUExQkcsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNuQixnQkFBZ0IsR0FBRyxFQUFFLENBQUM7WUFDdEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUM7WUFDaEYsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUMsYUFBYSxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUMzRjtRQUNELGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVk7WUFDbEMsSUFBSSxZQUFZLEVBQUU7Z0JBQ2QsSUFBSSxZQUFZLEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxHQUFHLEVBQUU7b0JBQzlELE9BQU8sR0FBRyxLQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFPLGtCQUFrQixDQUFDLDJCQUE2QixFQUNuRyxZQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQ3RDLENBQUMsRUFBRSxDQUFDO2lCQUNQO3FCQUFNLElBQUksb0JBQW9CLEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDdEUsT0FBTyxHQUFHLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQU0sWUFBWSxDQUFDLGlDQUFtQyxFQUNsRyxZQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQ3RDLENBQUMsRUFBRSxDQUFDO2lCQUNQO3FCQUFNLElBQUksY0FBYyxLQUFLLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ2hFLE9BQU8sR0FBRyxLQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFNLFlBQVksQ0FBQywwQkFBNEIsRUFDM0YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUN0QyxDQUFDLEVBQUUsQ0FBQztpQkFDUDthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUVuQixDQUFDO0lBRU8saURBQW9CLEdBQTVCLFVBQTZCLEtBQWEsRUFBRSxPQUFlLEVBQUUsVUFBVSxFQUFFLFNBQWlCO1FBQ3RGLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDN0M7UUFDRCxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBSSxVQUFVLFNBQUksU0FBVyxDQUFDLENBQUM7UUFDakUsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztJQUVPLG9EQUF1QixHQUEvQixVQUFnQyxPQUF1QjtRQUF2RCxpQkFnQkM7UUFmRyxJQUFNLE1BQU0sR0FBRztZQUNYLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLGlCQUFpQixFQUFFO1lBQzFELEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLGtCQUFrQixFQUFFO1lBQzVELEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLGlCQUFpQixFQUFFO1lBQzFELEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLHFCQUFxQixFQUFFO1lBQ2xFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLHVCQUF1QixFQUFFO1NBQ3hFLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQVcsVUFBQyxHQUFHLEVBQUUsRUFBZTtnQkFBZCxLQUFLLFdBQUEsRUFBRSxNQUFNLFlBQUE7WUFDL0MsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDNUQ7WUFFRCxPQUFPLEdBQUcsQ0FBQztRQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVPLDhDQUFpQixHQUF6QixVQUEwQixJQUFjLEVBQUUsV0FBbUI7UUFDekQsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQU0sWUFBWSxHQUFNLFdBQVcsV0FBUSxDQUFDO1FBQzVDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLGFBQVUsQ0FBQyxDQUFDO2FBQzdGO2lCQUFNO2dCQUNILFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsVUFBTyxDQUFDLENBQUM7YUFDMUY7U0FDSjtRQUNELE9BQU8sTUFBSSxTQUFTLE1BQUcsQ0FBQztJQUM1QixDQUFDO0lBR0wseUJBQUM7QUFBRCxDQUFDLEFBbE1ELElBa01DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb250ZW50UmVxdWVzdCwgQ29udGVudFNvcnRDcml0ZXJpYSwgTWltZVR5cGUsIFNvcnRPcmRlciwgU3RhdGUsIFZpc2liaWxpdHl9IGZyb20gJy4uJztcbmltcG9ydCB7Q29udGVudEFjY2Vzc0VudHJ5LCBDb250ZW50RW50cnksIENvbnRlbnRNYXJrZXJFbnRyeX0gZnJvbSAnLi4vZGIvc2NoZW1hJztcbmltcG9ydCB7QXJyYXlVdGlsfSBmcm9tICcuLi8uLi91dGlsL2FycmF5LXV0aWwnO1xuXG5leHBvcnQgY2xhc3MgR2V0Q29udGVudHNIYW5kbGVyIHtcblxuXG4gICAgZ2V0QWxsTG9jYWxDb250ZW50UXVlcnkocmVxdWVzdDogQ29udGVudFJlcXVlc3QpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXJlcXVlc3QucHJpbWFyeUNhdGVnb3JpZXMgfHwgIXJlcXVlc3QucHJpbWFyeUNhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXF1ZXN0LnByaW1hcnlDYXRlZ29yaWVzID0gW1xuICAgICAgICAgICAgICAgICdDb3Vyc2UnLFxuICAgICAgICAgICAgICAgICdMZWFybmluZyBSZXNvdXJjZScsXG4gICAgICAgICAgICAgICAgJ0V4cGxhbmF0aW9uIENvbnRlbnQnLFxuICAgICAgICAgICAgICAgICdUZWFjaGVyIFJlc291cmNlJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudCBQbGF5bGlzdCcsXG4gICAgICAgICAgICAgICAgJ0RpZ2l0YWwgVGV4dGJvb2snLFxuICAgICAgICAgICAgICAgICdQcmFjdGljZSBRdWVzdGlvbiBTZXQnLFxuICAgICAgICAgICAgICAgICdlVGV4dEJvb2snLFxuICAgICAgICAgICAgICAgICdDb3Vyc2UgQXNzZXNzbWVudCdcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdWlkID0gcmVxdWVzdC51aWQ7XG5cbiAgICAgICAgY29uc3QgY29udGVudFZpc2liaWxpdHlGaWx0ZXIgPSByZXF1ZXN0LnJlc291cmNlc09ubHkgPyAnJyA6XG4gICAgICAgICAgICBgYy4ke0NvbnRlbnRFbnRyeS5DT0xVTU5fTkFNRV9WSVNJQklMSVRZfSA9ICcke1Zpc2liaWxpdHkuREVGQVVMVC52YWx1ZU9mKCl9JyBBTkRgO1xuICAgICAgICBjb25zdCBhcnRpZmFjdEF2YWlsYWJpbGl0eUZpbHRlciA9IGBjLiR7Q29udGVudEVudHJ5LkNPTFVNTl9OQU1FX0NPTlRFTlRfU1RBVEV9ID0gJyR7U3RhdGUuQVJUSUZBQ1RfQVZBSUxBQkxFLnZhbHVlT2YoKX0nYDtcbiAgICAgICAgbGV0IGZpbHRlciA9IGAke2NvbnRlbnRWaXNpYmlsaXR5RmlsdGVyfSAke2FydGlmYWN0QXZhaWxhYmlsaXR5RmlsdGVyfWA7XG5cbiAgICAgICAgaWYgKHJlcXVlc3QucmVzb3VyY2VzT25seSkge1xuICAgICAgICAgICAgY29uc3QgbWltZVR5cGVGaWx0ZXIgPSBgYy4ke0NvbnRlbnRFbnRyeS5DT0xVTU5fTkFNRV9NSU1FX1RZUEV9ICE9ICcke01pbWVUeXBlLkNPTExFQ1RJT04udmFsdWVPZigpfSdgO1xuICAgICAgICAgICAgZmlsdGVyID0gYCR7ZmlsdGVyfSAgQU5EICgke21pbWVUeXBlRmlsdGVyfSlgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcHJpbWFyeUNhdGVnb3J5U3RyaW5nID0gQXJyYXlVdGlsLmpvaW5QcmVzZXJ2aW5nUXVvdGVzKHJlcXVlc3QucHJpbWFyeUNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgY29uc3QgcHJpbWFyeUNhdGVnb3J5RmlsdGVyID0gYGMuJHtDb250ZW50RW50cnkuQ09MVU1OX05BTUVfUFJJTUFSWV9DQVRFR09SWX0gSU4oJHtwcmltYXJ5Q2F0ZWdvcnlTdHJpbmcudG9Mb3dlckNhc2UoKX0pYDtcbiAgICAgICAgICAgIGZpbHRlciA9IGAke2ZpbHRlcn0gIEFORCAoJHtwcmltYXJ5Q2F0ZWdvcnlGaWx0ZXJ9KWA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdWRpZW5jZUZpbHRlciA9IHRoaXMuZ2V0QXVkaWVuY2VGaWx0ZXIocmVxdWVzdC5hdWRpZW5jZSEpO1xuICAgICAgICBjb25zdCBwcmFnbWFGaWx0ZXIgPSB0aGlzLmdldFByYWdtYUZpbHRlcihyZXF1ZXN0LmV4Y2xQcmFnbWEhLCByZXF1ZXN0LnByYWdtYSEpO1xuXG4gICAgICAgIGNvbnN0IG9mZmxpbmVTZWFyY2hRdWVyeSA9IHRoaXMuZ2VuZXJhdGVGaWVsZE1hdGNoUXVlcnkocmVxdWVzdCk7XG4gICAgICAgIGlmIChhdWRpZW5jZUZpbHRlcikge1xuICAgICAgICAgICAgZmlsdGVyID0gYCR7ZmlsdGVyfSAgQU5EICgke2F1ZGllbmNlRmlsdGVyfSlgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmFnbWFGaWx0ZXIpIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGAke2ZpbHRlcn0gIEFORCAoJHtwcmFnbWFGaWx0ZXJ9KWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2ZmbGluZVNlYXJjaFF1ZXJ5KSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBgJHtmaWx0ZXJ9ICBBTkQgKCR7b2ZmbGluZVNlYXJjaFF1ZXJ5fSlgO1xuICAgICAgICB9XG4gICAgICAgIGxldCB3aGVyZUNsYXVzZSA9IGBXSEVSRSAoJHtmaWx0ZXJ9KWA7XG4gICAgICAgIGxldCBxdWVyeSA9ICcnO1xuICAgICAgICBjb25zdCBvcmRlckJ5ID0gcmVxdWVzdC5yZXNvdXJjZXNPbmx5ID8gJycgOiB0aGlzLmdlbmVyYXRlU29ydEJ5UXVlcnkocmVxdWVzdC5zb3J0Q3JpdGVyaWEhLCB1aWQhKTtcbiAgICAgICAgaWYgKHJlcXVlc3QucmVjZW50bHlWaWV3ZWQpIHtcbiAgICAgICAgICAgIGlmICh1aWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5sb2NhbE9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gYGNhLiR7Q29udGVudEFjY2Vzc0VudHJ5LkNPTFVNTl9OQU1FX1VJRH0gPSAnJHt1aWR9JyBBTkQgJHthcnRpZmFjdEF2YWlsYWJpbGl0eUZpbHRlcn1cbiAgICAgICAgICAgICAgICAgICAgQU5EIGNtLiR7Q29udGVudEVudHJ5LkNPTFVNTl9OQU1FX01JTUVfVFlQRX0gTk9UIElOICgnJHtNaW1lVHlwZS5DT0xMRUNUSU9OLnZhbHVlT2YoKX0nLCAnJylgO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlciA9IGBjYS4ke0NvbnRlbnRBY2Nlc3NFbnRyeS5DT0xVTU5fTkFNRV9VSUR9ID0gJyR7dWlkfSdcbiAgICAgICAgICAgICAgICAgICAgQU5EIGNtLiR7Q29udGVudEVudHJ5LkNPTFVNTl9OQU1FX01JTUVfVFlQRX0gTk9UIElOICgnJHtNaW1lVHlwZS5DT0xMRUNUSU9OLnZhbHVlT2YoKX0nLCAnJylgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGVyZUNsYXVzZSA9IGBXSEVSRSAoJHtmaWx0ZXJ9KWA7XG4gICAgICAgICAgICAgICAgcXVlcnkgPSB0aGlzLmdldFJlY2VudGx5Vmlld2VkUXVlcnkod2hlcmVDbGF1c2UsIG9yZGVyQnksIHJlcXVlc3QubGltaXQhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1aWQpIHtcbiAgICAgICAgICAgICAgICBxdWVyeSA9IHRoaXMuZ2V0TG9jYWxPbmx5UXVlcnkod2hlcmVDbGF1c2UsIG9yZGVyQnksIHVpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gYFNFTEVDVCBjLiogRlJPTSAke0NvbnRlbnRFbnRyeS5UQUJMRV9OQU1FfSBjICR7d2hlcmVDbGF1c2V9ICR7b3JkZXJCeX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QXVkaWVuY2VGaWx0ZXIoYXVkaWVuY2U6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGZpbHRlciA9ICcnO1xuICAgICAgICBpZiAoYXVkaWVuY2UpIHtcbiAgICAgICAgICAgIGF1ZGllbmNlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXIuY29uY2F0KGZpbHRlci5sZW5ndGggPiAwID8gJyBPUiAnIDogJycsIGBjLiR7Q29udGVudEVudHJ5LkNPTFVNTl9OQU1FX0FVRElFTkNFfSBMSUtFICclJSR7ZWxlbWVudH0lJSdgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQcmFnbWFGaWx0ZXIoZXhjbFByYWdtYTogc3RyaW5nW10sIHByYWdtYTogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgICAgICBsZXQgZmlsdGVyID0gJyc7XG4gICAgICAgIGlmIChleGNsUHJhZ21hKSB7XG4gICAgICAgICAgICBleGNsUHJhZ21hLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXIuY29uY2F0KGZpbHRlci5sZW5ndGggPiAwID8gJyBPUiAnIDogJycsIGBjLiR7Q29udGVudEVudHJ5LkNPTFVNTl9OQU1FX1BSQUdNQX0gTk9UIExJS0UgJyUlJHtlbGVtZW50fSUlJ2ApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJhZ21hKSB7XG4gICAgICAgICAgICBwcmFnbWEuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlci5jb25jYXQoZmlsdGVyLmxlbmd0aCA+IDAgPyAnIE9SICcgOiAnJywgYGMuJHtDb250ZW50RW50cnkuQ09MVU1OX05BTUVfUFJBR01BfSBMSUtFICclJSR7ZWxlbWVudH0lJSdgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSZWNlbnRseVZpZXdlZFF1ZXJ5KHdoZXJlQ2xhdXNlOiBzdHJpbmcsIG9yZGVyQnk6IHN0cmluZywgbGltaXQ6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgU0VMRUNUIGMuKiwgY2EuJHtDb250ZW50QWNjZXNzRW50cnkuQ09MVU1OX05BTUVfRVBPQ0hfVElNRVNUQU1QfSxcbiAgICAgICAgICAgICAgICBjbS4ke0NvbnRlbnRNYXJrZXJFbnRyeS5DT0xVTU5fTkFNRV9EQVRBfSBGUk9NICR7Q29udGVudEFjY2Vzc0VudHJ5LlRBQkxFX05BTUV9IGNhIExFRlQgSk9JTlxuICAgICAgICAgICAgICAgICR7Q29udGVudE1hcmtlckVudHJ5LlRBQkxFX05BTUV9IGNtIE9OXG4gICAgICAgICAgICAgICAgKGNtLiR7Q29udGVudE1hcmtlckVudHJ5LkNPTFVNTl9OQU1FX1VJRH0gPSBjYS4ke0NvbnRlbnRBY2Nlc3NFbnRyeS5DT0xVTU5fTkFNRV9VSUR9XG4gICAgICAgICAgICAgICAgQU5EIGNtLiR7Q29udGVudE1hcmtlckVudHJ5LkNPTFVNTl9OQU1FX0NPTlRFTlRfSURFTlRJRklFUn0gPSBjYS4ke0NvbnRlbnRBY2Nlc3NFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lERU5USUZJRVJ9KVxuICAgICAgICAgICAgICAgIExFRlQgSk9JTiAke0NvbnRlbnRFbnRyeS5UQUJMRV9OQU1FfSAgYyBPTlxuICAgICAgICAgICAgICAgIGMuJHtDb250ZW50RW50cnkuQ09MVU1OX05BTUVfSURFTlRJRklFUn0gPSBjYS4ke0NvbnRlbnRBY2Nlc3NFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lERU5USUZJRVJ9XG4gICAgICAgICAgICAgICAgJHt3aGVyZUNsYXVzZX0gJHtvcmRlckJ5fSBMSU1JVCAke2xpbWl0fWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRMb2NhbE9ubHlRdWVyeSh3aGVyZUNsYXVzZTogc3RyaW5nLCBvcmRlckJ5OiBzdHJpbmcsIHVpZDogc3RyaW5nIHwgc3RyaW5nW10pOiBzdHJpbmcge1xuICAgICAgICBsZXQgdWlkRmlsdGVyID0gJyc7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHVpZCkpIHtcbiAgICAgICAgICAgIHVpZEZpbHRlciA9IGBjYS4ke0NvbnRlbnRBY2Nlc3NFbnRyeS5DT0xVTU5fTkFNRV9VSUR9IElOICgke0FycmF5VXRpbC5qb2luUHJlc2VydmluZ1F1b3Rlcyh1aWQpfSlgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdWlkRmlsdGVyID0gYGNhLiR7Q29udGVudEFjY2Vzc0VudHJ5LkNPTFVNTl9OQU1FX1VJRH0gPScke3VpZH0nYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFNFTEVDVCBjLiosIGNhLiR7Q29udGVudEFjY2Vzc0VudHJ5LkNPTFVNTl9OQU1FX0VQT0NIX1RJTUVTVEFNUH1cbiAgICAgICAgICAgICAgICBGUk9NICR7Q29udGVudEVudHJ5LlRBQkxFX05BTUV9IGMgTEVGVCBKT0lOICR7Q29udGVudEFjY2Vzc0VudHJ5LlRBQkxFX05BTUV9IGNhXG4gICAgICAgICAgICAgICAgT04gYy4ke0NvbnRlbnRFbnRyeS5DT0xVTU5fTkFNRV9JREVOVElGSUVSfSA9IGNhLiR7Q29udGVudEFjY2Vzc0VudHJ5LkNPTFVNTl9OQU1FX0NPTlRFTlRfSURFTlRJRklFUn1cbiAgICAgICAgICAgICAgICBBTkQgJHt1aWRGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgJHt3aGVyZUNsYXVzZX0gJHtvcmRlckJ5fWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVNvcnRCeVF1ZXJ5KHNvcnRDcml0ZXJpYUxpc3Q6IENvbnRlbnRTb3J0Q3JpdGVyaWFbXSwgdWlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBvcmRlckJ5ID0gJyc7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKCFzb3J0Q3JpdGVyaWFMaXN0KSB7XG4gICAgICAgICAgICBzb3J0Q3JpdGVyaWFMaXN0ID0gW107XG4gICAgICAgICAgICBzb3J0Q3JpdGVyaWFMaXN0LnB1c2goe3NvcnRBdHRyaWJ1dGU6ICdsYXN0VXNlZE9uJywgc29ydE9yZGVyOiBTb3J0T3JkZXIuREVTQ30pO1xuICAgICAgICAgICAgc29ydENyaXRlcmlhTGlzdC5wdXNoKHtzb3J0QXR0cmlidXRlOiAnbG9jYWxMYXN0VXBkYXRlZE9uJywgc29ydE9yZGVyOiBTb3J0T3JkZXIuREVTQ30pO1xuICAgICAgICB9XG4gICAgICAgIHNvcnRDcml0ZXJpYUxpc3QuZm9yRWFjaCgoc29ydENyaXRlcmlhKSA9PiB7XG4gICAgICAgICAgICBpZiAoc29ydENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdsYXN0VXNlZE9uJyA9PT0gc29ydENyaXRlcmlhLnNvcnRBdHRyaWJ1dGUudmFsdWVPZigpICYmIHVpZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmRlckJ5ID0gdGhpcy5nZW5lcmF0ZU9yZGVyQnlRdWVyeShpLCBvcmRlckJ5LCBgIGNhLiR7Q29udGVudEFjY2Vzc0VudHJ5LkNPTFVNTl9OQU1FX0VQT0NIX1RJTUVTVEFNUH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydENyaXRlcmlhLnNvcnRPcmRlci52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgnbG9jYWxMYXN0VXBkYXRlZE9uJyA9PT0gc29ydENyaXRlcmlhLnNvcnRBdHRyaWJ1dGUudmFsdWVPZigpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyQnkgPSB0aGlzLmdlbmVyYXRlT3JkZXJCeVF1ZXJ5KGksIG9yZGVyQnksIGAgYy4ke0NvbnRlbnRFbnRyeS5DT0xVTU5fTkFNRV9MT0NBTF9MQVNUX1VQREFURURfT059YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRDcml0ZXJpYS5zb3J0T3JkZXIudmFsdWVPZigpKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ3NpemVPbkRldmljZScgPT09IHNvcnRDcml0ZXJpYS5zb3J0QXR0cmlidXRlLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgICAgICAgICBvcmRlckJ5ID0gdGhpcy5nZW5lcmF0ZU9yZGVyQnlRdWVyeShpLCBvcmRlckJ5LCBgIGMuJHtDb250ZW50RW50cnkuQ09MVU1OX05BTUVfU0laRV9PTl9ERVZJQ0V9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRDcml0ZXJpYS5zb3J0T3JkZXIudmFsdWVPZigpKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvcmRlckJ5O1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZU9yZGVyQnlRdWVyeShpbmRleDogbnVtYmVyLCBvcmRlckJ5OiBzdHJpbmcsIGNvbHVtbk5hbWUsIHNvcnRPcmRlcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG9yZGVyQnlRdWVyeSA9ICcnO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBvcmRlckJ5UXVlcnkgPSBvcmRlckJ5LmNvbmNhdCgnLCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3JkZXJCeVF1ZXJ5ID0gb3JkZXJCeS5jb25jYXQoJ09SREVSIEJZJyk7XG4gICAgICAgIH1cbiAgICAgICAgb3JkZXJCeVF1ZXJ5ID0gb3JkZXJCeVF1ZXJ5LmNvbmNhdChgJHtjb2x1bW5OYW1lfSAke3NvcnRPcmRlcn1gKTtcbiAgICAgICAgcmV0dXJuIG9yZGVyQnlRdWVyeTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlRmllbGRNYXRjaFF1ZXJ5KHJlcXVlc3Q6IENvbnRlbnRSZXF1ZXN0KTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gW1xuICAgICAgICAgICAgeyBmaWVsZDogJ2JvYXJkJywgY29sdW1uOiBDb250ZW50RW50cnkuQ09MVU1OX05BTUVfQk9BUkQgfSxcbiAgICAgICAgICAgIHsgZmllbGQ6ICdtZWRpdW0nLCBjb2x1bW46IENvbnRlbnRFbnRyeS5DT0xVTU5fTkFNRV9NRURJVU0gfSxcbiAgICAgICAgICAgIHsgZmllbGQ6ICdncmFkZScsIGNvbHVtbjogQ29udGVudEVudHJ5LkNPTFVNTl9OQU1FX0dSQURFIH0sXG4gICAgICAgICAgICB7IGZpZWxkOiAnZGlhbGNvZGVzJywgY29sdW1uOiBDb250ZW50RW50cnkuQ09MVU1OX05BTUVfRElBTENPREVTIH0sXG4gICAgICAgICAgICB7IGZpZWxkOiAnY2hpbGROb2RlcycsIGNvbHVtbjogQ29udGVudEVudHJ5LkNPTFVNTl9OQU1FX0NISUxEX05PREVTIH1cbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gZmllbGRzLnJlZHVjZTxzdHJpbmdbXT4oKGFjYywge2ZpZWxkLCBjb2x1bW59KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdFtmaWVsZF0gJiYgcmVxdWVzdFtmaWVsZF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYWNjLnB1c2godGhpcy5nZW5lcmF0ZUxpa2VRdWVyeShyZXF1ZXN0W2ZpZWxkXSwgY29sdW1uKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIFtdKS5qb2luKGAgQU5EIGApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVMaWtlUXVlcnkoZGF0YTogc3RyaW5nW10sIGNvbG91bW5OYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgbGlrZVF1ZXJ5ID0gJyc7XG4gICAgICAgIGNvbnN0IGluaXRpYWxRdWVyeSA9IGAke2NvbG91bW5OYW1lfSBMSUtFIGA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBkYXRhLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBsaWtlUXVlcnkgPSBsaWtlUXVlcnkuY29uY2F0KGluaXRpYWxRdWVyeSwgYCclJX4ke2RhdGFbaV0udG9Mb3dlckNhc2UoKS50cmltKCl9fiUlJyBPUiBgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlrZVF1ZXJ5ID0gbGlrZVF1ZXJ5LmNvbmNhdChpbml0aWFsUXVlcnksIGAnJSV+JHtkYXRhW2ldLnRvTG93ZXJDYXNlKCkudHJpbSgpfX4lJScgYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAoJHtsaWtlUXVlcnl9KWA7XG4gICAgfVxuXG5cbn1cbiJdfQ==