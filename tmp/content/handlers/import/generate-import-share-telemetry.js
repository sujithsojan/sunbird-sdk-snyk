import { Response } from '../../../api';
import { ShareDirection, ShareType } from '../../../telemetry';
import { ContentUtil } from '../../util/content-util';
var GenerateImportShareTelemetry = /** @class */ (function () {
    function GenerateImportShareTelemetry(telemetryService) {
        this.telemetryService = telemetryService;
    }
    GenerateImportShareTelemetry.prototype.execute = function (importContentContext) {
        var metaData = importContentContext.metadata;
        var items = [];
        for (var _i = 0, _a = importContentContext.items; _i < _a.length; _i++) {
            var element = _a[_i];
            var item = {
                type: ContentUtil.readPrimaryCategoryServer(element),
                origin: ContentUtil.readOriginFromContentMap(element),
                identifier: element.identifier,
                pkgVersion: Number(element.pkgVersion),
                transferCount: ContentUtil.readTransferCountFromContentMap(element),
                size: ContentUtil.readSizeFromContentMap(element)
            };
            items.push(item);
        }
        var req = {
            dir: ShareDirection.IN,
            type: ShareType.FILE.valueOf(),
            items: items,
            env: 'sdk',
            correlationData: importContentContext.correlationData,
            objId: importContentContext.items && importContentContext.items.length ?
                importContentContext.items[0]['identifier'] : '',
            objType: importContentContext.items && importContentContext.items.length ?
                ContentUtil.readPrimaryCategoryServer(importContentContext.items[0]) : '',
            objVer: importContentContext.items && importContentContext.items.length ?
                ContentUtil.readPkgVersion(importContentContext.items[0]) + '' : '',
            rollUp: importContentContext.rollUp
        };
        var response = new Response();
        return this.telemetryService.share(req).toPromise()
            .then(function () {
            response.body = importContentContext;
            return Promise.resolve(response);
        }).catch(function () {
            return Promise.reject(response);
        });
    };
    return GenerateImportShareTelemetry;
}());
export { GenerateImportShareTelemetry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtaW1wb3J0LXNoYXJlLXRlbGVtZXRyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb250ZW50L2hhbmRsZXJzL2ltcG9ydC9nZW5lcmF0ZS1pbXBvcnQtc2hhcmUtdGVsZW1ldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxFQUFPLGNBQWMsRUFBaUIsU0FBUyxFQUEwQyxNQUFNLG9CQUFvQixDQUFDO0FBQzNILE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRDtJQUVJLHNDQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUN0RCxDQUFDO0lBRUQsOENBQU8sR0FBUCxVQUFRLG9CQUEwQztRQUM5QyxJQUFNLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7UUFDL0MsSUFBTSxLQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLEtBQXNCLFVBQTJCLEVBQTNCLEtBQUEsb0JBQW9CLENBQUMsS0FBTSxFQUEzQixjQUEyQixFQUEzQixJQUEyQixFQUFFO1lBQTlDLElBQU0sT0FBTyxTQUFBO1lBQ2QsSUFBTSxJQUFJLEdBQVM7Z0JBQ2YsSUFBSSxFQUFFLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BELE1BQU0sRUFBRSxXQUFXLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDO2dCQUNyRCxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVU7Z0JBQzlCLFVBQVUsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztnQkFDdEMsYUFBYSxFQUFFLFdBQVcsQ0FBQywrQkFBK0IsQ0FBQyxPQUFPLENBQUM7Z0JBQ25FLElBQUksRUFBRSxXQUFXLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDO2FBQ3BELENBQUM7WUFDRixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsSUFBTSxHQUFHLEdBQTBCO1lBQzNCLEdBQUcsRUFBRSxjQUFjLENBQUMsRUFBRTtZQUN0QixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDOUIsS0FBSyxFQUFFLEtBQUs7WUFDWixHQUFHLEVBQUUsS0FBSztZQUNWLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxlQUFlO1lBQ3JELEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxLQUFLLElBQUksb0JBQW9CLENBQUMsS0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyRSxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEQsT0FBTyxFQUFFLG9CQUFvQixDQUFDLEtBQUssSUFBSSxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzFFLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6RSxNQUFNLEVBQUUsb0JBQW9CLENBQUMsS0FBSyxJQUFJLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDckUsV0FBVyxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkUsTUFBTSxFQUFFLG9CQUFvQixDQUFDLE1BQU07U0FDdEMsQ0FDSjtRQUVELElBQU0sUUFBUSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRTthQUM5QyxJQUFJLENBQUM7WUFDRixRQUFRLENBQUMsSUFBSSxHQUFHLG9CQUFvQixDQUFDO1lBQ3JDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDTCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0wsbUNBQUM7QUFBRCxDQUFDLEFBN0NELElBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbXBvcnRDb250ZW50Q29udGV4dH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHtSZXNwb25zZX0gZnJvbSAnLi4vLi4vLi4vYXBpJztcbmltcG9ydCB7SXRlbSwgU2hhcmVEaXJlY3Rpb24sIFNoYXJlSXRlbVR5cGUsIFNoYXJlVHlwZSwgVGVsZW1ldHJ5U2VydmljZSwgVGVsZW1ldHJ5U2hhcmVSZXF1ZXN0fSBmcm9tICcuLi8uLi8uLi90ZWxlbWV0cnknO1xuaW1wb3J0IHtDb250ZW50VXRpbH0gZnJvbSAnLi4vLi4vdXRpbC9jb250ZW50LXV0aWwnO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVJbXBvcnRTaGFyZVRlbGVtZXRyeSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbGVtZXRyeVNlcnZpY2U6IFRlbGVtZXRyeVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBleGVjdXRlKGltcG9ydENvbnRlbnRDb250ZXh0OiBJbXBvcnRDb250ZW50Q29udGV4dCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgbWV0YURhdGEgPSBpbXBvcnRDb250ZW50Q29udGV4dC5tZXRhZGF0YTtcbiAgICAgICAgY29uc3QgaXRlbXM6IEl0ZW1bXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaW1wb3J0Q29udGVudENvbnRleHQuaXRlbXMhKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtOiBJdGVtID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IENvbnRlbnRVdGlsLnJlYWRQcmltYXJ5Q2F0ZWdvcnlTZXJ2ZXIoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgb3JpZ2luOiBDb250ZW50VXRpbC5yZWFkT3JpZ2luRnJvbUNvbnRlbnRNYXAoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcjogZWxlbWVudC5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIHBrZ1ZlcnNpb246IE51bWJlcihlbGVtZW50LnBrZ1ZlcnNpb24pLFxuICAgICAgICAgICAgICAgIHRyYW5zZmVyQ291bnQ6IENvbnRlbnRVdGlsLnJlYWRUcmFuc2ZlckNvdW50RnJvbUNvbnRlbnRNYXAoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgc2l6ZTogQ29udGVudFV0aWwucmVhZFNpemVGcm9tQ29udGVudE1hcChlbGVtZW50KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXE6IFRlbGVtZXRyeVNoYXJlUmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBkaXI6IFNoYXJlRGlyZWN0aW9uLklOLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlVHlwZS5GSUxFLnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgICAgICAgICAgZW52OiAnc2RrJyxcbiAgICAgICAgICAgICAgICBjb3JyZWxhdGlvbkRhdGE6IGltcG9ydENvbnRlbnRDb250ZXh0LmNvcnJlbGF0aW9uRGF0YSxcbiAgICAgICAgICAgICAgICBvYmpJZDogaW1wb3J0Q29udGVudENvbnRleHQuaXRlbXMgJiYgaW1wb3J0Q29udGVudENvbnRleHQuaXRlbXMhLmxlbmd0aCA/XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydENvbnRlbnRDb250ZXh0Lml0ZW1zWzBdWydpZGVudGlmaWVyJ10gOiAnJyxcbiAgICAgICAgICAgICAgICBvYmpUeXBlOiBpbXBvcnRDb250ZW50Q29udGV4dC5pdGVtcyAmJiBpbXBvcnRDb250ZW50Q29udGV4dC5pdGVtcy5sZW5ndGggP1xuICAgICAgICAgICAgICAgIENvbnRlbnRVdGlsLnJlYWRQcmltYXJ5Q2F0ZWdvcnlTZXJ2ZXIoaW1wb3J0Q29udGVudENvbnRleHQuaXRlbXNbMF0pIDogJycsXG4gICAgICAgICAgICAgICAgb2JqVmVyOiBpbXBvcnRDb250ZW50Q29udGV4dC5pdGVtcyAmJiBpbXBvcnRDb250ZW50Q29udGV4dC5pdGVtcy5sZW5ndGggP1xuICAgICAgICAgICAgICAgICAgICBDb250ZW50VXRpbC5yZWFkUGtnVmVyc2lvbihpbXBvcnRDb250ZW50Q29udGV4dC5pdGVtc1swXSkgKyAnJyA6ICcnLFxuICAgICAgICAgICAgICAgIHJvbGxVcDogaW1wb3J0Q29udGVudENvbnRleHQucm9sbFVwXG4gICAgICAgICAgICB9XG4gICAgICAgIDtcblxuICAgICAgICBjb25zdCByZXNwb25zZTogUmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVsZW1ldHJ5U2VydmljZS5zaGFyZShyZXEpLnRvUHJvbWlzZSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IGltcG9ydENvbnRlbnRDb250ZXh0O1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=