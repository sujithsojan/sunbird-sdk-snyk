import { ContentAccessEntry, ContentEntry, ContentMarkerEntry } from '../db/schema';
import { ContentUtil } from './content-util';
import { CsContentType } from '@project-sunbird/client-services/services/content';
import { TrackingEnabled } from '@project-sunbird/client-services/models';
import { CsPrimaryCategoryMapper } from '@project-sunbird/client-services/services/content/utilities/primary-category-mapper';
var ContentMapper = /** @class */ (function () {
    function ContentMapper() {
    }
    ContentMapper.mapContentDataToContentDBEntry = function (contentData, manifestVersion) {
        var _a;
        var serverLastUpdatedOn;
        var serverData;
        var localData;
        if (!manifestVersion) {
            serverLastUpdatedOn = contentData.lastUpdatedOn;
            serverData = JSON.stringify(contentData);
        }
        else {
            localData = JSON.stringify(contentData);
        }
        return _a = {},
            _a[ContentEntry.COLUMN_NAME_IDENTIFIER] = contentData.identifier,
            _a[ContentEntry.COLUMN_NAME_SERVER_DATA] = serverData,
            _a[ContentEntry.COLUMN_NAME_SERVER_LAST_UPDATED_ON] = serverLastUpdatedOn,
            _a[ContentEntry.COLUMN_NAME_MANIFEST_VERSION] = manifestVersion,
            _a[ContentEntry.COLUMN_NAME_LOCAL_DATA] = localData,
            _a[ContentEntry.COLUMN_NAME_MIME_TYPE] = contentData.mimeType,
            _a[ContentEntry.COLUMN_NAME_CONTENT_TYPE] = ContentUtil.readContentType(contentData),
            _a[ContentEntry.COLUMN_NAME_VISIBILITY] = ContentUtil.readVisibility(contentData),
            _a[ContentEntry.COLUMN_NAME_AUDIENCE] = ContentUtil.readAudience(contentData),
            _a[ContentEntry.COLUMN_NAME_PRAGMA] = ContentUtil.readPragma(contentData),
            _a[ContentEntry.COLUMN_NAME_PRIMARY_CATEGORY] = ContentUtil.readPrimaryCategory(contentData),
            _a;
    };
    ContentMapper.mapServerResponseToContent = function (contentData, manifestVersion) {
        var serverLastUpdatedOn;
        var serverData;
        var localData;
        if (!manifestVersion) {
            serverLastUpdatedOn = contentData.lastUpdatedOn;
            serverData = contentData;
        }
        else {
            localData = contentData;
        }
        if (!contentData.primaryCategory && contentData.contentType && contentData.mimeType) {
            contentData.primaryCategory = CsPrimaryCategoryMapper.getPrimaryCategory(contentData.contentType.toLowerCase(), contentData.mimeType, contentData.resourceType);
        }
        var primaryCategory = contentData.primaryCategory ? contentData.primaryCategory : contentData.contentType;
        if (!contentData.trackable && primaryCategory && primaryCategory.toLowerCase() === CsContentType.COURSE.toLowerCase()) {
            contentData.trackable = {
                enabled: TrackingEnabled.YES
            };
        }
        if (!contentData.trackable) {
            contentData.trackable = {
                enabled: TrackingEnabled.NO
            };
        }
        return {
            identifier: contentData.identifier,
            name: contentData.name,
            contentData: contentData,
            isUpdateAvailable: ContentUtil.isUpdateAvailable(serverData, localData),
            mimeType: contentData.mimeType,
            basePath: '',
            contentType: ContentUtil.readContentType(contentData),
            primaryCategory: ContentUtil.readPrimaryCategory(contentData),
            isAvailableLocally: false,
            referenceCount: 0,
            sizeOnDevice: 0,
            lastUsedTime: 0,
            lastUpdatedTime: 0,
        };
    };
    ContentMapper.mapContentDBEntryToContent = function (contentEntry, shouldConvertBasePath) {
        var contentData;
        var serverInfo = contentEntry[ContentEntry.COLUMN_NAME_SERVER_DATA];
        var localInfo = contentEntry[ContentEntry.COLUMN_NAME_LOCAL_DATA];
        var serverData = serverInfo && JSON.parse(serverInfo);
        var localData = localInfo && JSON.parse(localInfo);
        var identifier = contentEntry[ContentEntry.COLUMN_NAME_IDENTIFIER];
        var mimeType = contentEntry[ContentEntry.COLUMN_NAME_MIME_TYPE];
        var visibility = contentEntry[ContentEntry.COLUMN_NAME_VISIBILITY];
        var contentType = contentEntry[ContentEntry.COLUMN_NAME_CONTENT_TYPE];
        var primaryCategory = contentEntry[ContentEntry.COLUMN_NAME_PRIMARY_CATEGORY];
        var lastUsedTime = 0;
        var resourceType;
        if (contentEntry.hasOwnProperty(ContentAccessEntry.COLUMN_NAME_EPOCH_TIMESTAMP)) {
            lastUsedTime = contentEntry[ContentAccessEntry.COLUMN_NAME_EPOCH_TIMESTAMP];
        }
        if (contentEntry.hasOwnProperty(ContentMarkerEntry.COLUMN_NAME_DATA)) {
            if (!localData) {
                localData = JSON.parse(contentEntry[ContentMarkerEntry.COLUMN_NAME_DATA]);
            }
            if (localData) {
                identifier = localData.identifier;
                mimeType = localData.mimeType;
                resourceType = localData.resourceType;
                visibility = ContentUtil.readVisibility(localData);
                contentType = ContentUtil.readContentType(localData);
                primaryCategory = ContentUtil.readPrimaryCategory(localData);
            }
        }
        if (localData) {
            contentData = localData;
        }
        if (serverData) {
            if (!localData || !ContentUtil.isAvailableLocally(contentEntry[ContentEntry.COLUMN_NAME_CONTENT_STATE])) {
                contentData = serverData;
            }
            else {
                if (!localData.streamingUrl) {
                    localData.streamingUrl = serverData.streamingUrl;
                }
                if (!localData.previewUrl) {
                    localData.previewUrl = serverData.previewUrl;
                }
                if (serverData.me_totalRatingsCount) {
                    localData.me_totalRatingsCount = serverData.me_totalRatingsCount;
                }
                if (serverData.me_averageRating) {
                    localData.me_averageRating = serverData.me_averageRating;
                }
                if (!localData.size) {
                    localData.size = serverData.size;
                }
                if (serverData.licenseDetails) {
                    localData.licenseDetails = serverData.licenseDetails;
                }
                if (serverData.forumId) {
                    localData.forumId = serverData.forumId;
                }
            }
        }
        var contentCreationTime = 0;
        var localLastUpdatedTime = contentEntry[ContentEntry.COLUMN_NAME_LOCAL_LAST_UPDATED_ON];
        if (localLastUpdatedTime) {
            contentCreationTime = new Date(localLastUpdatedTime).getTime();
        }
        var sizeOnDevice = Number(contentEntry[ContentEntry.COLUMN_NAME_SIZE_ON_DEVICE]);
        var size = sizeOnDevice ? sizeOnDevice : Number(serverData ? serverData.size : 0);
        if (!contentData.trackable && primaryCategory && primaryCategory.toLowerCase() === CsContentType.COURSE.toLowerCase()) {
            contentData.trackable = {
                enabled: TrackingEnabled.YES
            };
        }
        if (!contentData.trackable) {
            contentData.trackable = {
                enabled: TrackingEnabled.NO
            };
        }
        resourceType = contentData.resourceType;
        if (!contentData.primaryCategory && contentType) {
            contentData.primaryCategory = CsPrimaryCategoryMapper.getPrimaryCategory(contentType.toLowerCase(), mimeType, resourceType);
        }
        var basePath = contentEntry[ContentEntry.COLUMN_NAME_PATH] || '';
        if (typeof (contentData.originData) === 'string') {
            contentData.originData = ContentUtil.getParseErrorObject(contentData.originData);
        }
        if (contentData.trackable && typeof (contentData.trackable) === 'string') {
            contentData.trackable = JSON.parse(contentData.trackable);
        }
        return {
            identifier: identifier,
            name: contentData.name,
            contentData: contentData,
            isUpdateAvailable: ContentUtil.isUpdateAvailable(serverData, localData),
            mimeType: mimeType,
            basePath: !shouldConvertBasePath ? basePath : '/_app_file_' + basePath,
            primaryCategory: primaryCategory,
            contentType: contentType,
            isAvailableLocally: ContentUtil.isAvailableLocally(contentEntry[ContentEntry.COLUMN_NAME_CONTENT_STATE]),
            referenceCount: Number(contentEntry[ContentEntry.COLUMN_NAME_REF_COUNT]) || 0,
            sizeOnDevice: size,
            lastUsedTime: lastUsedTime || 0,
            lastUpdatedTime: contentCreationTime,
        };
    };
    return ContentMapper;
}());
export { ContentMapper };
//# sourceMappingURL=data:application/json;base64,