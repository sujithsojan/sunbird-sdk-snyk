import { HttpRequestType, Request } from '../../api';
import { map, tap } from 'rxjs/operators';
import { TelemetryLogger } from '../../telemetry/util/telemetry-logger';
import { Actor, AuditState } from '../../telemetry';
var EnrollCourseHandler = /** @class */ (function () {
    function EnrollCourseHandler(apiService, courseServiceConfig) {
        this.apiService = apiService;
        this.courseServiceConfig = courseServiceConfig;
        this.ENROL_ENDPOINT = '/enrol';
    }
    EnrollCourseHandler.prototype.handle = function (request) {
        var _this = this;
        delete request.batchStatus;
        var apiRequest = new Request.Builder()
            .withType(HttpRequestType.POST)
            .withPath(this.courseServiceConfig.apiPath + this.ENROL_ENDPOINT)
            .withBearerToken(true)
            .withUserToken(true)
            .withBody({ request: request })
            .build();
        return this.apiService.fetch(apiRequest)
            .pipe(map(function (success) {
            return success.body.result.response === 'SUCCESS';
        }), tap(function () {
            _this.generateAuditTelemetry(request);
        }));
    };
    EnrollCourseHandler.prototype.generateAuditTelemetry = function (request) {
        var actor = new Actor();
        actor.id = request.userId;
        actor.type = Actor.TYPE_USER;
        var cdata = [
            {
                type: 'CourseId',
                id: request.courseId
            },
            {
                type: 'BatchId',
                id: request.batchId
            },
            {
                type: 'UserId',
                id: request.userId
            }
        ];
        var auditRequest = {
            env: 'course',
            actor: actor,
            currentState: AuditState.AUDIT_CREATED,
            updatedProperties: ['courseId', 'userId', 'batchId'],
            objId: request.courseId,
            objType: 'Course',
            rollUp: { l1: request.courseId },
            correlationData: cdata,
            type: 'enrollment'
        };
        TelemetryLogger.log.audit(auditRequest).toPromise();
    };
    return EnrollCourseHandler;
}());
export { EnrollCourseHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5yb2xsLWNvdXJzZS1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvdXJzZS9oYW5kbGVycy9lbnJvbGwtY291cnNlLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQyxlQUFlLEVBQUUsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR2xGLE9BQU8sRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3hFLE9BQU8sRUFBeUIsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNFO0lBSUksNkJBQW9CLFVBQXNCLEVBQ3RCLG1CQUF3QztRQUR4QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFIM0MsbUJBQWMsR0FBRyxRQUFRLENBQUM7SUFJM0MsQ0FBQztJQUVELG9DQUFNLEdBQU4sVUFBTyxPQUE0QjtRQUFuQyxpQkFrQkM7UUFqQkcsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQzNCLElBQU0sVUFBVSxHQUFZLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTthQUM1QyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQzthQUM5QixRQUFRLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO2FBQ2hFLGVBQWUsQ0FBQyxJQUFJLENBQUM7YUFDckIsYUFBYSxDQUFDLElBQUksQ0FBQzthQUNuQixRQUFRLENBQUMsRUFBQyxPQUFPLFNBQUEsRUFBQyxDQUFDO2FBQ25CLEtBQUssRUFBRSxDQUFDO1FBRWIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBbUMsVUFBVSxDQUFDO2FBQ3JFLElBQUksQ0FDRCxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ1IsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUNKLEtBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ1YsQ0FBQztJQUVPLG9EQUFzQixHQUE5QixVQUErQixPQUE0QjtRQUN2RCxJQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQzFCLEtBQUssQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUMxQixLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDN0IsSUFBTSxLQUFLLEdBQUc7WUFDVjtnQkFDSSxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsRUFBRSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2FBQ3ZCO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsRUFBRSxFQUFFLE9BQU8sQ0FBQyxPQUFPO2FBQ3RCO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsRUFBRSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2FBQ3JCO1NBQ0osQ0FBQztRQUVGLElBQU0sWUFBWSxHQUEwQjtZQUN4QyxHQUFHLEVBQUUsUUFBUTtZQUNiLEtBQUssT0FBQTtZQUNMLFlBQVksRUFBRSxVQUFVLENBQUMsYUFBYTtZQUN0QyxpQkFBaUIsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1lBQ3BELEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUTtZQUN2QixPQUFPLEVBQUUsUUFBUTtZQUNqQixNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBQztZQUMvQixlQUFlLEVBQUcsS0FBSztZQUN2QixJQUFJLEVBQUUsWUFBWTtTQUNyQixDQUFDO1FBQ0YsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQTVERCxJQTREQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXBpUmVxdWVzdEhhbmRsZXIsIEFwaVNlcnZpY2UsIEh0dHBSZXF1ZXN0VHlwZSwgUmVxdWVzdH0gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7Q291cnNlU2VydmljZUNvbmZpZywgRW5yb2xsQ291cnNlUmVxdWVzdH0gZnJvbSAnLi4nO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRlbGVtZXRyeUxvZ2dlciB9IGZyb20gJy4uLy4uL3RlbGVtZXRyeS91dGlsL3RlbGVtZXRyeS1sb2dnZXInO1xuaW1wb3J0IHsgVGVsZW1ldHJ5QXVkaXRSZXF1ZXN0LCBBY3RvciwgQXVkaXRTdGF0ZSB9IGZyb20gJy4uLy4uL3RlbGVtZXRyeSc7XG5cbmV4cG9ydCBjbGFzcyBFbnJvbGxDb3Vyc2VIYW5kbGVyIGltcGxlbWVudHMgQXBpUmVxdWVzdEhhbmRsZXI8RW5yb2xsQ291cnNlUmVxdWVzdCwgYm9vbGVhbj4ge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBFTlJPTF9FTkRQT0lOVCA9ICcvZW5yb2wnO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY291cnNlU2VydmljZUNvbmZpZzogQ291cnNlU2VydmljZUNvbmZpZykge1xuICAgIH1cblxuICAgIGhhbmRsZShyZXF1ZXN0OiBFbnJvbGxDb3Vyc2VSZXF1ZXN0KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIGRlbGV0ZSByZXF1ZXN0LmJhdGNoU3RhdHVzO1xuICAgICAgICBjb25zdCBhcGlSZXF1ZXN0OiBSZXF1ZXN0ID0gbmV3IFJlcXVlc3QuQnVpbGRlcigpXG4gICAgICAgICAgICAud2l0aFR5cGUoSHR0cFJlcXVlc3RUeXBlLlBPU1QpXG4gICAgICAgICAgICAud2l0aFBhdGgodGhpcy5jb3Vyc2VTZXJ2aWNlQ29uZmlnLmFwaVBhdGggKyB0aGlzLkVOUk9MX0VORFBPSU5UKVxuICAgICAgICAgICAgLndpdGhCZWFyZXJUb2tlbih0cnVlKVxuICAgICAgICAgICAgLndpdGhVc2VyVG9rZW4odHJ1ZSlcbiAgICAgICAgICAgIC53aXRoQm9keSh7cmVxdWVzdH0pXG4gICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmZldGNoPHsgcmVzdWx0OiB7IHJlc3BvbnNlOiBzdHJpbmcgfSB9PihhcGlSZXF1ZXN0KVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzLmJvZHkucmVzdWx0LnJlc3BvbnNlID09PSAnU1VDQ0VTUyc7XG4gICAgICAgICAgICAgICAgfSksIHRhcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVBdWRpdFRlbGVtZXRyeShyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlQXVkaXRUZWxlbWV0cnkocmVxdWVzdDogRW5yb2xsQ291cnNlUmVxdWVzdCkge1xuICAgICAgICBjb25zdCBhY3RvciA9IG5ldyBBY3RvcigpO1xuICAgICAgICBhY3Rvci5pZCA9IHJlcXVlc3QudXNlcklkO1xuICAgICAgICBhY3Rvci50eXBlID0gQWN0b3IuVFlQRV9VU0VSO1xuICAgICAgICBjb25zdCBjZGF0YSA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQ291cnNlSWQnLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0LmNvdXJzZUlkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdCYXRjaElkJyxcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdC5iYXRjaElkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdVc2VySWQnLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0LnVzZXJJZFxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IGF1ZGl0UmVxdWVzdDogVGVsZW1ldHJ5QXVkaXRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgZW52OiAnY291cnNlJyxcbiAgICAgICAgICAgIGFjdG9yLFxuICAgICAgICAgICAgY3VycmVudFN0YXRlOiBBdWRpdFN0YXRlLkFVRElUX0NSRUFURUQsXG4gICAgICAgICAgICB1cGRhdGVkUHJvcGVydGllczogWydjb3Vyc2VJZCcsICd1c2VySWQnLCAnYmF0Y2hJZCddLFxuICAgICAgICAgICAgb2JqSWQ6IHJlcXVlc3QuY291cnNlSWQsXG4gICAgICAgICAgICBvYmpUeXBlOiAnQ291cnNlJyxcbiAgICAgICAgICAgIHJvbGxVcDogeyBsMTogcmVxdWVzdC5jb3Vyc2VJZH0sXG4gICAgICAgICAgICBjb3JyZWxhdGlvbkRhdGEgOiBjZGF0YSxcbiAgICAgICAgICAgIHR5cGU6ICdlbnJvbGxtZW50J1xuICAgICAgICB9O1xuICAgICAgICBUZWxlbWV0cnlMb2dnZXIubG9nLmF1ZGl0KGF1ZGl0UmVxdWVzdCkudG9Qcm9taXNlKCk7XG4gICAgfVxufVxuIl19