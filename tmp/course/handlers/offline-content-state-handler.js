var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { CourseServiceImpl } from '..';
import { of } from 'rxjs';
import { ArrayUtil } from '../../util/array-util';
import { map, mergeMap } from 'rxjs/operators';
var OfflineContentStateHandler = /** @class */ (function () {
    function OfflineContentStateHandler(keyValueStore) {
        this.keyValueStore = keyValueStore;
    }
    OfflineContentStateHandler.prototype.getLocalContentStateResponse = function (request) {
        var key = CourseServiceImpl.GET_CONTENT_STATE_KEY_PREFIX.concat(request.userId, request.courseId);
        return this.keyValueStore.getValue(key)
            .pipe(map(function (value) {
            var responseContentState = { contentList: [] };
            if (value) {
                var response = JSON.parse(value);
                var result = response['result'];
                if (result && result.hasOwnProperty('contentList')) {
                    responseContentState.contentList = result['contentList'];
                    return responseContentState;
                }
                else {
                    responseContentState.contentList = response['contentList'];
                    return responseContentState;
                }
            }
            responseContentState.contentList = responseContentState.contentList.map(function (contentState) {
                if (typeof contentState.score === 'string') {
                    contentState.score = undefined;
                }
                return contentState;
            });
            return responseContentState;
        }));
    };
    OfflineContentStateHandler.prototype.manipulateEnrolledCoursesResponseLocally = function (updateContentStateRequest) {
        var _this = this;
        var key = CourseServiceImpl.GET_ENROLLED_COURSE_KEY_PREFIX.concat(updateContentStateRequest.userId);
        return this.keyValueStore.getValue(key)
            .pipe(mergeMap(function (value) {
            if (value) {
                var response = JSON.parse(value);
                var result = response['result'];
                var courses = void 0;
                if (result && result.hasOwnProperty('courses')) {
                    courses = result['courses'];
                }
                else {
                    courses = response['courses'];
                }
                if (courses && courses.length) {
                    var newCourses_1 = __spreadArrays(courses);
                    courses.forEach(function (course) {
                        if (course.courseId === updateContentStateRequest.courseId &&
                            course.batchId === updateContentStateRequest.batchId) {
                            if (!course.contentsPlayedOffline || !course.contentsPlayedOffline.length) {
                                course.contentsPlayedOffline = [];
                            }
                            if (updateContentStateRequest.status !== 1 && (course.contentsPlayedOffline.length === 0 ||
                                (course.contentsPlayedOffline.length > 0 &&
                                    !ArrayUtil.contains(course.contentsPlayedOffline, updateContentStateRequest.contentId)))) {
                                course.progress = course.progress ? course.progress : 0;
                                course.progress = course.progress + 1;
                                course.completionPercentage =
                                    _this.getCourseCompletionPercentage(course.leafNodesCount, course.progress);
                                var updatedCourse = course;
                                var playedOffline = updatedCourse.contentsPlayedOffline;
                                if (!playedOffline) {
                                    playedOffline = [];
                                }
                                playedOffline.push(updateContentStateRequest.contentId);
                                updatedCourse.contentsPlayedOffline = playedOffline;
                                updatedCourse.progress = course.progress;
                                updatedCourse.completionPercentage = course.completionPercentage;
                                var toUpdateIndex = newCourses_1.findIndex(function (el) {
                                    return el.contentId === course.contentId || el.batchId === course.batchId;
                                });
                                newCourses_1.splice(toUpdateIndex, 1, updatedCourse);
                            }
                        }
                    });
                    if (newCourses_1 && newCourses_1.length) {
                        if (result && result.hasOwnProperty('courses')) {
                            result['courses'] = newCourses_1;
                        }
                        else {
                            response['courses'] = newCourses_1;
                        }
                        return _this.keyValueStore.setValue(key, JSON.stringify(response));
                    }
                    else {
                        return of(false);
                    }
                }
                else {
                    return of(false);
                }
            }
            else {
                return of(false);
            }
        }));
    };
    OfflineContentStateHandler.prototype.manipulateGetContentStateResponseLocally = function (updateContentStateRequest) {
        var _this = this;
        var key = CourseServiceImpl.GET_CONTENT_STATE_KEY_PREFIX.concat(updateContentStateRequest.userId, updateContentStateRequest.courseId);
        return this.keyValueStore.getValue(key)
            .pipe(mergeMap(function (value) {
            if (value) {
                var contentStateResponse = { contentList: [] };
                var response = JSON.parse(value);
                var result = response['result'];
                if (result && result.hasOwnProperty('contentList')) {
                    contentStateResponse.contentList = result['contentList'];
                }
                else {
                    contentStateResponse.contentList = response['contentList'];
                }
                if (contentStateResponse) {
                    var contentStateList_1 = contentStateResponse.contentList;
                    var newContentState_1;
                    if (!contentStateList_1 || !contentStateList_1.length) {
                        newContentState_1 = _this.getContentState(updateContentStateRequest);
                        contentStateList_1 = [];
                        contentStateList_1.push(newContentState_1);
                        contentStateResponse.contentList = contentStateList_1;
                        return _this.keyValueStore.setValue(key, JSON.stringify(contentStateResponse));
                    }
                    else {
                        contentStateList_1.forEach(function (contentState) {
                            if (contentState.contentId === updateContentStateRequest.contentId) {
                                if (contentState.status !== updateContentStateRequest.status) {
                                    updateContentStateRequest.score = contentState.score;
                                    updateContentStateRequest.bestScore = contentState.bestScore;
                                    newContentState_1 = _this.getContentState(updateContentStateRequest);
                                    contentStateList_1 = contentStateList_1.filter(function (el) {
                                        return el.contentId !== contentState.contentId;
                                    });
                                }
                            }
                            else {
                                newContentState_1 = _this.getContentState(updateContentStateRequest);
                            }
                        });
                        if (newContentState_1) {
                            contentStateList_1.push(newContentState_1);
                            contentStateResponse.contentList = contentStateList_1;
                            return _this.keyValueStore.setValue(key, JSON.stringify(contentStateResponse));
                        }
                        else {
                            return of(false);
                        }
                    }
                }
                else {
                    return of(false);
                }
            }
            else {
                return of(false);
            }
        }));
    };
    OfflineContentStateHandler.prototype.getCourseCompletionPercentage = function (leafNodeCount, progress) {
        if (leafNodeCount === 0 || leafNodeCount === undefined) {
            return 0;
        }
        var completionData = ((progress / leafNodeCount) * 100);
        if (isNaN(completionData)) {
            return 0;
        }
        else if (completionData > 100) {
            return 100;
        }
        else {
            return Math.floor(completionData);
        }
    };
    OfflineContentStateHandler.prototype.getContentState = function (updateContentStateRequest) {
        return {
            id: updateContentStateRequest.userId,
            userId: updateContentStateRequest.userId,
            courseId: updateContentStateRequest.courseId,
            contentId: updateContentStateRequest.contentId,
            batchId: updateContentStateRequest.batchId,
            result: updateContentStateRequest.result,
            grade: updateContentStateRequest.grade,
            score: updateContentStateRequest.score,
            bestScore: updateContentStateRequest.bestScore,
            status: updateContentStateRequest.status,
            progress: updateContentStateRequest.progress,
        };
    };
    return OfflineContentStateHandler;
}());
export { OfflineContentStateHandler };
//# sourceMappingURL=data:application/json;base64,