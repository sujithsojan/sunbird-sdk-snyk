import { of } from 'rxjs';
import { ContentUtil } from '../../content/util/content-util';
import { map, mergeMap } from 'rxjs/operators';
var OfflineCourseCacheHandler = /** @class */ (function () {
    function OfflineCourseCacheHandler(dbService, contentService, keyValueStore) {
        this.dbService = dbService;
        this.contentService = contentService;
        this.keyValueStore = keyValueStore;
    }
    OfflineCourseCacheHandler.prototype.addNewlyEnrolledCourseToGetEnrolledCourses = function (enrollCourseRequest) {
        var _this = this;
        var key = OfflineCourseCacheHandler.GET_ENROLLED_COURSES_KEY_PREFIX.concat(enrollCourseRequest.userId);
        return this.keyValueStore.getValue(key)
            .pipe(mergeMap(function (enrolledCoursesInDB) {
            if (!enrolledCoursesInDB) {
                return _this.getNewlyAddedCourse(enrollCourseRequest)
                    .pipe(map(function (course) {
                    var courseList = [];
                    courseList.push(course);
                    return courseList;
                }), mergeMap(function (list) {
                    return _this.keyValueStore.setValue(key, JSON.stringify(list));
                }));
            }
            else {
                var response_1 = JSON.parse(enrolledCoursesInDB);
                var result_1 = response_1['result'];
                var courses_1;
                if (result_1 && result_1.hasOwnProperty('courses')) {
                    courses_1 = result_1['courses'];
                }
                else {
                    courses_1 = response_1['courses'];
                }
                var isCourseAvailable_1 = false;
                courses_1.forEach(function (course) {
                    if (course.courseId === enrollCourseRequest.courseId) {
                        isCourseAvailable_1 = true;
                    }
                });
                if (!isCourseAvailable_1) {
                    return _this.getNewlyAddedCourse(enrollCourseRequest)
                        .pipe(map(function (newCourse) {
                        courses_1.push(newCourse);
                        if (result_1 && result_1.hasOwnProperty('courses')) {
                            result_1['courses'] = courses_1;
                        }
                        else {
                            response_1['courses'] = courses_1;
                        }
                        return JSON.stringify(response_1);
                    }), mergeMap(function (value) {
                        return _this.keyValueStore.setValue(key, value);
                    }));
                }
                else {
                    return of(true);
                }
            }
        }));
    };
    OfflineCourseCacheHandler.prototype.getNewlyAddedCourse = function (enrollCourseRequest) {
        var _this = this;
        return this.contentService.getChildContents({
            contentId: enrollCourseRequest.courseId,
            hierarchyInfo: []
        })
            .pipe(map(function (result) {
            return _this.getLeafNodeCount(result);
        }), mergeMap(function (leafNodeCount) {
            return _this.contentService.getContentDetails({ contentId: enrollCourseRequest.courseId })
                .pipe(mergeMap(function (content) {
                var course = {};
                course.progress = 0;
                course.userId = enrollCourseRequest.userId;
                course.batchId = enrollCourseRequest.batchId;
                course.courseId = enrollCourseRequest.courseId;
                course.contentId = enrollCourseRequest.courseId;
                course.leafNodesCount = leafNodeCount;
                var batch = {};
                batch['identifier'] = enrollCourseRequest.batchId;
                batch['status'] = enrollCourseRequest.batchStatus;
                course.batch = batch;
                if (content) {
                    course.courseName = content.contentData.name;
                    if (content.contentData.appIcon.startsWith('https://')) {
                        course.courseLogoUrl = content.contentData.appIcon;
                    }
                    else {
                        course.courseLogoUrl = ContentUtil
                            .getBasePath(content.basePath.concat('/', content.contentData.appIcon));
                    }
                }
                return of(course);
            }));
        }));
    };
    OfflineCourseCacheHandler.prototype.getLeafNodeCount = function (obj) {
        var _this = this;
        if (!obj.children || !obj.children.length) {
            return 1;
        }
        return obj.children.reduce(function (acc, child) {
            acc += _this.getLeafNodeCount(child);
            return acc;
        }, 0);
    };
    OfflineCourseCacheHandler.GET_ENROLLED_COURSES_KEY_PREFIX = 'enrolledCourses';
    return OfflineCourseCacheHandler;
}());
export { OfflineCourseCacheHandler };
//# sourceMappingURL=data:application/json;base64,