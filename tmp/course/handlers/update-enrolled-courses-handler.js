var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { of } from 'rxjs';
import { ArrayUtil } from '../../util/array-util';
import { map, mergeMap } from 'rxjs/operators';
var UpdateEnrolledCoursesHandler = /** @class */ (function () {
    function UpdateEnrolledCoursesHandler(keyValueStore, offlineContentStateHandler) {
        this.keyValueStore = keyValueStore;
        this.offlineContentStateHandler = offlineContentStateHandler;
    }
    UpdateEnrolledCoursesHandler.prototype.updateEnrollCourses = function (request) {
        var _this = this;
        var enrolledCoursesKey = UpdateEnrolledCoursesHandler.GET_ENROLLED_COURSES_KEY_PREFIX.concat(request.userId);
        return this.offlineContentStateHandler.getLocalContentStateResponse(request)
            .pipe(mergeMap(function (contentState) {
            return _this.keyValueStore.getValue(enrolledCoursesKey)
                .pipe(mergeMap(function (value) {
                if (value) {
                    var response = JSON.parse(value);
                    var result = response['result'];
                    var courses = void 0;
                    if (result && result.hasOwnProperty('courses')) {
                        courses = result['courses'];
                    }
                    else {
                        courses = response['courses'];
                    }
                    var newCourses_1 = __spreadArrays(courses);
                    courses.forEach(function (course) {
                        if (course.courseId === request.courseId && course.batchId === request.batchId) {
                            var updateCourse_1 = course;
                            var contentList = contentState.contentList;
                            contentList.forEach(function (content) {
                                if (content.status === 2) {
                                    var playedOffLine = course.contentsPlayedOffline;
                                    if (!playedOffLine) {
                                        playedOffLine = [];
                                    }
                                    playedOffLine.push(content.contentId);
                                    updateCourse_1.contentsPlayedOffline = ArrayUtil.deDupe(playedOffLine);
                                }
                            });
                            var toUpdateIndex = newCourses_1.findIndex(function (el) {
                                return el.contentId === course.contentId && el.batchId === course.batchId;
                            });
                            newCourses_1.splice(toUpdateIndex, 1, updateCourse_1);
                        }
                    });
                    if (newCourses_1 && newCourses_1.length) {
                        if (result && result.hasOwnProperty('courses')) {
                            result['courses'] = newCourses_1;
                        }
                        else {
                            response['courses'] = newCourses_1;
                        }
                        return _this.keyValueStore.setValue(enrolledCoursesKey, JSON.stringify(response))
                            .pipe(map(function () {
                            return contentState;
                        }));
                    }
                    else {
                        return of(contentState);
                    }
                }
                else {
                    return of(contentState);
                }
            }));
        }));
    };
    UpdateEnrolledCoursesHandler.GET_ENROLLED_COURSES_KEY_PREFIX = 'enrolledCourses';
    return UpdateEnrolledCoursesHandler;
}());
export { UpdateEnrolledCoursesHandler };
//# sourceMappingURL=data:application/json;base64,