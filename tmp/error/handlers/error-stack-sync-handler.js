import { EMPTY, of, throwError } from 'rxjs';
import { ErrorStackEntry } from '../db/schema';
import { HttpRequestType, Request } from '../../api';
import { NetworkStatus } from '../../util/network';
import { ErrorStackMapper } from '../util/error-stack-mapper';
import { catchError, expand, map, mapTo, mergeMap } from 'rxjs/operators';
var _ID = ErrorStackEntry._ID;
var ErrorStackSyncHandler = /** @class */ (function () {
    function ErrorStackSyncHandler(apiService, dbService, errorLoggerConfig, networkInfoService, errorStackSyncRequestDecorator) {
        this.apiService = apiService;
        this.dbService = dbService;
        this.errorLoggerConfig = errorLoggerConfig;
        this.networkInfoService = networkInfoService;
        this.errorStackSyncRequestDecorator = errorStackSyncRequestDecorator;
    }
    ErrorStackSyncHandler.prototype.handle = function (errorSyncBandwidth) {
        var _this = this;
        return this.processBatch(errorSyncBandwidth)
            .pipe(expand(function (processedCount) {
            if (processedCount > 0) {
                return _this.processBatch(errorSyncBandwidth);
            }
            return EMPTY;
        }), mapTo(undefined), catchError(function () { return of(undefined); }));
    };
    ErrorStackSyncHandler.prototype.processBatch = function (errorSyncBandwidth) {
        var _this = this;
        return this.getErrorStackBatch(errorSyncBandwidth)
            .pipe(mergeMap(function (errorStackList) { return _this.sync(errorStackList); }), mergeMap(function (errorStackList) { return _this.clearLogs(errorStackList); }), map(function (errorStackList) { return errorStackList.length; }));
    };
    ErrorStackSyncHandler.prototype.getErrorStackBatch = function (errorSyncBandwidth) {
        return this.dbService.execute("\n                SELECT * FROM " + ErrorStackEntry.TABLE_NAME + "\n                LIMIT " + errorSyncBandwidth + "\n            ");
    };
    ErrorStackSyncHandler.prototype.clearLogs = function (errorStackList) {
        if (!errorStackList.length) {
            return of(errorStackList);
        }
        return this.dbService.execute("\n                DELETE FROM " + ErrorStackEntry.TABLE_NAME + "\n                WHERE " + ErrorStackEntry._ID + " IN (" + errorStackList.map(function (e) { return e[_ID]; }).join(',') + ")\n            ")
            .pipe(mapTo(errorStackList));
    };
    ErrorStackSyncHandler.prototype.sync = function (errorStackList) {
        var _this = this;
        if (!errorStackList.length) {
            return of(errorStackList);
        }
        return this.networkInfoService.networkStatus$
            .pipe(mergeMap(function (status) {
            if (status === NetworkStatus.OFFLINE) {
                return throwError(new Error('Fake Error'));
            }
            var request = {
                pdata: undefined,
                context: undefined,
                logs: errorStackList.map(function (e) { return ErrorStackMapper.mapErrorSatckDBEntryToErrorStack(e); })
            };
            return _this.errorStackSyncRequestDecorator.decorate(request)
                .pipe(mergeMap(function () {
                var apiRequest = new Request.Builder()
                    .withType(HttpRequestType.POST)
                    .withPath(_this.errorLoggerConfig.errorLoggerApiPath)
                    .withBearerToken(true)
                    .withBody({
                    request: request
                })
                    .build();
                return _this.apiService.fetch(apiRequest);
            }));
        }), mapTo(errorStackList));
    };
    return ErrorStackSyncHandler;
}());
export { ErrorStackSyncHandler };
//# sourceMappingURL=data:application/json;base64,