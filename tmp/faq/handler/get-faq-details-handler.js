import { Path } from '../../util/file/util/path';
import { HttpRequestType, Request } from '../../api';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
var GetFaqDetailsHandler = /** @class */ (function () {
    function GetFaqDetailsHandler(apiService, faqServiceConfig, fileservice, cachedItemStore) {
        this.apiService = apiService;
        this.faqServiceConfig = faqServiceConfig;
        this.fileservice = fileservice;
        this.cachedItemStore = cachedItemStore;
        this.FAQ_FILE_KEY_PREFIX = 'faq-';
        this.FAQ_LOCAL_KEY = 'faq-new-';
    }
    GetFaqDetailsHandler.prototype.handle = function (request) {
        var _this = this;
        return this.cachedItemStore.getCached(request.language, this.FAQ_LOCAL_KEY, 'ttl_' + this.FAQ_LOCAL_KEY, function () { return _this.fetchFromServer(request); }, function () { return _this.fetchFromFile(request.language); });
    };
    GetFaqDetailsHandler.prototype.fetchFromServer = function (request) {
        var apiRequest = new Request.Builder()
            .withType(HttpRequestType.GET)
            .withHost(request.faqUrl)
            .withPath('/faq-' + request.language + '.json')
            .withBearerToken(false)
            .build();
        return this.apiService.fetch(apiRequest)
            .pipe(map(function (response) {
            var resp;
            try {
                resp = JSON.parse(response.body.trim());
            }
            catch (error) {
                resp = response.body;
            }
            return resp;
        }));
    };
    GetFaqDetailsHandler.prototype.fetchFromFile = function (language) {
        var dir = Path.getAssetPath() + this.faqServiceConfig.faqConfigDirPath;
        var file = this.FAQ_FILE_KEY_PREFIX + language + '.json';
        return from(this.fileservice.readFileFromAssets(dir.concat('/', file)))
            .pipe(map(function (filecontent) {
            var result = JSON.parse(filecontent);
            return result;
        }));
    };
    return GetFaqDetailsHandler;
}());
export { GetFaqDetailsHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZhcS1kZXRhaWxzLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZmFxL2hhbmRsZXIvZ2V0LWZhcS1kZXRhaWxzLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRS9DLE9BQU8sRUFBYSxlQUFlLEVBQUUsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQy9ELE9BQU8sRUFBQyxJQUFJLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR25DO0lBSUksOEJBQ1ksVUFBc0IsRUFDdEIsZ0JBQWtDLEVBQ2xDLFdBQXdCLEVBQ3hCLGVBQWdDO1FBSGhDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFQM0Isd0JBQW1CLEdBQUcsTUFBTSxDQUFDO1FBQzdCLGtCQUFhLEdBQUcsVUFBVSxDQUFDO0lBTzVDLENBQUM7SUFFRCxxQ0FBTSxHQUFOLFVBQU8sT0FBc0I7UUFBN0IsaUJBUUM7UUFQRyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUNqQyxPQUFPLENBQUMsUUFBUSxFQUNoQixJQUFJLENBQUMsYUFBYSxFQUNsQixNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFDM0IsY0FBTSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQTdCLENBQTZCLEVBQ25DLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBcEMsQ0FBb0MsQ0FDN0MsQ0FBQztJQUNOLENBQUM7SUFFTyw4Q0FBZSxHQUF2QixVQUF3QixPQUFzQjtRQUMxQyxJQUFNLFVBQVUsR0FBWSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7YUFDNUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7YUFDN0IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7YUFDeEIsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQzthQUM5QyxlQUFlLENBQUMsS0FBSyxDQUFDO2FBQ3RCLEtBQUssRUFBRSxDQUFDO1FBRWIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7YUFDbkMsSUFBSSxDQUNELEdBQUcsQ0FBQyxVQUFDLFFBQVE7WUFDVCxJQUFJLElBQUksQ0FBQztZQUNULElBQUk7Z0JBQ0EsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzNDO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ1osSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7YUFDeEI7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ1YsQ0FBQztJQUVPLDRDQUFhLEdBQXJCLFVBQXNCLFFBQWdCO1FBQ2xDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7UUFDekUsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFFM0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ2xFLElBQUksQ0FDRCxHQUFHLENBQUMsVUFBQyxXQUFtQjtZQUNwQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZDLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDVixDQUFDO0lBR0wsMkJBQUM7QUFBRCxDQUFDLEFBekRELElBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHZXRGYXFSZXF1ZXN0fSBmcm9tICcuLy4uL2RlZi9nZXQtZmFxLXJlcXVlc3QnO1xuaW1wb3J0IHtDYWNoZWRJdGVtU3RvcmV9IGZyb20gJy4uLy4uL2tleS12YWx1ZS1zdG9yZSc7XG5pbXBvcnQge1BhdGh9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS91dGlsL3BhdGgnO1xuaW1wb3J0IHtGaWxlU2VydmljZX0gZnJvbSAnLi4vLi4vdXRpbC9maWxlL2RlZi9maWxlLXNlcnZpY2UnO1xuaW1wb3J0IHtBcGlTZXJ2aWNlLCBIdHRwUmVxdWVzdFR5cGUsIFJlcXVlc3R9IGZyb20gJy4uLy4uL2FwaSc7XG5pbXBvcnQge2Zyb20sIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtGYXEsIEZhcVNlcnZpY2VDb25maWd9IGZyb20gJy4uJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuZXhwb3J0IGNsYXNzIEdldEZhcURldGFpbHNIYW5kbGVyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IEZBUV9GSUxFX0tFWV9QUkVGSVggPSAnZmFxLSc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBGQVFfTE9DQUxfS0VZID0gJ2ZhcS1uZXctJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZmFxU2VydmljZUNvbmZpZzogRmFxU2VydmljZUNvbmZpZyxcbiAgICAgICAgcHJpdmF0ZSBmaWxlc2VydmljZTogRmlsZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgY2FjaGVkSXRlbVN0b3JlOiBDYWNoZWRJdGVtU3RvcmUpIHtcbiAgICB9XG5cbiAgICBoYW5kbGUocmVxdWVzdDogR2V0RmFxUmVxdWVzdCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZEl0ZW1TdG9yZS5nZXRDYWNoZWQoXG4gICAgICAgICAgICByZXF1ZXN0Lmxhbmd1YWdlLFxuICAgICAgICAgICAgdGhpcy5GQVFfTE9DQUxfS0VZLFxuICAgICAgICAgICAgJ3R0bF8nICsgdGhpcy5GQVFfTE9DQUxfS0VZLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5mZXRjaEZyb21TZXJ2ZXIocmVxdWVzdCksXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmZldGNoRnJvbUZpbGUocmVxdWVzdC5sYW5ndWFnZSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZldGNoRnJvbVNlcnZlcihyZXF1ZXN0OiBHZXRGYXFSZXF1ZXN0KTogT2JzZXJ2YWJsZTxGYXE+IHtcbiAgICAgICAgY29uc3QgYXBpUmVxdWVzdDogUmVxdWVzdCA9IG5ldyBSZXF1ZXN0LkJ1aWxkZXIoKVxuICAgICAgICAgICAgLndpdGhUeXBlKEh0dHBSZXF1ZXN0VHlwZS5HRVQpXG4gICAgICAgICAgICAud2l0aEhvc3QocmVxdWVzdC5mYXFVcmwpXG4gICAgICAgICAgICAud2l0aFBhdGgoJy9mYXEtJyArIHJlcXVlc3QubGFuZ3VhZ2UgKyAnLmpzb24nKVxuICAgICAgICAgICAgLndpdGhCZWFyZXJUb2tlbihmYWxzZSlcbiAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuZmV0Y2goYXBpUmVxdWVzdClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3A7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5LnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gcmVzcG9uc2UuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZldGNoRnJvbUZpbGUobGFuZ3VhZ2U6IHN0cmluZyk6IE9ic2VydmFibGU8RmFxPiB7XG4gICAgICAgIGNvbnN0IGRpciA9IFBhdGguZ2V0QXNzZXRQYXRoKCkgKyB0aGlzLmZhcVNlcnZpY2VDb25maWcuZmFxQ29uZmlnRGlyUGF0aDtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuRkFRX0ZJTEVfS0VZX1BSRUZJWCArIGxhbmd1YWdlICsgJy5qc29uJztcblxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmZpbGVzZXJ2aWNlLnJlYWRGaWxlRnJvbUFzc2V0cyhkaXIuY29uY2F0KCcvJywgZmlsZSkpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChmaWxlY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoZmlsZWNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuXG59XG4iXX0=