import { HttpRequestType, Request } from '../../api';
import { from } from 'rxjs';
import { CachedItemRequestSourceFrom } from '../../key-value-store';
import { Path } from '../../util/file/util/path';
import { map } from 'rxjs/operators';
var GetFormHandler = /** @class */ (function () {
    function GetFormHandler(apiService, formServiceConfig, fileService, cachedItemStore) {
        this.apiService = apiService;
        this.formServiceConfig = formServiceConfig;
        this.fileService = fileService;
        this.cachedItemStore = cachedItemStore;
        this.FORM_FILE_KEY_PREFIX = 'form-';
        this.FORM_LOCAL_KEY = 'form-';
        this.GET_FORM_DETAILS_ENDPOINT = '/read';
    }
    GetFormHandler.getIdForRequest = function (request) {
        var id = request.type + "_" + request.subType + "_" + request.action;
        if (request.rootOrgId && request.rootOrgId !== '*') {
            id += ('_' + request.rootOrgId);
        }
        if (request.framework) {
            id += ('_' + request.framework);
        }
        if (request.component) {
            id += ('_' + request.component);
        }
        return id;
    };
    GetFormHandler.prototype.handle = function (request) {
        var _this = this;
        return this.cachedItemStore[request.from === CachedItemRequestSourceFrom.SERVER ? 'get' : 'getCached'](GetFormHandler.getIdForRequest(request), this.FORM_LOCAL_KEY, 'ttl_' + this.FORM_LOCAL_KEY, function () { return _this.fetchFormServer(request); }, function () { return _this.fetchFromFile(request); });
    };
    GetFormHandler.prototype.fetchFormServer = function (request) {
        var apiRequest = new Request.Builder()
            .withType(HttpRequestType.POST)
            .withPath(this.formServiceConfig.apiPath + this.GET_FORM_DETAILS_ENDPOINT)
            .withBearerToken(true)
            .withHeaders({
            'X-Platform-Id': window.device.platform
        })
            .withBody({ request: request })
            .build();
        return this.apiService.fetch(apiRequest)
            .pipe(map(function (success) {
            return success.body.result;
        }));
    };
    GetFormHandler.prototype.fetchFromFile = function (request) {
        var dir = Path.getAssetPath() + this.formServiceConfig.formConfigDirPath;
        var file = this.FORM_FILE_KEY_PREFIX + GetFormHandler.getIdForRequest(request) + '.json';
        return from(this.fileService.readFileFromAssets(dir.concat('/', file))).pipe(map(function (filecontent) {
            var result = JSON.parse(filecontent);
            return (result.result);
        }));
    };
    return GetFormHandler;
}());
export { GetFormHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZvcm0taGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtL2hhbmRsZS9nZXQtZm9ybS1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0MsZUFBZSxFQUFFLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsRixPQUFPLEVBQUMsSUFBSSxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBQywyQkFBMkIsRUFBa0IsTUFBTSx1QkFBdUIsQ0FBQztBQUVuRixPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDL0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DO0lBS0ksd0JBQ1ksVUFBc0IsRUFDdEIsaUJBQW9DLEVBQ3BDLFdBQXdCLEVBQ3hCLGVBQWdDO1FBSGhDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFSM0IseUJBQW9CLEdBQUcsT0FBTyxDQUFDO1FBQy9CLG1CQUFjLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLDhCQUF5QixHQUFHLE9BQU8sQ0FBQztJQVFyRCxDQUFDO0lBRWMsOEJBQWUsR0FBOUIsVUFBK0IsT0FBb0I7UUFDL0MsSUFBSSxFQUFFLEdBQU0sT0FBTyxDQUFDLElBQUksU0FBSSxPQUFPLENBQUMsT0FBTyxTQUFJLE9BQU8sQ0FBQyxNQUFRLENBQUM7UUFFaEUsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssR0FBRyxFQUFFO1lBQ2hELEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkM7UUFFRCxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDbkIsRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNuQztRQUVELElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNuQixFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLE9BQW9CO1FBQTNCLGlCQVFDO1FBUEcsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssMkJBQTJCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUNsRyxjQUFjLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUN2QyxJQUFJLENBQUMsY0FBYyxFQUNuQixNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFDNUIsY0FBTSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQTdCLENBQTZCLEVBQ25DLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUEzQixDQUEyQixDQUNwQyxDQUFDO0lBQ04sQ0FBQztJQUVPLHdDQUFlLEdBQXZCLFVBQXdCLE9BQW9CO1FBQ3hDLElBQU0sVUFBVSxHQUFZLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTthQUM1QyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQzthQUM5QixRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUM7YUFDekUsZUFBZSxDQUFDLElBQUksQ0FBQzthQUNyQixXQUFXLENBQUM7WUFDVCxlQUFlLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRO1NBQzFDLENBQUM7YUFDRCxRQUFRLENBQUMsRUFBQyxPQUFPLFNBQUEsRUFBQyxDQUFDO2FBQ25CLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBcUMsVUFBVSxDQUFDO2FBQ3ZFLElBQUksQ0FDRCxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ1IsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ1YsQ0FBQztJQUVPLHNDQUFhLEdBQXJCLFVBQXNCLE9BQW9CO1FBQ3RDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUM7UUFDM0UsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBRTNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDeEUsR0FBRyxDQUFDLFVBQUMsV0FBbUI7WUFDcEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBdEVELElBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcGlSZXF1ZXN0SGFuZGxlciwgQXBpU2VydmljZSwgSHR0cFJlcXVlc3RUeXBlLCBSZXF1ZXN0fSBmcm9tICcuLi8uLi9hcGknO1xuaW1wb3J0IHtGb3JtUmVxdWVzdCwgRm9ybVNlcnZpY2VDb25maWd9IGZyb20gJy4uJztcbmltcG9ydCB7ZnJvbSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0NhY2hlZEl0ZW1SZXF1ZXN0U291cmNlRnJvbSwgQ2FjaGVkSXRlbVN0b3JlfSBmcm9tICcuLi8uLi9rZXktdmFsdWUtc3RvcmUnO1xuaW1wb3J0IHtGaWxlU2VydmljZX0gZnJvbSAnLi4vLi4vdXRpbC9maWxlL2RlZi9maWxlLXNlcnZpY2UnO1xuaW1wb3J0IHtQYXRofSBmcm9tICcuLi8uLi91dGlsL2ZpbGUvdXRpbC9wYXRoJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBHZXRGb3JtSGFuZGxlciBpbXBsZW1lbnRzIEFwaVJlcXVlc3RIYW5kbGVyPEZvcm1SZXF1ZXN0LCB7IFtrZXk6IHN0cmluZ106IHt9IH0+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IEZPUk1fRklMRV9LRVlfUFJFRklYID0gJ2Zvcm0tJztcbiAgICBwcml2YXRlIHJlYWRvbmx5IEZPUk1fTE9DQUxfS0VZID0gJ2Zvcm0tJztcbiAgICBwcml2YXRlIHJlYWRvbmx5IEdFVF9GT1JNX0RFVEFJTFNfRU5EUE9JTlQgPSAnL3JlYWQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmb3JtU2VydmljZUNvbmZpZzogRm9ybVNlcnZpY2VDb25maWcsXG4gICAgICAgIHByaXZhdGUgZmlsZVNlcnZpY2U6IEZpbGVTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGNhY2hlZEl0ZW1TdG9yZTogQ2FjaGVkSXRlbVN0b3JlXG4gICAgKSB7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0SWRGb3JSZXF1ZXN0KHJlcXVlc3Q6IEZvcm1SZXF1ZXN0KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGlkID0gYCR7cmVxdWVzdC50eXBlfV8ke3JlcXVlc3Quc3ViVHlwZX1fJHtyZXF1ZXN0LmFjdGlvbn1gO1xuXG4gICAgICAgIGlmIChyZXF1ZXN0LnJvb3RPcmdJZCAmJiByZXF1ZXN0LnJvb3RPcmdJZCAhPT0gJyonKSB7XG4gICAgICAgICAgICBpZCArPSAoJ18nICsgcmVxdWVzdC5yb290T3JnSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcXVlc3QuZnJhbWV3b3JrKSB7XG4gICAgICAgICAgICBpZCArPSAoJ18nICsgcmVxdWVzdC5mcmFtZXdvcmspO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcXVlc3QuY29tcG9uZW50KSB7XG4gICAgICAgICAgICBpZCArPSAoJ18nICsgcmVxdWVzdC5jb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cblxuICAgIGhhbmRsZShyZXF1ZXN0OiBGb3JtUmVxdWVzdCk6IE9ic2VydmFibGU8eyBba2V5OiBzdHJpbmddOiB7fSB9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZEl0ZW1TdG9yZVtyZXF1ZXN0LmZyb20gPT09IENhY2hlZEl0ZW1SZXF1ZXN0U291cmNlRnJvbS5TRVJWRVIgPyAnZ2V0JyA6ICdnZXRDYWNoZWQnXShcbiAgICAgICAgICAgIEdldEZvcm1IYW5kbGVyLmdldElkRm9yUmVxdWVzdChyZXF1ZXN0KSxcbiAgICAgICAgICAgIHRoaXMuRk9STV9MT0NBTF9LRVksXG4gICAgICAgICAgICAndHRsXycgKyB0aGlzLkZPUk1fTE9DQUxfS0VZLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5mZXRjaEZvcm1TZXJ2ZXIocmVxdWVzdCksXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmZldGNoRnJvbUZpbGUocmVxdWVzdClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZldGNoRm9ybVNlcnZlcihyZXF1ZXN0OiBGb3JtUmVxdWVzdCk6IE9ic2VydmFibGU8eyBba2V5OiBzdHJpbmddOiB7fSB9PiB7XG4gICAgICAgIGNvbnN0IGFwaVJlcXVlc3Q6IFJlcXVlc3QgPSBuZXcgUmVxdWVzdC5CdWlsZGVyKClcbiAgICAgICAgICAgIC53aXRoVHlwZShIdHRwUmVxdWVzdFR5cGUuUE9TVClcbiAgICAgICAgICAgIC53aXRoUGF0aCh0aGlzLmZvcm1TZXJ2aWNlQ29uZmlnLmFwaVBhdGggKyB0aGlzLkdFVF9GT1JNX0RFVEFJTFNfRU5EUE9JTlQpXG4gICAgICAgICAgICAud2l0aEJlYXJlclRva2VuKHRydWUpXG4gICAgICAgICAgICAud2l0aEhlYWRlcnMoe1xuICAgICAgICAgICAgICAgICdYLVBsYXRmb3JtLUlkJzogd2luZG93LmRldmljZS5wbGF0Zm9ybVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aXRoQm9keSh7cmVxdWVzdH0pXG4gICAgICAgICAgICAuYnVpbGQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5mZXRjaCA8eyByZXN1bHQ6IHsgW2tleTogc3RyaW5nXToge30gfSB9PihhcGlSZXF1ZXN0KVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzLmJvZHkucmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmV0Y2hGcm9tRmlsZShyZXF1ZXN0OiBGb3JtUmVxdWVzdCk6IE9ic2VydmFibGU8eyBba2V5OiBzdHJpbmddOiB7fSB9PiB7XG4gICAgICAgIGNvbnN0IGRpciA9IFBhdGguZ2V0QXNzZXRQYXRoKCkgKyB0aGlzLmZvcm1TZXJ2aWNlQ29uZmlnLmZvcm1Db25maWdEaXJQYXRoO1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5GT1JNX0ZJTEVfS0VZX1BSRUZJWCArIEdldEZvcm1IYW5kbGVyLmdldElkRm9yUmVxdWVzdChyZXF1ZXN0KSArICcuanNvbic7XG5cbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5maWxlU2VydmljZS5yZWFkRmlsZUZyb21Bc3NldHMoZGlyLmNvbmNhdCgnLycsIGZpbGUpKSkucGlwZShcbiAgICAgICAgICAgIG1hcCgoZmlsZWNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoZmlsZWNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0LnJlc3VsdCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==