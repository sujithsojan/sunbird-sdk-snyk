import { CachedItemRequestSourceFrom } from '../../key-value-store';
import { Path } from '../../util/file/util/path';
import { HttpRequestType, Request } from '../../api';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
var GetChannelDetailsHandler = /** @class */ (function () {
    function GetChannelDetailsHandler(apiService, frameworkServiceConfig, fileService, cachedItemStore) {
        this.apiService = apiService;
        this.frameworkServiceConfig = frameworkServiceConfig;
        this.fileService = fileService;
        this.cachedItemStore = cachedItemStore;
        this.CHANNEL_FILE_KEY_PREFIX = 'channel-';
        this.CHANNEL_LOCAL_KEY = 'channel-';
        this.GET_FRAMEWORK_DETAILS_ENDPOINT = '/read';
    }
    GetChannelDetailsHandler.prototype.handle = function (request) {
        var _this = this;
        return this.cachedItemStore[request.from === CachedItemRequestSourceFrom.SERVER ? 'get' : 'getCached'](request.channelId, this.CHANNEL_LOCAL_KEY, 'ttl_' + this.CHANNEL_LOCAL_KEY, function () { return _this.fetchFromServer(request); }, function () { return _this.fetchFromFile(request); }).pipe(map(function (channel) {
            if (channel.frameworks) {
                channel.frameworks.sort(function (i, j) { return i.name.localeCompare(j.name); });
            }
            return channel;
        }));
    };
    GetChannelDetailsHandler.prototype.fetchFromServer = function (request) {
        var apiRequest = new Request.Builder()
            .withType(HttpRequestType.GET)
            .withPath(this.frameworkServiceConfig.channelApiPath + this.GET_FRAMEWORK_DETAILS_ENDPOINT + '/' + request.channelId)
            .withBearerToken(true)
            .build();
        return this.apiService.fetch(apiRequest).pipe(map(function (response) {
            return response.body.result.channel;
        }));
    };
    GetChannelDetailsHandler.prototype.fetchFromFile = function (request) {
        var dir = Path.getAssetPath() + this.frameworkServiceConfig.channelConfigDirPath;
        var file = this.CHANNEL_FILE_KEY_PREFIX + request.channelId + '.json';
        return from(this.fileService.readFileFromAssets(dir.concat('/', file))).pipe(map(function (filecontent) {
            var result = JSON.parse(filecontent);
            return (result.result.channel);
        }));
    };
    return GetChannelDetailsHandler;
}());
export { GetChannelDetailsHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWNoYW5uZWwtZGV0YWlsLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXIvZ2V0LWNoYW5uZWwtZGV0YWlsLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLDJCQUEyQixFQUFrQixNQUFNLHVCQUF1QixDQUFDO0FBRW5GLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUUvQyxPQUFPLEVBQWdDLGVBQWUsRUFBRSxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEYsT0FBTyxFQUFDLElBQUksRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkM7SUFNSSxrQ0FBb0IsVUFBc0IsRUFDdEIsc0JBQThDLEVBQzlDLFdBQXdCLEVBQ3hCLGVBQWdDO1FBSGhDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFSbkMsNEJBQXVCLEdBQUcsVUFBVSxDQUFDO1FBQ3JDLHNCQUFpQixHQUFHLFVBQVUsQ0FBQztRQUMvQixtQ0FBOEIsR0FBRyxPQUFPLENBQUM7SUFPMUQsQ0FBQztJQUVELHlDQUFNLEdBQU4sVUFBTyxPQUE4QjtRQUFyQyxpQkFlQztRQWRHLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FDbEcsT0FBTyxDQUFDLFNBQVMsRUFDakIsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUMvQixjQUFNLE9BQUEsS0FBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBN0IsQ0FBNkIsRUFDbkMsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQTNCLENBQTJCLENBQ3BDLENBQUMsSUFBSSxDQUNGLEdBQUcsQ0FBQyxVQUFDLE9BQWdCO1lBQ2pCLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDcEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUM7YUFDbkU7WUFDRCxPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVPLGtEQUFlLEdBQXZCLFVBQXdCLE9BQThCO1FBQ2xELElBQU0sVUFBVSxHQUFZLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTthQUM1QyxRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQzthQUM3QixRQUFRLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsOEJBQThCLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDcEgsZUFBZSxDQUFDLElBQUksQ0FBQzthQUNyQixLQUFLLEVBQUUsQ0FBQztRQUViLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQW1DLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDM0UsR0FBRyxDQUFDLFVBQUMsUUFBUTtZQUNULE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0lBRU8sZ0RBQWEsR0FBckIsVUFBc0IsT0FBOEI7UUFDaEQsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQztRQUNuRixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsT0FBTyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFFeEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN4RSxHQUFHLENBQUMsVUFBQyxXQUFtQjtZQUNwQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0lBRUwsK0JBQUM7QUFBRCxDQUFDLEFBdkRELElBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDYWNoZWRJdGVtUmVxdWVzdFNvdXJjZUZyb20sIENhY2hlZEl0ZW1TdG9yZX0gZnJvbSAnLi4vLi4va2V5LXZhbHVlLXN0b3JlJztcbmltcG9ydCB7RmlsZVNlcnZpY2V9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS9kZWYvZmlsZS1zZXJ2aWNlJztcbmltcG9ydCB7UGF0aH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlL3V0aWwvcGF0aCc7XG5pbXBvcnQge0NoYW5uZWwsIENoYW5uZWxEZXRhaWxzUmVxdWVzdCwgRnJhbWV3b3JrU2VydmljZUNvbmZpZ30gZnJvbSAnLi4nO1xuaW1wb3J0IHtBcGlSZXF1ZXN0SGFuZGxlciwgQXBpU2VydmljZSwgSHR0cFJlcXVlc3RUeXBlLCBSZXF1ZXN0fSBmcm9tICcuLi8uLi9hcGknO1xuaW1wb3J0IHtmcm9tLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuZXhwb3J0IGNsYXNzIEdldENoYW5uZWxEZXRhaWxzSGFuZGxlciBpbXBsZW1lbnRzIEFwaVJlcXVlc3RIYW5kbGVyPENoYW5uZWxEZXRhaWxzUmVxdWVzdCwgQ2hhbm5lbD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgQ0hBTk5FTF9GSUxFX0tFWV9QUkVGSVggPSAnY2hhbm5lbC0nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgQ0hBTk5FTF9MT0NBTF9LRVkgPSAnY2hhbm5lbC0nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgR0VUX0ZSQU1FV09SS19ERVRBSUxTX0VORFBPSU5UID0gJy9yZWFkJztcblxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZnJhbWV3b3JrU2VydmljZUNvbmZpZzogRnJhbWV3b3JrU2VydmljZUNvbmZpZyxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGZpbGVTZXJ2aWNlOiBGaWxlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNhY2hlZEl0ZW1TdG9yZTogQ2FjaGVkSXRlbVN0b3JlKSB7XG4gICAgfVxuXG4gICAgaGFuZGxlKHJlcXVlc3Q6IENoYW5uZWxEZXRhaWxzUmVxdWVzdCk6IE9ic2VydmFibGU8Q2hhbm5lbD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRJdGVtU3RvcmVbcmVxdWVzdC5mcm9tID09PSBDYWNoZWRJdGVtUmVxdWVzdFNvdXJjZUZyb20uU0VSVkVSID8gJ2dldCcgOiAnZ2V0Q2FjaGVkJ10oXG4gICAgICAgICAgICByZXF1ZXN0LmNoYW5uZWxJZCxcbiAgICAgICAgICAgIHRoaXMuQ0hBTk5FTF9MT0NBTF9LRVksXG4gICAgICAgICAgICAndHRsXycgKyB0aGlzLkNIQU5ORUxfTE9DQUxfS0VZLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5mZXRjaEZyb21TZXJ2ZXIocmVxdWVzdCksXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmZldGNoRnJvbUZpbGUocmVxdWVzdClcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgbWFwKChjaGFubmVsOiBDaGFubmVsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5uZWwuZnJhbWV3b3Jrcykge1xuICAgICAgICAgICAgICAgICAgICBjaGFubmVsLmZyYW1ld29ya3Muc29ydCgoaSwgaikgPT4gaS5uYW1lLmxvY2FsZUNvbXBhcmUoai5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFubmVsO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZldGNoRnJvbVNlcnZlcihyZXF1ZXN0OiBDaGFubmVsRGV0YWlsc1JlcXVlc3QpOiBPYnNlcnZhYmxlPENoYW5uZWw+IHtcbiAgICAgICAgY29uc3QgYXBpUmVxdWVzdDogUmVxdWVzdCA9IG5ldyBSZXF1ZXN0LkJ1aWxkZXIoKVxuICAgICAgICAgICAgLndpdGhUeXBlKEh0dHBSZXF1ZXN0VHlwZS5HRVQpXG4gICAgICAgICAgICAud2l0aFBhdGgodGhpcy5mcmFtZXdvcmtTZXJ2aWNlQ29uZmlnLmNoYW5uZWxBcGlQYXRoICsgdGhpcy5HRVRfRlJBTUVXT1JLX0RFVEFJTFNfRU5EUE9JTlQgKyAnLycgKyByZXF1ZXN0LmNoYW5uZWxJZClcbiAgICAgICAgICAgIC53aXRoQmVhcmVyVG9rZW4odHJ1ZSlcbiAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuZmV0Y2g8eyByZXN1bHQ6IHsgY2hhbm5lbDogQ2hhbm5lbCB9IH0+KGFwaVJlcXVlc3QpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJvZHkucmVzdWx0LmNoYW5uZWw7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmV0Y2hGcm9tRmlsZShyZXF1ZXN0OiBDaGFubmVsRGV0YWlsc1JlcXVlc3QpOiBPYnNlcnZhYmxlPENoYW5uZWw+IHtcbiAgICAgICAgY29uc3QgZGlyID0gUGF0aC5nZXRBc3NldFBhdGgoKSArIHRoaXMuZnJhbWV3b3JrU2VydmljZUNvbmZpZy5jaGFubmVsQ29uZmlnRGlyUGF0aDtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuQ0hBTk5FTF9GSUxFX0tFWV9QUkVGSVggKyByZXF1ZXN0LmNoYW5uZWxJZCArICcuanNvbic7XG5cbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5maWxlU2VydmljZS5yZWFkRmlsZUZyb21Bc3NldHMoZGlyLmNvbmNhdCgnLycsIGZpbGUpKSkucGlwZShcbiAgICAgICAgICAgIG1hcCgoZmlsZWNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoZmlsZWNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0LnJlc3VsdC5jaGFubmVsKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG59XG4iXX0=