import { CachedItemRequestSourceFrom } from '../../key-value-store';
import { Path } from '../../util/file/util/path';
import { HttpRequestType, Request } from '../../api';
import { FrameworkMapper } from '../util/framework-mapper';
import { defer, from, iif } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
var GetFrameworkDetailsHandler = /** @class */ (function () {
    function GetFrameworkDetailsHandler(frameworkService, apiService, frameworkServiceConfig, fileService, cachedItemStore) {
        this.frameworkService = frameworkService;
        this.apiService = apiService;
        this.frameworkServiceConfig = frameworkServiceConfig;
        this.fileService = fileService;
        this.cachedItemStore = cachedItemStore;
        this.FRAMEWORK_FILE_KEY_PREFIX = 'framework-';
        this.FRAMEWORK_LOCAL_KEY = 'framework-';
        this.GET_FRAMEWORK_DETAILS_ENDPOINT = '/read';
    }
    GetFrameworkDetailsHandler.prototype.handle = function (request) {
        var _this = this;
        return iif(function () { return !!request.frameworkId; }, defer(function () {
            return _this.cachedItemStore[request.from === CachedItemRequestSourceFrom.SERVER ? 'get' : 'getCached'](request.frameworkId, _this.FRAMEWORK_LOCAL_KEY, 'ttl_' + _this.FRAMEWORK_LOCAL_KEY, function () { return _this.fetchFromServer(request); }, function () { return _this.fetchFromFile(request); });
        }), defer(function () {
            return _this.frameworkService.getDefaultChannelDetails().pipe(mergeMap(function (channel) {
                return _this.frameworkService.getFrameworkDetails({
                    from: request.from,
                    frameworkId: channel.defaultFramework,
                    requiredCategories: request.requiredCategories
                });
            }));
        }));
    };
    GetFrameworkDetailsHandler.prototype.fetchFromServer = function (request) {
        var apiRequest = new Request.Builder()
            .withType(HttpRequestType.GET)
            .withPath(this.frameworkServiceConfig.frameworkApiPath + this.GET_FRAMEWORK_DETAILS_ENDPOINT + '/' + request.frameworkId)
            .withParameters({ categories: request.requiredCategories.join(',') })
            .withBearerToken(true)
            .build();
        return this.apiService.fetch(apiRequest).pipe(map(function (response) {
            return response.body.result.framework;
        }), map(function (framework) {
            return FrameworkMapper.prepareFrameworkCategoryAssociations(framework);
        }));
    };
    GetFrameworkDetailsHandler.prototype.fetchFromFile = function (request) {
        var dir = Path.getAssetPath() + this.frameworkServiceConfig.frameworkConfigDirPath;
        var file = this.FRAMEWORK_FILE_KEY_PREFIX + request.frameworkId + '.json';
        return from(this.fileService.readFileFromAssets(dir.concat('/', file))).pipe(map(function (filecontent) {
            var result = JSON.parse(filecontent);
            return result.result.framework;
        }), map(function (framework) {
            return FrameworkMapper.prepareFrameworkCategoryAssociations(framework);
        }));
    };
    return GetFrameworkDetailsHandler;
}());
export { GetFrameworkDetailsHandler };
//# sourceMappingURL=data:application/json;base64,