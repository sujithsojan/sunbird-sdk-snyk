import { DbConstants } from '../../db';
export var GroupProfileEntry;
(function (GroupProfileEntry) {
    GroupProfileEntry.TABLE_NAME = 'group_profile';
    GroupProfileEntry._ID = '_id';
    GroupProfileEntry.COLUMN_NAME_UID = 'uid';
    GroupProfileEntry.COLUMN_NAME_GID = 'gid';
    GroupProfileEntry.COLUMN_NAME_EPOCH_TIMESTAMP = 'epoch_timestamp';
    GroupProfileEntry.getCreateEntry = function () {
        return 'CREATE TABLE IF NOT EXISTS ' + GroupProfileEntry.TABLE_NAME + ' (' +
            GroupProfileEntry._ID + ' INTEGER PRIMARY KEY' + DbConstants.COMMA_SEP +
            GroupProfileEntry.COLUMN_NAME_GID + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            GroupProfileEntry.COLUMN_NAME_UID + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            GroupProfileEntry.COLUMN_NAME_EPOCH_TIMESTAMP + DbConstants.SPACE + DbConstants.INT_TYPE + DbConstants.COMMA_SEP +
            'UNIQUE (' + GroupProfileEntry.COLUMN_NAME_GID + DbConstants.COMMA_SEP + GroupProfileEntry.COLUMN_NAME_UID + ') ON CONFLICT REPLACE' +
            ')';
    };
    GroupProfileEntry.deleteTable = function () {
        return 'DROP TABLE IF EXISTS' + GroupProfileEntry.TABLE_NAME;
    };
})(GroupProfileEntry || (GroupProfileEntry = {}));
export var GroupEntry;
(function (GroupEntry) {
    GroupEntry.TABLE_NAME = 'groups';
    GroupEntry._ID = '_id';
    GroupEntry.COLUMN_NAME_GID = 'gid';
    GroupEntry.COLUMN_NAME_NAME = 'name';
    GroupEntry.COLUMN_NAME_SYLLABUS = 'syllabus';
    GroupEntry.COLUMN_NAME_GRADE = 'grade';
    GroupEntry.COLUMN_NAME_GRADE_VALUE = 'grade_value';
    GroupEntry.COLUMN_NAME_CREATED_AT = 'created_at';
    GroupEntry.COLUMN_NAME_UPDATED_AT = 'updated_at';
    GroupEntry.getCreateEntry = function () {
        return 'CREATE TABLE IF NOT EXISTS ' + GroupEntry.TABLE_NAME + ' (' +
            GroupEntry._ID + ' INTEGER PRIMARY KEY' + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_GID + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_NAME + DbConstants.SPACE + DbConstants.TEXT_TYPE + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_SYLLABUS + DbConstants.SPACE + DbConstants.TEXT_TYPE + ' DEFAULT ""' + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_GRADE + DbConstants.SPACE + DbConstants.TEXT_TYPE + ' DEFAULT ""' + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_GRADE_VALUE + DbConstants.SPACE + DbConstants.TEXT_TYPE + ' DEFAULT ""' + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_CREATED_AT + ' INTEGER' + DbConstants.COMMA_SEP +
            GroupEntry.COLUMN_NAME_UPDATED_AT + ' INTEGER' + ' )';
    };
    GroupEntry.deleteTable = function () {
        return 'DROP TABLE IF EXISTS' + GroupEntry.TABLE_NAME;
    };
})(GroupEntry || (GroupEntry = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dyb3VwLWRlcHJlY2F0ZWQvZGIvc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFckMsTUFBTSxLQUFXLGlCQUFpQixDQTBCakM7QUExQkQsV0FBaUIsaUJBQWlCO0lBRWpCLDRCQUFVLEdBQUcsZUFBZSxDQUFDO0lBQzdCLHFCQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ1osaUNBQWUsR0FBRyxLQUFLLENBQUM7SUFDeEIsaUNBQWUsR0FBRyxLQUFLLENBQUM7SUFDeEIsNkNBQTJCLEdBQUcsaUJBQWlCLENBQUM7SUFPaEQsZ0NBQWMsR0FBbUI7UUFDMUMsT0FBTyw2QkFBNkIsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsSUFBSTtZQUN0RSxpQkFBaUIsQ0FBQyxHQUFHLEdBQUcsc0JBQXNCLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDdEUsa0JBQUEsZUFBZSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUztZQUNuRixrQkFBQSxlQUFlLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ25GLGtCQUFBLDJCQUEyQixHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUztZQUM5RixVQUFVLEdBQUcsa0JBQUEsZUFBZSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsa0JBQUEsZUFBZSxHQUFHLHVCQUF1QjtZQUNoRyxHQUFHLENBQUM7SUFDWixDQUFDLENBQUM7SUFDVyw2QkFBVyxHQUFtQjtRQUN2QyxPQUFPLHNCQUFzQixHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztJQUVqRSxDQUFDLENBQUM7QUFDTixDQUFDLEVBMUJnQixpQkFBaUIsS0FBakIsaUJBQWlCLFFBMEJqQztBQUVELE1BQU0sS0FBVyxVQUFVLENBcUMxQjtBQXJDRCxXQUFpQixVQUFVO0lBRVYscUJBQVUsR0FBRyxRQUFRLENBQUM7SUFDdEIsY0FBRyxHQUFHLEtBQUssQ0FBQztJQUNaLDBCQUFlLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLDJCQUFnQixHQUFHLE1BQU0sQ0FBQztJQUMxQiwrQkFBb0IsR0FBRyxVQUFVLENBQUM7SUFDbEMsNEJBQWlCLEdBQUcsT0FBTyxDQUFDO0lBQzVCLGtDQUF1QixHQUFHLGFBQWEsQ0FBQztJQUN4QyxpQ0FBc0IsR0FBRyxZQUFZLENBQUM7SUFDdEMsaUNBQXNCLEdBQUcsWUFBWSxDQUFDO0lBWXRDLHlCQUFjLEdBQW1CO1FBQzFDLE9BQU8sNkJBQTZCLEdBQUcsVUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJO1lBQy9ELFVBQVUsQ0FBQyxHQUFHLEdBQUcsc0JBQXNCLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDL0QsV0FBQSxlQUFlLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ25GLFdBQUEsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ3BGLFdBQUEsb0JBQW9CLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUyxHQUFHLGFBQWEsR0FBRyxXQUFXLENBQUMsU0FBUztZQUN4RyxXQUFBLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFNBQVMsR0FBRyxhQUFhLEdBQUcsV0FBVyxDQUFDLFNBQVM7WUFDckcsV0FBQSx1QkFBdUIsR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsYUFBYSxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQzNHLFdBQUEsc0JBQXNCLEdBQUcsVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQzNELFdBQUEsc0JBQXNCLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNuRCxDQUFDLENBQUM7SUFDVyxzQkFBVyxHQUFtQjtRQUN2QyxPQUFPLHNCQUFzQixHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDMUQsQ0FBQyxDQUFDO0FBRU4sQ0FBQyxFQXJDZ0IsVUFBVSxLQUFWLFVBQVUsUUFxQzFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYkNvbnN0YW50c30gZnJvbSAnLi4vLi4vZGInO1xuXG5leHBvcnQgbmFtZXNwYWNlIEdyb3VwUHJvZmlsZUVudHJ5IHtcblxuICAgIGV4cG9ydCBjb25zdCBUQUJMRV9OQU1FID0gJ2dyb3VwX3Byb2ZpbGUnO1xuICAgIGV4cG9ydCBjb25zdCBfSUQgPSAnX2lkJztcbiAgICBleHBvcnQgY29uc3QgQ09MVU1OX05BTUVfVUlEID0gJ3VpZCc7XG4gICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX0dJRCA9ICdnaWQnO1xuICAgIGV4cG9ydCBjb25zdCBDT0xVTU5fTkFNRV9FUE9DSF9USU1FU1RBTVAgPSAnZXBvY2hfdGltZXN0YW1wJztcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2NoZW1hTWFwIHtcbiAgICAgICAgW0NPTFVNTl9OQU1FX1VJRF06IHN0cmluZztcbiAgICAgICAgW0NPTFVNTl9OQU1FX0dJRF06IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgY29uc3QgZ2V0Q3JlYXRlRW50cnk6ICgoKSA9PiBzdHJpbmcpID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICcgKyBHcm91cFByb2ZpbGVFbnRyeS5UQUJMRV9OQU1FICsgJyAoJyArXG4gICAgICAgICAgICBHcm91cFByb2ZpbGVFbnRyeS5fSUQgKyAnIElOVEVHRVIgUFJJTUFSWSBLRVknICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICAgICAgIENPTFVNTl9OQU1FX0dJRCArIERiQ29uc3RhbnRzLlNQQUNFICsgRGJDb25zdGFudHMuVEVYVF9UWVBFICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICAgICAgIENPTFVNTl9OQU1FX1VJRCArIERiQ29uc3RhbnRzLlNQQUNFICsgRGJDb25zdGFudHMuVEVYVF9UWVBFICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICAgICAgIENPTFVNTl9OQU1FX0VQT0NIX1RJTUVTVEFNUCArIERiQ29uc3RhbnRzLlNQQUNFICsgRGJDb25zdGFudHMuSU5UX1RZUEUgKyBEYkNvbnN0YW50cy5DT01NQV9TRVAgK1xuICAgICAgICAgICAgJ1VOSVFVRSAoJyArIENPTFVNTl9OQU1FX0dJRCArIERiQ29uc3RhbnRzLkNPTU1BX1NFUCArIENPTFVNTl9OQU1FX1VJRCArICcpIE9OIENPTkZMSUNUIFJFUExBQ0UnICtcbiAgICAgICAgICAgICcpJztcbiAgICB9O1xuICAgIGV4cG9ydCBjb25zdCBkZWxldGVUYWJsZTogKCgpID0+IHN0cmluZykgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAnRFJPUCBUQUJMRSBJRiBFWElTVFMnICsgR3JvdXBQcm9maWxlRW50cnkuVEFCTEVfTkFNRTtcblxuICAgIH07XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgR3JvdXBFbnRyeSB7XG5cbiAgICBleHBvcnQgY29uc3QgVEFCTEVfTkFNRSA9ICdncm91cHMnO1xuICAgIGV4cG9ydCBjb25zdCBfSUQgPSAnX2lkJztcbiAgICBleHBvcnQgY29uc3QgQ09MVU1OX05BTUVfR0lEID0gJ2dpZCc7XG4gICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX05BTUUgPSAnbmFtZSc7XG4gICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX1NZTExBQlVTID0gJ3N5bGxhYnVzJztcbiAgICBleHBvcnQgY29uc3QgQ09MVU1OX05BTUVfR1JBREUgPSAnZ3JhZGUnO1xuICAgIGV4cG9ydCBjb25zdCBDT0xVTU5fTkFNRV9HUkFERV9WQUxVRSA9ICdncmFkZV92YWx1ZSc7XG4gICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX0NSRUFURURfQVQgPSAnY3JlYXRlZF9hdCc7XG4gICAgZXhwb3J0IGNvbnN0IENPTFVNTl9OQU1FX1VQREFURURfQVQgPSAndXBkYXRlZF9hdCc7XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNjaGVtYU1hcCB7XG4gICAgICAgIFtDT0xVTU5fTkFNRV9HSURdOiBzdHJpbmc7XG4gICAgICAgIFtDT0xVTU5fTkFNRV9OQU1FXTogc3RyaW5nO1xuICAgICAgICBbQ09MVU1OX05BTUVfU1lMTEFCVVNdOiBzdHJpbmc7XG4gICAgICAgIFtDT0xVTU5fTkFNRV9HUkFERV06IHN0cmluZztcbiAgICAgICAgW0NPTFVNTl9OQU1FX0dSQURFX1ZBTFVFXTogc3RyaW5nO1xuICAgICAgICBbQ09MVU1OX05BTUVfQ1JFQVRFRF9BVF06IG51bWJlcjtcbiAgICAgICAgW0NPTFVNTl9OQU1FX1VQREFURURfQVRdOiBudW1iZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGNvbnN0IGdldENyZWF0ZUVudHJ5OiAoKCkgPT4gc3RyaW5nKSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAnICsgR3JvdXBFbnRyeS5UQUJMRV9OQU1FICsgJyAoJyArXG4gICAgICAgICAgICBHcm91cEVudHJ5Ll9JRCArICcgSU5URUdFUiBQUklNQVJZIEtFWScgKyBEYkNvbnN0YW50cy5DT01NQV9TRVAgK1xuICAgICAgICAgICAgQ09MVU1OX05BTUVfR0lEICsgRGJDb25zdGFudHMuU1BBQ0UgKyBEYkNvbnN0YW50cy5URVhUX1RZUEUgKyBEYkNvbnN0YW50cy5DT01NQV9TRVAgK1xuICAgICAgICAgICAgQ09MVU1OX05BTUVfTkFNRSArIERiQ29uc3RhbnRzLlNQQUNFICsgRGJDb25zdGFudHMuVEVYVF9UWVBFICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICAgICAgIENPTFVNTl9OQU1FX1NZTExBQlVTICsgRGJDb25zdGFudHMuU1BBQ0UgKyBEYkNvbnN0YW50cy5URVhUX1RZUEUgKyAnIERFRkFVTFQgXCJcIicgKyBEYkNvbnN0YW50cy5DT01NQV9TRVAgK1xuICAgICAgICAgICAgQ09MVU1OX05BTUVfR1JBREUgKyBEYkNvbnN0YW50cy5TUEFDRSArIERiQ29uc3RhbnRzLlRFWFRfVFlQRSArICcgREVGQVVMVCBcIlwiJyArIERiQ29uc3RhbnRzLkNPTU1BX1NFUCArXG4gICAgICAgICAgICBDT0xVTU5fTkFNRV9HUkFERV9WQUxVRSArIERiQ29uc3RhbnRzLlNQQUNFICsgRGJDb25zdGFudHMuVEVYVF9UWVBFICsgJyBERUZBVUxUIFwiXCInICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICAgICAgIENPTFVNTl9OQU1FX0NSRUFURURfQVQgKyAnIElOVEVHRVInICsgRGJDb25zdGFudHMuQ09NTUFfU0VQICtcbiAgICAgICAgICAgIENPTFVNTl9OQU1FX1VQREFURURfQVQgKyAnIElOVEVHRVInICsgJyApJztcbiAgICB9O1xuICAgIGV4cG9ydCBjb25zdCBkZWxldGVUYWJsZTogKCgpID0+IHN0cmluZykgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAnRFJPUCBUQUJMRSBJRiBFWElTVFMnICsgR3JvdXBFbnRyeS5UQUJMRV9OQU1FO1xuICAgIH07XG5cbn1cblxuIl19