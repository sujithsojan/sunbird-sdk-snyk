var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Container, inject, injectable } from 'inversify';
import { CsInjectionTokens, InjectionTokens } from '../../injection-tokens';
import { CachedItemRequestSourceFrom } from '../../key-value-store';
import { GroupActivityServiceImpl } from './group-activity-service-impl';
var GroupServiceImpl = /** @class */ (function () {
    function GroupServiceImpl(container, cachedItemStore) {
        this.container = container;
        this.cachedItemStore = cachedItemStore;
    }
    GroupServiceImpl_1 = GroupServiceImpl;
    Object.defineProperty(GroupServiceImpl.prototype, "activityService", {
        get: function () {
            if (!this._groupActivityService) {
                this._groupActivityService = new GroupActivityServiceImpl(this.groupServiceDelegate.activityService, this.cachedItemStore);
            }
            return this._groupActivityService;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GroupServiceImpl.prototype, "groupServiceDelegate", {
        get: function () {
            return this.container.get(CsInjectionTokens.GROUP_SERVICE);
        },
        enumerable: false,
        configurable: true
    });
    GroupServiceImpl.prototype.create = function (request) {
        return this.groupServiceDelegate.create(request);
    };
    GroupServiceImpl.prototype.getById = function (request) {
        var _this = this;
        return this.cachedItemStore[request.from === CachedItemRequestSourceFrom.SERVER ? 'get' : 'getCached'](request.id + "-" + request.userId +
            ("" + ((request.options && request.options.includeMembers) ? '-includeMembers:' + request.options.includeMembers : '')) +
            ("" + ((request.options && request.options.includeActivities) ? '-includeActivities:' + request.options.includeActivities : '')) +
            ("" + ((request.options && request.options.groupActivities) ? '-groupActivities:' + request.options.groupActivities : '')), GroupServiceImpl_1.GROUP_LOCAL_KEY, 'ttl_' + GroupServiceImpl_1.GROUP_LOCAL_KEY, function () { return _this.groupServiceDelegate.getById(request.id, request.options); });
    };
    GroupServiceImpl.prototype.search = function (_a) {
        var _this = this;
        var request = _a.request, from = _a.from;
        return this.cachedItemStore[from === CachedItemRequestSourceFrom.SERVER ? 'get' : 'getCached']("" + request.filters.userId, GroupServiceImpl_1.GROUP_SEARCH_LOCAL_KEY, 'ttl_' + GroupServiceImpl_1.GROUP_SEARCH_LOCAL_KEY, function () { return _this.groupServiceDelegate.search(request); });
    };
    GroupServiceImpl.prototype.updateById = function (request) {
        return this.groupServiceDelegate.updateById(request.id, request.updateRequest);
    };
    GroupServiceImpl.prototype.deleteById = function (request) {
        return this.groupServiceDelegate.deleteById(request.id);
    };
    GroupServiceImpl.prototype.addMembers = function (request) {
        return this.groupServiceDelegate.addMembers(request.groupId, request.addMembersRequest);
    };
    GroupServiceImpl.prototype.updateMembers = function (request) {
        return this.groupServiceDelegate.updateMembers(request.groupId, request.updateMembersRequest);
    };
    GroupServiceImpl.prototype.removeMembers = function (request) {
        return this.groupServiceDelegate.removeMembers(request.groupId, request.removeMembersRequest);
    };
    GroupServiceImpl.prototype.addActivities = function (request) {
        return this.groupServiceDelegate.addActivities(request.groupId, request.addActivitiesRequest);
    };
    GroupServiceImpl.prototype.updateActivities = function (request) {
        return this.groupServiceDelegate.updateActivities(request.groupId, request.updateActivitiesRequest);
    };
    GroupServiceImpl.prototype.removeActivities = function (request) {
        return this.groupServiceDelegate.removeActivities(request.groupId, request.removeActivitiesRequest);
    };
    GroupServiceImpl.prototype.getSupportedActivities = function () {
        return this.groupServiceDelegate.getSupportedActivities();
    };
    GroupServiceImpl.prototype.suspendById = function (request) {
        return this.groupServiceDelegate.suspendById(request.id);
    };
    GroupServiceImpl.prototype.reactivateById = function (request) {
        return this.groupServiceDelegate.reactivateById(request.id);
    };
    GroupServiceImpl.prototype.updateGroupGuidelines = function (request) {
        return this.groupServiceDelegate.updateGroupGuidelines(request);
    };
    var GroupServiceImpl_1;
    GroupServiceImpl.GROUP_LOCAL_KEY = 'GROUP-';
    GroupServiceImpl.GROUP_SEARCH_LOCAL_KEY = 'GROUP_SEARCH-';
    GroupServiceImpl = GroupServiceImpl_1 = __decorate([
        injectable(),
        __param(0, inject(InjectionTokens.CONTAINER)),
        __param(1, inject(InjectionTokens.CACHED_ITEM_STORE)),
        __metadata("design:paramtypes", [Container, Object])
    ], GroupServiceImpl);
    return GroupServiceImpl;
}());
export { GroupServiceImpl };
//# sourceMappingURL=data:application/json;base64,