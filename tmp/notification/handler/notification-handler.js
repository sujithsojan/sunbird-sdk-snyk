import { NotificationStatus } from '..';
import { NotificationEntry } from '../db/schema';
var NotificationHandler = /** @class */ (function () {
    function NotificationHandler() {
    }
    NotificationHandler.constructNotificationDBModel = function (notification) {
        return {
            message_id: notification.id,
            expiry_time: notification.expiry,
            display_time: notification.displayTime,
            received_at: Date.now(),
            notification_json: JSON.stringify(notification),
            is_read: notification.isRead
        };
    };
    NotificationHandler.getFilterForNotification = function (criteria) {
        var selection;
        var selecttionArgs;
        switch (criteria.notificationStatus) {
            case NotificationStatus.ALL:
                selection = NotificationEntry.COLUMN_NAME_NOTIFICATION_DISPLAY_TIME + " <= ?\n                        AND " + NotificationEntry.COLUMN_NAME_EXPIRY_TIME + " > ?";
                selecttionArgs = [Date.now().toString(), Date.now().toString()];
                break;
            case NotificationStatus.UNREAD:
                selection = NotificationEntry.COLUMN_NAME_NOTIFICATION_DISPLAY_TIME + " <= ?\n                        AND " + NotificationEntry.COLUMN_NAME_EXPIRY_TIME + " > ? AND\n                        AND " + NotificationEntry.COLUMN_NAME_IS_READ + " > ?";
                selecttionArgs = [Date.now().toString(), Date.now().toString(), 0];
                break;
            case NotificationStatus.READ:
            default:
                selection = NotificationEntry.COLUMN_NAME_NOTIFICATION_DISPLAY_TIME + " <= ?\n                        AND " + NotificationEntry.COLUMN_NAME_EXPIRY_TIME + " > ?\n                        AND " + NotificationEntry.COLUMN_NAME_IS_READ + " > ?";
                selecttionArgs = [Date.now().toString(), Date.now().toString(), 1];
                break;
        }
        return {
            table: NotificationEntry.TABLE_NAME,
            // selection: selection,
            // selectionArgs: selecttionArgs,
            orderBy: NotificationEntry.COLUMN_NAME_NOTIFICATION_RECEIVED_AT + " desc"
        };
    };
    return NotificationHandler;
}());
export { NotificationHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm90aWZpY2F0aW9uL2hhbmRsZXIvbm90aWZpY2F0aW9uLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEyQyxrQkFBa0IsRUFBQyxNQUFNLElBQUksQ0FBQztBQUNoRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFL0M7SUFBQTtJQTRDQSxDQUFDO0lBM0NpQixnREFBNEIsR0FBMUMsVUFBMkMsWUFBMEI7UUFDakUsT0FBTztZQUNILFVBQVUsRUFBRSxZQUFZLENBQUMsRUFBWTtZQUNyQyxXQUFXLEVBQUUsWUFBWSxDQUFDLE1BQU07WUFDaEMsWUFBWSxFQUFFLFlBQVksQ0FBQyxXQUFXO1lBQ3RDLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3ZCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1lBQy9DLE9BQU8sRUFBRSxZQUFZLENBQUMsTUFBTTtTQUMvQixDQUFDO0lBQ04sQ0FBQztJQUVhLDRDQUF3QixHQUF0QyxVQUF1QyxRQUFvQztRQUN2RSxJQUFJLFNBQVMsQ0FBQztRQUNkLElBQUksY0FBYyxDQUFDO1FBQ25CLFFBQVEsUUFBUSxDQUFDLGtCQUFrQixFQUFFO1lBQ2pDLEtBQUssa0JBQWtCLENBQUMsR0FBRztnQkFDdkIsU0FBUyxHQUFNLGlCQUFpQixDQUFDLHFDQUFxQywyQ0FDeEQsaUJBQWlCLENBQUMsdUJBQXVCLFNBQU0sQ0FBQztnQkFDOUQsY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRSxNQUFNO1lBQ1YsS0FBSyxrQkFBa0IsQ0FBQyxNQUFNO2dCQUMxQixTQUFTLEdBQU0saUJBQWlCLENBQUMscUNBQXFDLDJDQUN4RCxpQkFBaUIsQ0FBQyx1QkFBdUIsOENBQ3pDLGlCQUFpQixDQUFDLG1CQUFtQixTQUFNLENBQUM7Z0JBQzFELGNBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLE1BQU07WUFDVixLQUFLLGtCQUFrQixDQUFDLElBQUksQ0FBRTtZQUM5QjtnQkFDSSxTQUFTLEdBQU0saUJBQWlCLENBQUMscUNBQXFDLDJDQUN4RCxpQkFBaUIsQ0FBQyx1QkFBdUIsMENBQ3pDLGlCQUFpQixDQUFDLG1CQUFtQixTQUFNLENBQUM7Z0JBQzFELGNBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLE1BQU07U0FDYjtRQUVELE9BQU87WUFDSCxLQUFLLEVBQUUsaUJBQWlCLENBQUMsVUFBVTtZQUNuQyx3QkFBd0I7WUFDeEIsaUNBQWlDO1lBQ2pDLE9BQU8sRUFBSyxpQkFBaUIsQ0FBQyxvQ0FBb0MsVUFBTztTQUM1RSxDQUFDO0lBRU4sQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tm90aWZpY2F0aW9uLCBOb3RpZmljYXRpb25GaWx0ZXJDcml0ZXJpYSwgTm90aWZpY2F0aW9uU3RhdHVzfSBmcm9tICcuLic7XG5pbXBvcnQge05vdGlmaWNhdGlvbkVudHJ5fSBmcm9tICcuLi9kYi9zY2hlbWEnO1xuXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uSGFuZGxlciB7XG4gICAgcHVibGljIHN0YXRpYyBjb25zdHJ1Y3ROb3RpZmljYXRpb25EQk1vZGVsKG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uKTogTm90aWZpY2F0aW9uRW50cnkuU2NoZW1hTWFwIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lc3NhZ2VfaWQ6IG5vdGlmaWNhdGlvbi5pZCBhcyBudW1iZXIsXG4gICAgICAgICAgICBleHBpcnlfdGltZTogbm90aWZpY2F0aW9uLmV4cGlyeSxcbiAgICAgICAgICAgIGRpc3BsYXlfdGltZTogbm90aWZpY2F0aW9uLmRpc3BsYXlUaW1lLFxuICAgICAgICAgICAgcmVjZWl2ZWRfYXQ6IERhdGUubm93KCksXG4gICAgICAgICAgICBub3RpZmljYXRpb25fanNvbjogSlNPTi5zdHJpbmdpZnkobm90aWZpY2F0aW9uKSxcbiAgICAgICAgICAgIGlzX3JlYWQ6IG5vdGlmaWNhdGlvbi5pc1JlYWRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEZpbHRlckZvck5vdGlmaWNhdGlvbihjcml0ZXJpYTogTm90aWZpY2F0aW9uRmlsdGVyQ3JpdGVyaWEpIHtcbiAgICAgICAgbGV0IHNlbGVjdGlvbjtcbiAgICAgICAgbGV0IHNlbGVjdHRpb25BcmdzO1xuICAgICAgICBzd2l0Y2ggKGNyaXRlcmlhLm5vdGlmaWNhdGlvblN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25TdGF0dXMuQUxMIDpcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9OT1RJRklDQVRJT05fRElTUExBWV9USU1FfSA8PSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBBTkQgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9FWFBJUllfVElNRX0gPiA/YDtcbiAgICAgICAgICAgICAgICBzZWxlY3R0aW9uQXJncyA9IFtEYXRlLm5vdygpLnRvU3RyaW5nKCksIERhdGUubm93KCkudG9TdHJpbmcoKV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblN0YXR1cy5VTlJFQUQgOlxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGAke05vdGlmaWNhdGlvbkVudHJ5LkNPTFVNTl9OQU1FX05PVElGSUNBVElPTl9ESVNQTEFZX1RJTUV9IDw9ID9cbiAgICAgICAgICAgICAgICAgICAgICAgIEFORCAke05vdGlmaWNhdGlvbkVudHJ5LkNPTFVNTl9OQU1FX0VYUElSWV9USU1FfSA+ID8gQU5EXG4gICAgICAgICAgICAgICAgICAgICAgICBBTkQgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9JU19SRUFEfSA+ID9gO1xuICAgICAgICAgICAgICAgIHNlbGVjdHRpb25BcmdzID0gW0RhdGUubm93KCkudG9TdHJpbmcoKSwgRGF0ZS5ub3coKS50b1N0cmluZygpLCAwXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uU3RhdHVzLlJFQUQgOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9OT1RJRklDQVRJT05fRElTUExBWV9USU1FfSA8PSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBBTkQgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9FWFBJUllfVElNRX0gPiA/XG4gICAgICAgICAgICAgICAgICAgICAgICBBTkQgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9JU19SRUFEfSA+ID9gO1xuICAgICAgICAgICAgICAgIHNlbGVjdHRpb25BcmdzID0gW0RhdGUubm93KCkudG9TdHJpbmcoKSwgRGF0ZS5ub3coKS50b1N0cmluZygpLCAxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YWJsZTogTm90aWZpY2F0aW9uRW50cnkuVEFCTEVfTkFNRSxcbiAgICAgICAgICAgIC8vIHNlbGVjdGlvbjogc2VsZWN0aW9uLFxuICAgICAgICAgICAgLy8gc2VsZWN0aW9uQXJnczogc2VsZWN0dGlvbkFyZ3MsXG4gICAgICAgICAgICBvcmRlckJ5OiBgJHtOb3RpZmljYXRpb25FbnRyeS5DT0xVTU5fTkFNRV9OT1RJRklDQVRJT05fUkVDRUlWRURfQVR9IGRlc2NgXG4gICAgICAgIH07XG5cbiAgICB9XG59XG4iXX0=