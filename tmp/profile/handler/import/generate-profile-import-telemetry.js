import { Response } from '../../../api';
import { ImportedMetadataEntry } from '../../db/schema';
import { ShareDirection, ShareItemType, ShareType } from '../../../telemetry';
import { TelemetryLogger } from '../../../telemetry/util/telemetry-logger';
var GenerateProfileImportTelemetry = /** @class */ (function () {
    function GenerateProfileImportTelemetry(dbService) {
        this.dbService = dbService;
    }
    GenerateProfileImportTelemetry.prototype.execute = function (importContext) {
        var response = new Response();
        return this.dbService.read({
            table: ImportedMetadataEntry.TABLE_NAME
        }).toPromise().then(function (results) {
            var items = [];
            results.forEach(function (result) {
                var item = {
                    type: ShareItemType.PROFILE,
                    origin: result[ImportedMetadataEntry.COLUMN_NAME_DEVICE_ID],
                    identifier: result[ImportedMetadataEntry.COLUMN_NAME_IMPORTED_ID],
                    pkgVersion: 0,
                    transferCount: 0,
                    size: ''
                };
                items.push(item);
            });
            var req = {
                dir: ShareDirection.IN,
                type: ShareType.FILE.valueOf(),
                items: items,
                env: 'sdk'
            };
            return TelemetryLogger.log.share(req).toPromise();
        }).then(function () {
            response.body = importContext;
            return response;
        });
    };
    return GenerateProfileImportTelemetry;
}());
export { GenerateProfileImportTelemetry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtcHJvZmlsZS1pbXBvcnQtdGVsZW1ldHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb2ZpbGUvaGFuZGxlci9pbXBvcnQvZ2VuZXJhdGUtcHJvZmlsZS1pbXBvcnQtdGVsZW1ldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFdEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUdILGNBQWMsRUFDZCxhQUFhLEVBQ2IsU0FBUyxFQUVaLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBRXpFO0lBQ0ksd0NBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFDeEMsQ0FBQztJQUVNLGdEQUFPLEdBQWQsVUFBZSxhQUFxQztRQUNoRCxJQUFNLFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDdkIsS0FBSyxFQUFFLHFCQUFxQixDQUFDLFVBQVU7U0FDMUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLE9BQTBDO1lBQzNELElBQU0sS0FBSyxHQUFXLEVBQUUsQ0FBQztZQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBdUM7Z0JBQ3BELElBQU0sSUFBSSxHQUFTO29CQUNmLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTztvQkFDM0IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDM0QsVUFBVSxFQUFFLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsQ0FBQztvQkFDakUsVUFBVSxFQUFFLENBQUM7b0JBQ2IsYUFBYSxFQUFFLENBQUM7b0JBQ2hCLElBQUksRUFBRSxFQUFFO2lCQUNYLENBQUM7Z0JBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQztZQUNILElBQU0sR0FBRyxHQUEwQjtnQkFDL0IsR0FBRyxFQUFFLGNBQWMsQ0FBQyxFQUFFO2dCQUN0QixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLEtBQUssRUFBRSxLQUFLO2dCQUNaLEdBQUcsRUFBRSxLQUFLO2FBQ2IsQ0FBQztZQUNGLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0osUUFBUSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7WUFDOUIsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0lBQ0wscUNBQUM7QUFBRCxDQUFDLEFBbENELElBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXNwb25zZX0gZnJvbSAnLi4vLi4vLi4vYXBpJztcbmltcG9ydCB7RGJTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9kYic7XG5pbXBvcnQge0ltcG9ydGVkTWV0YWRhdGFFbnRyeX0gZnJvbSAnLi4vLi4vZGIvc2NoZW1hJztcbmltcG9ydCB7XG4gICAgSW1wb3J0VGVsZW1ldHJ5Q29udGV4dCxcbiAgICBJdGVtLFxuICAgIFNoYXJlRGlyZWN0aW9uLFxuICAgIFNoYXJlSXRlbVR5cGUsXG4gICAgU2hhcmVUeXBlLFxuICAgIFRlbGVtZXRyeVNoYXJlUmVxdWVzdFxufSBmcm9tICcuLi8uLi8uLi90ZWxlbWV0cnknO1xuaW1wb3J0IHtUZWxlbWV0cnlMb2dnZXJ9IGZyb20gJy4uLy4uLy4uL3RlbGVtZXRyeS91dGlsL3RlbGVtZXRyeS1sb2dnZXInO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVQcm9maWxlSW1wb3J0VGVsZW1ldHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRiU2VydmljZTogRGJTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGV4ZWN1dGUoaW1wb3J0Q29udGV4dDogSW1wb3J0VGVsZW1ldHJ5Q29udGV4dCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2U6IFJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRiU2VydmljZS5yZWFkKHtcbiAgICAgICAgICAgIHRhYmxlOiBJbXBvcnRlZE1ldGFkYXRhRW50cnkuVEFCTEVfTkFNRVxuICAgICAgICB9KS50b1Byb21pc2UoKS50aGVuKChyZXN1bHRzOiBJbXBvcnRlZE1ldGFkYXRhRW50cnkuU2NoZW1hTWFwW10pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zOiBJdGVtW10gPSBbXTtcbiAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0OiBJbXBvcnRlZE1ldGFkYXRhRW50cnkuU2NoZW1hTWFwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbTogSXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogU2hhcmVJdGVtVHlwZS5QUk9GSUxFLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW46IHJlc3VsdFtJbXBvcnRlZE1ldGFkYXRhRW50cnkuQ09MVU1OX05BTUVfREVWSUNFX0lEXSxcbiAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcjogcmVzdWx0W0ltcG9ydGVkTWV0YWRhdGFFbnRyeS5DT0xVTU5fTkFNRV9JTVBPUlRFRF9JRF0sXG4gICAgICAgICAgICAgICAgICAgIHBrZ1ZlcnNpb246IDAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyQ291bnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICcnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXE6IFRlbGVtZXRyeVNoYXJlUmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBkaXI6IFNoYXJlRGlyZWN0aW9uLklOLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlVHlwZS5GSUxFLnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgICAgICAgICAgZW52OiAnc2RrJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBUZWxlbWV0cnlMb2dnZXIubG9nLnNoYXJlKHJlcSkudG9Qcm9taXNlKCk7XG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IGltcG9ydENvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuXG4gICAgfVxufVxuIl19