import { Response } from '../../../api';
import { ErrorCode } from '../../../content';
import { ArrayUtil } from '../../../util/array-util';
import { MetaEntry } from '../../../telemetry/db/schema';
var ValidateProfileMetadata = /** @class */ (function () {
    function ValidateProfileMetadata(dbService) {
        this.dbService = dbService;
    }
    ValidateProfileMetadata.prototype.execute = function (importContext) {
        var _this = this;
        var response = new Response();
        return this.dbService.open(importContext.sourceDBFilePath).then(function () {
            return _this.dbService.read({
                table: MetaEntry.TABLE_NAME,
                useExternalDb: true
            }).toPromise();
        }).then(function (results) {
            if (!results || !results.length) {
                response.errorMesg = ErrorCode.IMPORT_FAILED.valueOf();
                throw response;
            }
            var metaData = {};
            results.forEach(function (result) {
                metaData[result['key']] = result['value'];
            });
            importContext.metadata = metaData;
            var importTypes = _this.getImportTypes(metaData);
            if (importTypes && !ArrayUtil.contains(importTypes, 'userprofile')) {
                response.errorMesg = ErrorCode.IMPORT_FAILED.valueOf();
                throw response;
            }
            response.body = importContext;
            return response;
        });
    };
    ValidateProfileMetadata.prototype.getImportTypes = function (result) {
        var importTypes = [];
        if (result.hasOwnProperty('types')) {
            importTypes = JSON.parse(result['types']);
        }
        return importTypes;
    };
    return ValidateProfileMetadata;
}());
export { ValidateProfileMetadata };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtcHJvZmlsZS1tZXRhZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm9maWxlL2hhbmRsZXIvaW1wb3J0L3ZhbGlkYXRlLXByb2ZpbGUtbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUV2RDtJQUVJLGlDQUFvQixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQ3hDLENBQUM7SUFFTSx5Q0FBTyxHQUFkLFVBQWUsYUFBbUM7UUFBbEQsaUJBeUJDO1FBeEJHLElBQU0sUUFBUSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDNUQsT0FBTyxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDdkIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxVQUFVO2dCQUMzQixhQUFhLEVBQUUsSUFBSTthQUN0QixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsT0FBOEI7WUFDbkMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQzdCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDdkQsTUFBTSxRQUFRLENBQUM7YUFDbEI7WUFDRCxJQUFNLFFBQVEsR0FBMkIsRUFBRSxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO2dCQUNuQixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsYUFBYSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDbEMsSUFBTSxXQUFXLEdBQWEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1RCxJQUFJLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxFQUFFO2dCQUNoRSxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZELE1BQU0sUUFBUSxDQUFDO2FBQ2xCO1lBQ0QsUUFBUSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7WUFDOUIsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sZ0RBQWMsR0FBdEIsVUFBdUIsTUFBTTtRQUN6QixJQUFJLFdBQVcsR0FBYSxFQUFFLENBQUM7UUFDL0IsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2hDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFFdkIsQ0FBQztJQUNMLDhCQUFDO0FBQUQsQ0FBQyxBQXhDRCxJQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGJTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9kYic7XG5pbXBvcnQge1Jlc3BvbnNlfSBmcm9tICcuLi8uLi8uLi9hcGknO1xuaW1wb3J0IHtFcnJvckNvZGV9IGZyb20gJy4uLy4uLy4uL2NvbnRlbnQnO1xuaW1wb3J0IHtBcnJheVV0aWx9IGZyb20gJy4uLy4uLy4uL3V0aWwvYXJyYXktdXRpbCc7XG5pbXBvcnQge0ltcG9ydFByb2ZpbGVDb250ZXh0fSBmcm9tICcuLi8uLi9kZWYvaW1wb3J0LXByb2ZpbGUtY29udGV4dCc7XG5pbXBvcnQge01ldGFFbnRyeX0gZnJvbSAnLi4vLi4vLi4vdGVsZW1ldHJ5L2RiL3NjaGVtYSc7XG5cbmV4cG9ydCBjbGFzcyBWYWxpZGF0ZVByb2ZpbGVNZXRhZGF0YSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRiU2VydmljZTogRGJTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGV4ZWN1dGUoaW1wb3J0Q29udGV4dDogSW1wb3J0UHJvZmlsZUNvbnRleHQpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZSA9IG5ldyBSZXNwb25zZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYlNlcnZpY2Uub3BlbihpbXBvcnRDb250ZXh0LnNvdXJjZURCRmlsZVBhdGgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGJTZXJ2aWNlLnJlYWQoe1xuICAgICAgICAgICAgICAgIHRhYmxlOiBNZXRhRW50cnkuVEFCTEVfTkFNRSxcbiAgICAgICAgICAgICAgICB1c2VFeHRlcm5hbERiOiB0cnVlXG4gICAgICAgICAgICB9KS50b1Byb21pc2UoKTtcbiAgICAgICAgfSkudGhlbigocmVzdWx0czogTWV0YUVudHJ5LlNjaGVtYU1hcFtdKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdHMgfHwgIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3JNZXNnID0gRXJyb3JDb2RlLklNUE9SVF9GQUlMRUQudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWV0YURhdGE6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgbWV0YURhdGFbcmVzdWx0WydrZXknXV0gPSByZXN1bHRbJ3ZhbHVlJ107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGltcG9ydENvbnRleHQubWV0YWRhdGEgPSBtZXRhRGF0YTtcbiAgICAgICAgICAgIGNvbnN0IGltcG9ydFR5cGVzOiBzdHJpbmdbXSA9IHRoaXMuZ2V0SW1wb3J0VHlwZXMobWV0YURhdGEpO1xuICAgICAgICAgICAgaWYgKGltcG9ydFR5cGVzICYmICFBcnJheVV0aWwuY29udGFpbnMoaW1wb3J0VHlwZXMsICd1c2VycHJvZmlsZScpKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3JNZXNnID0gRXJyb3JDb2RlLklNUE9SVF9GQUlMRUQudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IGltcG9ydENvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0SW1wb3J0VHlwZXMocmVzdWx0KTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgaW1wb3J0VHlwZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChyZXN1bHQuaGFzT3duUHJvcGVydHkoJ3R5cGVzJykpIHtcbiAgICAgICAgICAgIGltcG9ydFR5cGVzID0gSlNPTi5wYXJzZShyZXN1bHRbJ3R5cGVzJ10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbXBvcnRUeXBlcztcblxuICAgIH1cbn1cbiJdfQ==