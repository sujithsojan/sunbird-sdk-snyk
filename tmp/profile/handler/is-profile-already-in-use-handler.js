import { HttpRequestType, Request } from '../../api';
import { map } from 'rxjs/operators';
var IsProfileAlreadyInUseHandler = /** @class */ (function () {
    function IsProfileAlreadyInUseHandler(apiService, profileAlreadyInUseConfig) {
        this.apiService = apiService;
        this.profileAlreadyInUseConfig = profileAlreadyInUseConfig;
        this.GET_PROFILE_ALREADY_IN_USE_ENDPOINT = '/get';
    }
    IsProfileAlreadyInUseHandler.prototype.handle = function (request) {
        var apiRequest = new Request.Builder()
            .withType(HttpRequestType.GET)
            .withPath(this.profileAlreadyInUseConfig.profileApiPath_V2 +
            this.GET_PROFILE_ALREADY_IN_USE_ENDPOINT + '/' + request.type + '/' + request.key)
            .withBearerToken(true)
            .withUserToken(true)
            .build();
        return this.apiService.fetch(apiRequest).pipe(map(function (success) {
            return success.body.result;
        }));
    };
    return IsProfileAlreadyInUseHandler;
}());
export { IsProfileAlreadyInUseHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtcHJvZmlsZS1hbHJlYWR5LWluLXVzZS1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb2ZpbGUvaGFuZGxlci9pcy1wcm9maWxlLWFscmVhZHktaW4tdXNlLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQyxlQUFlLEVBQUUsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBSWxGLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQztJQUdJLHNDQUFvQixVQUFzQixFQUN0Qix5QkFBK0M7UUFEL0MsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0Qiw4QkFBeUIsR0FBekIseUJBQXlCLENBQXNCO1FBSGxELHdDQUFtQyxHQUFHLE1BQU0sQ0FBQztJQUk5RCxDQUFDO0lBRUQsNkNBQU0sR0FBTixVQUFPLE9BQXFDO1FBQ3hDLElBQU0sVUFBVSxHQUFZLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTthQUM1QyxRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQzthQUM3QixRQUFRLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGlCQUFpQjtZQUN0RCxJQUFJLENBQUMsbUNBQW1DLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDckYsZUFBZSxDQUFDLElBQUksQ0FBQzthQUNyQixhQUFhLENBQUMsSUFBSSxDQUFDO2FBQ25CLEtBQUssRUFBRSxDQUFDO1FBRWIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBb0MsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUM1RSxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ1IsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVMLG1DQUFDO0FBQUQsQ0FBQyxBQXZCRCxJQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXBpUmVxdWVzdEhhbmRsZXIsIEFwaVNlcnZpY2UsIEh0dHBSZXF1ZXN0VHlwZSwgUmVxdWVzdH0gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7SXNQcm9maWxlQWxyZWFkeUluVXNlUmVxdWVzdCwgUHJvZmlsZVNlcnZpY2VDb25maWd9IGZyb20gJy4uJztcbmltcG9ydCB7UHJvZmlsZUV4aXN0c1Jlc3BvbnNlfSBmcm9tICcuLi9kZWYvcHJvZmlsZS1leGlzdHMtcmVzcG9uc2UnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBJc1Byb2ZpbGVBbHJlYWR5SW5Vc2VIYW5kbGVyIGltcGxlbWVudHMgQXBpUmVxdWVzdEhhbmRsZXI8SXNQcm9maWxlQWxyZWFkeUluVXNlUmVxdWVzdCwgUHJvZmlsZUV4aXN0c1Jlc3BvbnNlPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBHRVRfUFJPRklMRV9BTFJFQURZX0lOX1VTRV9FTkRQT0lOVCA9ICcvZ2V0JztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHByb2ZpbGVBbHJlYWR5SW5Vc2VDb25maWc6IFByb2ZpbGVTZXJ2aWNlQ29uZmlnKSB7XG4gICAgfVxuXG4gICAgaGFuZGxlKHJlcXVlc3Q6IElzUHJvZmlsZUFscmVhZHlJblVzZVJlcXVlc3QpOiBPYnNlcnZhYmxlPFByb2ZpbGVFeGlzdHNSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCBhcGlSZXF1ZXN0OiBSZXF1ZXN0ID0gbmV3IFJlcXVlc3QuQnVpbGRlcigpXG4gICAgICAgICAgICAud2l0aFR5cGUoSHR0cFJlcXVlc3RUeXBlLkdFVClcbiAgICAgICAgICAgIC53aXRoUGF0aCh0aGlzLnByb2ZpbGVBbHJlYWR5SW5Vc2VDb25maWcucHJvZmlsZUFwaVBhdGhfVjIgK1xuICAgICAgICAgICAgICAgIHRoaXMuR0VUX1BST0ZJTEVfQUxSRUFEWV9JTl9VU0VfRU5EUE9JTlQgKyAnLycgKyByZXF1ZXN0LnR5cGUgKyAnLycgKyByZXF1ZXN0LmtleSlcbiAgICAgICAgICAgIC53aXRoQmVhcmVyVG9rZW4odHJ1ZSlcbiAgICAgICAgICAgIC53aXRoVXNlclRva2VuKHRydWUpXG4gICAgICAgICAgICAuYnVpbGQoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmZldGNoPHsgcmVzdWx0OiBQcm9maWxlRXhpc3RzUmVzcG9uc2UgfT4oYXBpUmVxdWVzdCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzLmJvZHkucmVzdWx0O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbn1cbiJdfQ==