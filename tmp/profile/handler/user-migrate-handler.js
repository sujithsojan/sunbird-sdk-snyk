import { HttpRequestType, Request } from '../../api';
import { map } from 'rxjs/operators';
var UserMigrateHandler = /** @class */ (function () {
    function UserMigrateHandler(sdkConfig, apiService) {
        this.sdkConfig = sdkConfig;
        this.apiService = apiService;
        this.profileServiceConfig = this.sdkConfig.profileServiceConfig;
        this.apiConfig = this.sdkConfig.apiConfig;
    }
    UserMigrateHandler.prototype.handle = function (request) {
        return this.fetchFromServer(request);
    };
    UserMigrateHandler.prototype.fetchFromServer = function (request) {
        console.log('Request', request);
        var apiRequest = new Request.Builder()
            .withHost(this.apiConfig.host)
            .withType(HttpRequestType.POST)
            .withPath(this.profileServiceConfig.profileApiPath_V5 + UserMigrateHandler.USER_MIGRATE)
            .withBearerToken(true)
            .withUserToken(true)
            .withBody({ request: request })
            .build();
        // return this.apiService.fetch<{ result: { response: UserMigrateResponse } }>(apiRequest)
        return this.apiService.fetch(apiRequest).pipe(map(function (success) {
            console.log('sucees', success);
            return success.body;
        }));
    };
    UserMigrateHandler.USER_MIGRATE = '/migrate';
    return UserMigrateHandler;
}());
export { UserMigrateHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1taWdyYXRlLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvZmlsZS9oYW5kbGVyL3VzZXItbWlncmF0ZS1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBMkMsZUFBZSxFQUFFLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUk3RixPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFJbkM7SUFPSSw0QkFDWSxTQUFvQixFQUNwQixVQUFzQjtRQUR0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFFOUIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsbUNBQU0sR0FBTixVQUFPLE9BQTJCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsNENBQWUsR0FBZixVQUFnQixPQUFPO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLElBQU0sVUFBVSxHQUFZLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTthQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7YUFDN0IsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7YUFDOUIsUUFBUSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQUM7YUFDdkYsZUFBZSxDQUFDLElBQUksQ0FBQzthQUNyQixhQUFhLENBQUMsSUFBSSxDQUFDO2FBQ2YsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDO2FBQzVCLEtBQUssRUFBRSxDQUFDO1FBR2pCLDBGQUEwRjtRQUMxRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDekMsR0FBRyxDQUFDLFVBQUMsT0FBTztZQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQXBDdUIsK0JBQVksR0FBRyxVQUFVLENBQUM7SUFzQ3RELHlCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0F4Q1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcGlDb25maWcsIEFwaVJlcXVlc3RIYW5kbGVyLCBBcGlTZXJ2aWNlLCBIdHRwUmVxdWVzdFR5cGUsIFJlcXVlc3R9IGZyb20gJy4uLy4uL2FwaSc7XG5pbXBvcnQge1VzZXJNaWdyYXRlUmVxdWVzdH0gZnJvbSAnLi4vZGVmL3VzZXItbWlncmF0ZS1yZXF1ZXN0JztcbmltcG9ydCB7VXNlck1pZ3JhdGVSZXNwb25zZX0gZnJvbSAnLi4vZGVmL3VzZXItbWlncmF0ZS1yZXNwb25zZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7U2RrQ29uZmlnfSBmcm9tICcuLi8uLi9zZGstY29uZmlnJztcbmltcG9ydCB7UHJvZmlsZVNlcnZpY2VDb25maWd9IGZyb20gJy4uL2NvbmZpZy9wcm9maWxlLXNlcnZpY2UtY29uZmlnJztcblxuZXhwb3J0IGNsYXNzIFVzZXJNaWdyYXRlSGFuZGxlciBpbXBsZW1lbnRzIEFwaVJlcXVlc3RIYW5kbGVyPFVzZXJNaWdyYXRlUmVxdWVzdCwgVXNlck1pZ3JhdGVSZXNwb25zZT4ge1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVVNFUl9NSUdSQVRFID0gJy9taWdyYXRlJztcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXBpQ29uZmlnOiBBcGlDb25maWc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9maWxlU2VydmljZUNvbmZpZzogUHJvZmlsZVNlcnZpY2VDb25maWc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzZGtDb25maWc6IFNka0NvbmZpZyxcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgIHRoaXMucHJvZmlsZVNlcnZpY2VDb25maWcgPSB0aGlzLnNka0NvbmZpZy5wcm9maWxlU2VydmljZUNvbmZpZztcbiAgICAgICAgdGhpcy5hcGlDb25maWcgPSB0aGlzLnNka0NvbmZpZy5hcGlDb25maWc7XG4gICAgfVxuXG4gICAgaGFuZGxlKHJlcXVlc3Q6IFVzZXJNaWdyYXRlUmVxdWVzdCk6IE9ic2VydmFibGU8VXNlck1pZ3JhdGVSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaEZyb21TZXJ2ZXIocmVxdWVzdCk7XG4gICAgfVxuXG4gICAgZmV0Y2hGcm9tU2VydmVyKHJlcXVlc3QpOiBPYnNlcnZhYmxlPFVzZXJNaWdyYXRlUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1JlcXVlc3QnLCByZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgYXBpUmVxdWVzdDogUmVxdWVzdCA9IG5ldyBSZXF1ZXN0LkJ1aWxkZXIoKVxuICAgICAgICAgICAgLndpdGhIb3N0KHRoaXMuYXBpQ29uZmlnLmhvc3QpXG4gICAgICAgICAgICAud2l0aFR5cGUoSHR0cFJlcXVlc3RUeXBlLlBPU1QpXG4gICAgICAgICAgICAud2l0aFBhdGgodGhpcy5wcm9maWxlU2VydmljZUNvbmZpZy5wcm9maWxlQXBpUGF0aF9WNSArIFVzZXJNaWdyYXRlSGFuZGxlci5VU0VSX01JR1JBVEUpXG4gICAgICAgICAgICAud2l0aEJlYXJlclRva2VuKHRydWUpXG4gICAgICAgICAgICAud2l0aFVzZXJUb2tlbih0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoQm9keSh7cmVxdWVzdDogcmVxdWVzdH0pXG4gICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG5cblxuICAgICAgICAvLyByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmZldGNoPHsgcmVzdWx0OiB7IHJlc3BvbnNlOiBVc2VyTWlncmF0ZVJlc3BvbnNlIH0gfT4oYXBpUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5mZXRjaChhcGlSZXF1ZXN0KS5waXBlKFxuICAgICAgICAgICAgbWFwKChzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Y2VlcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzLmJvZHk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxufVxuIl19