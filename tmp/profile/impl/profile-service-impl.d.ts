import { AcceptTermsConditionRequest, Consent, ContentAccess, GenerateOtpRequest, GetAllProfileRequest, IsProfileAlreadyInUseRequest, LocationSearchCriteria, MergeServerProfilesRequest, Profile, ProfileExportRequest, ProfileExportResponse, ProfileService, ProfileSession, ProfileSource, ReadConsentResponse, ServerProfile, ServerProfileDetailsRequest, TenantInfoRequest, UpdateConsentResponse, UserFeedEntry, UserMigrateRequest, VerifyOtpRequest } from '..';
import { DbService } from '../../db';
import { TenantInfo } from '../def/tenant-info';
import { ApiService } from '../../api';
import { CachedItemStore, KeyValueStore } from '../../key-value-store';
import { ContentAccessFilterCriteria } from '../def/content-access-filter-criteria';
import { ProfileExistsResponse } from '../def/profile-exists-response';
import { LocationSearchResult } from '../def/location-search-result';
import { SharedPreferences } from '../../util/shared-preferences';
import { FrameworkService } from '../../framework';
import { ProfileImportRequest } from '../def/profile-import-request';
import { ProfileImportResponse } from '../def/profile-import-response';
import { FileService } from '../../util/file/def/file-service';
import { DeviceInfo } from '../../util/device';
import { SdkConfig } from '../../sdk-config';
import { Container } from 'inversify';
import { AuthService } from '../../auth';
import { Observable } from 'rxjs';
import { UserMigrateResponse } from '../def/user-migrate-response';
import { ManagedProfileManager } from '../handler/managed-profile-manager';
import { CsUserService } from '@project-sunbird/client-services/services/user';
import { CheckUserExistsRequest } from '../def/check-user-exists-request';
import { CheckUserExistsResponse } from '../def/check-user-exists-response';
import { UpdateServerProfileDeclarationsResponse } from '../def/update-server-profile-declarations-response';
import { UpdateServerProfileDeclarationsRequest } from '../def/update-server-profile-declarations-request';
import { UpdateUserFeedRequest } from '../def/update-user-feed-request';
import { DeleteUserFeedRequest } from '../def/delete-user-feed-request';
import { UpdateServerProfileResponse } from '../def/update-server-profile-response';
import { UpdateServerProfileInfoRequest } from '../def/update-server-profile-info-request';
import { DeleteUserRequest } from '../def/delete-user-request';
export declare class ProfileServiceImpl implements ProfileService {
    private container;
    private sdkConfig;
    private dbService;
    private apiService;
    private cachedItemStore;
    private keyValueStore;
    private sharedPreferences;
    private frameworkService;
    private fileService;
    private deviceInfo;
    private authService;
    private userService;
    private static readonly KEY_USER_SESSION;
    private static readonly MERGE_SERVER_PROFILES_PATH;
    private readonly apiConfig;
    private readonly profileServiceConfig;
    readonly managedProfileManager: ManagedProfileManager;
    constructor(container: Container, sdkConfig: SdkConfig, dbService: DbService, apiService: ApiService, cachedItemStore: CachedItemStore, keyValueStore: KeyValueStore, sharedPreferences: SharedPreferences, frameworkService: FrameworkService, fileService: FileService, deviceInfo: DeviceInfo, authService: AuthService, userService: CsUserService);
    private get telemetryService();
    preInit(): Observable<undefined>;
    checkServerProfileExists(request: CheckUserExistsRequest): Observable<CheckUserExistsResponse>;
    createProfile(profile: Profile, profileSource?: ProfileSource): Observable<Profile>;
    deleteProfile(uid: string): Observable<undefined>;
    updateProfile(profile: Profile): Observable<Profile>;
    updateServerProfile(updateUserInfoRequest: UpdateServerProfileInfoRequest): Observable<UpdateServerProfileResponse>;
    getTenantInfo(tenantInfoRequest: TenantInfoRequest): Observable<TenantInfo>;
    getAllProfiles(profileRequest?: GetAllProfileRequest): Observable<Profile[]>;
    getServerProfilesDetails(serverProfileDetailsRequest: ServerProfileDetailsRequest): Observable<ServerProfile>;
    getActiveSessionProfile({ requiredFields }: Pick<ServerProfileDetailsRequest, 'requiredFields'>): Observable<Profile>;
    setActiveSessionForProfile(profileUid: string): Observable<boolean>;
    getActiveProfileSession(): Observable<ProfileSession>;
    acceptTermsAndConditions(acceptTermsConditions: AcceptTermsConditionRequest): Observable<boolean>;
    isProfileAlreadyInUse(isProfileAlreadyInUseRequest: IsProfileAlreadyInUseRequest): Observable<ProfileExistsResponse>;
    generateOTP(generateOtpRequest: GenerateOtpRequest): Observable<boolean>;
    verifyOTP(verifyOTPRequest: VerifyOtpRequest): Observable<boolean>;
    searchLocation(locationSearchCriteria: LocationSearchCriteria): Observable<LocationSearchResult[]>;
    getAllContentAccess(criteria: ContentAccessFilterCriteria): Observable<ContentAccess[]>;
    addContentAccess(contentAccess: ContentAccess): Observable<boolean>;
    exportProfile(profileExportRequest: ProfileExportRequest): Observable<ProfileExportResponse>;
    importProfile(profileImportRequest: ProfileImportRequest): Observable<ProfileImportResponse>;
    mergeServerProfiles(mergeServerProfilesRequest: MergeServerProfilesRequest): Observable<undefined>;
    isDefaultChannelProfile(): Observable<boolean>;
    getUserFeed(): Observable<UserFeedEntry[]>;
    updateUserFeedEntry(updateUserFeedRequest: UpdateUserFeedRequest): Observable<boolean>;
    deleteUserFeedEntry(deleteUserFeedRequest: DeleteUserFeedRequest): Observable<boolean>;
    userMigrate(userMigrateRequest: UserMigrateRequest): Observable<UserMigrateResponse>;
    updateServerProfileDeclarations(request: UpdateServerProfileDeclarationsRequest): Observable<UpdateServerProfileDeclarationsResponse>;
    getConsent(userConsent: Consent): Observable<ReadConsentResponse>;
    updateConsent(userConsent: Consent): Observable<UpdateConsentResponse>;
    private mapDbProfileEntriesToProfiles;
    private generateSessionStartTelemetry;
    private generateSessionEndTelemetry;
    deleteProfileData(uid: string): Observable<boolean>;
    deleteUser(deleteUserRequest: DeleteUserRequest): Observable<boolean>;
}
