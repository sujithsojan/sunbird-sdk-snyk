var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { StorageEventType } from '..';
import { EventNamespace } from '../../events-bus';
import { DeviceMemoryCheck } from './transfer/device-memory-check';
import { ValidateDestinationContent } from './transfer/validate-destination-content';
import { DeleteDestinationFolder } from './transfer/delete-destination-folder';
import { DuplicateContentCheck } from './transfer/duplicate-content-check';
import { CopyContentFromSourceToDestination } from './transfer/copy-content-from-source-to-destination';
import { UpdateSourceContentPathInDb } from './transfer/update-source-content-path-in-db';
import { StoreDestinationContentInDb } from './transfer/store-destination-content-in-db';
import { ValidateDestinationFolder } from './transfer/validate-destination-folder';
import { DeleteSourceFolder } from './transfer/delete-source-folder';
import { CancellationError } from '../errors/cancellation-error';
import { DuplicateContentError } from '../errors/duplicate-content-error';
import { LowMemoryError } from '../errors/low-memory-error';
import { defer, throwError } from 'rxjs';
import { catchError, mapTo, mergeMap, tap } from 'rxjs/operators';
export var MoveContentStatus;
(function (MoveContentStatus) {
    MoveContentStatus["SAME_VERSION_IN_BOTH"] = "SAME_VERSION_IN_BOTH";
    MoveContentStatus["HIGHER_VERSION_IN_DESTINATION"] = "HIGHER_VERSION_IN_DESTINATION";
    MoveContentStatus["LOWER_VERSION_IN_DESTINATION"] = "LOWER_VERSION_IN_DESTINATION";
})(MoveContentStatus || (MoveContentStatus = {}));
var TransferContentHandler = /** @class */ (function () {
    function TransferContentHandler(sdkConfig, fileService, dbService, eventsBusService, deviceInfo) {
        this.sdkConfig = sdkConfig;
        this.fileService = fileService;
        this.dbService = dbService;
        this.eventsBusService = eventsBusService;
        this.deviceInfo = deviceInfo;
        this.context = {};
    }
    TransferContentHandler.prototype.transfer = function (_a) {
        var _this = this;
        var contentIds = _a.contentIds, existingContentAction = _a.existingContentAction, deleteDestination = _a.deleteDestination, destinationFolder = _a.destinationFolder, shouldMergeInDestination = _a.shouldMergeInDestination, sourceFolder = _a.sourceFolder;
        this.context.hasTransferCancelled = false;
        this.context.shouldMergeInDestination = shouldMergeInDestination;
        this.context.contentIds = contentIds;
        this.context.existingContentAction = existingContentAction;
        this.context.deleteDestination = deleteDestination;
        this.context.destinationFolder = destinationFolder;
        this.context.sourceFolder = sourceFolder;
        return new ValidateDestinationFolder(this.fileService).execute(this.context).pipe(mergeMap(function (transferContext) {
            return new DeleteDestinationFolder().execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new DeviceMemoryCheck(_this.dbService).execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new ValidateDestinationContent(_this.fileService, _this.sdkConfig.appConfig).execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new DuplicateContentCheck(_this.dbService, _this.fileService).execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new CopyContentFromSourceToDestination(_this.eventsBusService).execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new DeleteSourceFolder(_this.eventsBusService).execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new UpdateSourceContentPathInDb(_this.dbService).execute(transferContext);
        }), mergeMap(function (transferContext) {
            return new StoreDestinationContentInDb(_this.sdkConfig.appConfig, _this.fileService, _this.dbService, _this.deviceInfo).execute(transferContext);
        })).pipe(tap(function () {
            _this.eventsBusService.emit({
                namespace: EventNamespace.STORAGE,
                event: {
                    type: StorageEventType.TRANSFER_COMPLETED
                }
            });
        }), mapTo(undefined), catchError(function (e) {
            if (e instanceof CancellationError) {
                _this.eventsBusService.emit({
                    namespace: EventNamespace.STORAGE,
                    event: {
                        type: StorageEventType.TRANSFER_REVERT_COMPLETED
                    }
                });
            }
            else if (e instanceof DuplicateContentError) {
                _this.eventsBusService.emit({
                    namespace: EventNamespace.STORAGE,
                    event: {
                        type: StorageEventType.TRANSFER_FAILED_DUPLICATE_CONTENT
                    }
                });
            }
            else if (e instanceof LowMemoryError) {
                _this.eventsBusService.emit({
                    namespace: EventNamespace.STORAGE,
                    event: {
                        type: StorageEventType.TRANSFER_FAILED_LOW_MEMORY
                    }
                });
            }
            console.error('Error', e);
            return throwError(e);
        }));
    };
    TransferContentHandler.prototype.cancel = function () {
        var _this = this;
        return defer(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.context.hasTransferCancelled = true;
                return [2 /*return*/];
            });
        }); }).pipe(mapTo(undefined));
    };
    return TransferContentHandler;
}());
export { TransferContentHandler };
//# sourceMappingURL=data:application/json;base64,