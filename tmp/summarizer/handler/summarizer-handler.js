import { LearnerAssessmentsEntry, LearnerSummaryEntry } from '../../profile/db/schema';
import { ReportDetailPerUser } from '..';
import { NumberUtil } from '../../util/number-util';
var SummarizerHandler = /** @class */ (function () {
    function SummarizerHandler() {
    }
    SummarizerHandler.mapLearnerAssesmentDetailsToDbEntries = function (learnerAssessmentDetails) {
        var _a;
        return _a = {},
            _a[LearnerAssessmentsEntry.COLUMN_NAME_UID] = learnerAssessmentDetails.uid,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_CONTENT_ID] = learnerAssessmentDetails.contentId,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_QID] = learnerAssessmentDetails.qid,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_Q_INDEX] = learnerAssessmentDetails.qindex,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_CORRECT] = learnerAssessmentDetails.correct,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_SCORE] = learnerAssessmentDetails.score,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_TIME_SPENT] = learnerAssessmentDetails.timespent,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_RES] = learnerAssessmentDetails.res,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_TIMESTAMP] = learnerAssessmentDetails.timestamp,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_Q_DESC] = learnerAssessmentDetails.qdesc,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_Q_TITLE] = learnerAssessmentDetails.qtitle,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_MAX_SCORE] = learnerAssessmentDetails.maxScore,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_HIERARCHY_DATA] = learnerAssessmentDetails.hierarchyData,
            _a;
    };
    SummarizerHandler.mapContentSummaryDetailsToDbEntries = function (learnerContentSummaryDetails) {
        var _a;
        return _a = {},
            _a[LearnerSummaryEntry.COLUMN_NAME_UID] = learnerContentSummaryDetails.uid,
            _a[LearnerSummaryEntry.COLUMN_NAME_CONTENT_ID] = learnerContentSummaryDetails.contentId,
            _a[LearnerSummaryEntry.COLUMN_NAME_AVG_TS] = learnerContentSummaryDetails.avgts,
            _a[LearnerSummaryEntry.COLUMN_NAME_TOTAL_TS] = learnerContentSummaryDetails.totalts,
            _a[LearnerSummaryEntry.COLUMN_NAME_LAST_UPDATED_ON] = learnerContentSummaryDetails.lastUpdated,
            _a[LearnerAssessmentsEntry.COLUMN_NAME_HIERARCHY_DATA] = learnerContentSummaryDetails.hierarchyData,
            _a;
    };
    SummarizerHandler.mapDBEntriesToLearnerAssesmentSummary = function (assesmentsInDb, cache) {
        return assesmentsInDb
            // .filter((assesment: LearnerSummaryEntry.SchemaMap) => {
            //     const contentCache: ContentCache | undefined = cache.get(assesment[LearnerSummaryEntry.COLUMN_NAME_CONTENT_ID]);
            //     return !!contentCache;
            // })
            .map(function (assesment) {
            var contentCache = cache.get(assesment[LearnerSummaryEntry.COLUMN_NAME_CONTENT_ID]);
            return {
                uid: assesment[LearnerSummaryEntry.COLUMN_NAME_UID].toString(),
                contentId: assesment[LearnerSummaryEntry.COLUMN_NAME_CONTENT_ID].toString(),
                noOfQuestions: NumberUtil.parseInt(assesment[LearnerSummaryEntry.COLUMN_NAME_NO_OF_QUESTIONS]),
                correctAnswers: NumberUtil.parseInt(assesment[LearnerSummaryEntry.COLUMN_NAME_CORRECT_ANSWERS]),
                totalTimespent: Number(assesment[LearnerSummaryEntry.COLUMN_NAME_TOTAL_TIME_SPENT]),
                hierarchyData: assesment[LearnerSummaryEntry.COLUMN_NAME_HIERARCHY_DATA].toString(),
                totalMaxScore: NumberUtil.toFixed(assesment[LearnerSummaryEntry.COLUMN_NAME_TOTAL_MAX_SCORE]),
                totalScore: NumberUtil.toFixed(assesment[LearnerSummaryEntry.COLUMN_NAME_TOTAL_SCORE]),
                totalQuestionsScore: contentCache ? contentCache.totalScore : 0,
                name: contentCache ? contentCache.name : assesment[LearnerSummaryEntry.COLUMN_NAME_CONTENT_ID],
            };
        });
    };
    SummarizerHandler.mapDBEntriesToLearnerAssesmentDetails = function (assesmentDetailsInDb) {
        var map = new Map();
        assesmentDetailsInDb.map(function (assesmentDetailInDb) {
            var assesmentDetails = {
                uid: assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_UID],
                contentId: assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_CONTENT_ID],
                qid: assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_QID],
                qindex: Number(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_Q_INDEX]),
                correct: NumberUtil.parseInt(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_CORRECT]),
                score: NumberUtil.toFixed(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_SCORE]),
                timespent: Number(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_TIME_SPENT]),
                res: assesmentDetailInDb[LearnerAssessmentsEntry[LearnerAssessmentsEntry.COLUMN_NAME_RES]],
                timestamp: Number(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_TIMESTAMP]),
                qdesc: assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_Q_DESC],
                qtitle: assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_Q_TITLE],
                maxScore: NumberUtil.toFixed(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_MAX_SCORE]),
                hierarchyData: assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_HIERARCHY_DATA],
                total_ts: Number(assesmentDetailInDb[LearnerAssessmentsEntry.COLUMN_NAME_TOTAL_TS])
            };
            var reportPerUser = map.get(assesmentDetails.uid);
            if (reportPerUser === undefined) {
                reportPerUser = new ReportDetailPerUser();
                reportPerUser.uid = assesmentDetails.uid;
                reportPerUser.totalScore = 0;
                reportPerUser.maxTotalScore = 0;
            }
            reportPerUser.reportDetailsList.push(assesmentDetails);
            reportPerUser.totalScore += assesmentDetails.score;
            reportPerUser.totalTime = assesmentDetails.total_ts;
            reportPerUser.maxTotalScore += assesmentDetails.maxScore;
            reportPerUser.totalScore = parseFloat(reportPerUser.totalScore.toFixed(2));
            map.set(assesmentDetails.uid, reportPerUser);
        });
        return map;
    };
    SummarizerHandler.mapDBEntriesToQuestionReports = function (accuracyMap, questionReportsInDb) {
        return questionReportsInDb.map(function (questionReport) {
            var qid = questionReport[LearnerAssessmentsEntry.COLUMN_NAME_QID];
            var correctUserCount = 0;
            if (accuracyMap.hasOwnProperty(qid)) {
                correctUserCount = NumberUtil.parseInt(accuracyMap[qid]);
            }
            return {
                uid: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_UID],
                contentId: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_CONTENT_ID],
                qid: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_QID],
                qindex: Number(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_Q_INDEX]),
                correct: NumberUtil.parseInt(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_CORRECT]),
                score: NumberUtil.toFixed(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_SCORE]),
                timespent: Number(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_TIME_SPENT]),
                res: questionReport[LearnerAssessmentsEntry[LearnerAssessmentsEntry.COLUMN_NAME_RES]],
                timestamp: Number(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_TIMESTAMP]),
                qdesc: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_Q_DESC],
                qtitle: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_Q_TITLE],
                maxScore: NumberUtil.toFixed(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_MAX_SCORE]),
                hierarchyData: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_HIERARCHY_DATA],
                total_ts: Number(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_TOTAL_TS]),
                marks: Number(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_MARKS]),
                occurenceCount: questionReport[LearnerAssessmentsEntry.COLUMN_NAME_COUNT],
                sum_max_score: Number(questionReport[LearnerAssessmentsEntry.COLUMN_NAME_TOTAL_MAX_SCORE]),
                correct_users_count: correctUserCount
            };
        });
    };
    SummarizerHandler.mapDBEntriesToAccuracy = function (accuracyReportsInDb) {
        var accuracy = {};
        accuracyReportsInDb.map(function (accuracyReport) {
            accuracy[accuracyReport[LearnerAssessmentsEntry.COLUMN_NAME_QID]] =
                NumberUtil.parseInt(accuracyReport[LearnerAssessmentsEntry.COLUMN_NAME_USERS_COUNT]);
        });
        return accuracy;
    };
    SummarizerHandler.mapDBEntriesToQuestionDetails = function (questionSummaries) {
        return questionSummaries.map(function (questionSummary) {
            return {
                uid: questionSummary.uid,
                time: Number(questionSummary.time),
                result: NumberUtil.round(questionSummary.result),
                max_score: NumberUtil.parseInt(questionSummary.max_score)
            };
        });
    };
    SummarizerHandler.mapDBEntriesToUserReports = function (userReportsInDb) {
        return userReportsInDb.map(function (assesmentDetail) {
            return {
                totalTimespent: Number(assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_TOTAL_TS]),
                score: NumberUtil.toFixed(assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_SCORE]),
                hData: assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_HIERARCHY_DATA],
                contentId: assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_CONTENT_ID],
                uid: assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_UID],
                userName: assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_HANDLE],
                timespent: Number(assesmentDetail[LearnerAssessmentsEntry.COLUMN_NAME_TIME_SPENT])
            };
        });
    };
    SummarizerHandler.mapTelemetryToContentSummaryDetails = function (telemetry) {
        var eData = telemetry.edata;
        var question = eData.item;
        var cDataList = telemetry.context.cdata;
        return {
            uid: telemetry.actor.id,
            contentId: telemetry.object.id,
            timespent: Number(eData.duration),
            timestamp: telemetry.ets,
            hierarchyData: this.getHierarchyData(cDataList)
        };
    };
    SummarizerHandler.mapTelemetryToLearnerAssesmentDetails = function (telemetry) {
        var eData = telemetry.edata;
        var question = eData.item;
        var cDataList = telemetry.context.cdata;
        return {
            uid: telemetry.actor.id,
            contentId: telemetry.object.id,
            qid: question && question.id,
            qindex: Number(eData.index),
            correct: eData.pass === 'Yes' ? 1 : 0,
            score: Number(eData.score),
            timespent: Number(eData.duration),
            timestamp: telemetry.ets,
            res: JSON.stringify(eData.resvalues),
            qdesc: question && question.desc,
            qtitle: question && question.title,
            maxScore: question && Number(question.maxscore),
            hierarchyData: this.getHierarchyData(cDataList)
        };
    };
    SummarizerHandler.getHierarchyData = function (cDataList) {
        var hierarchyData = '';
        if (cDataList) {
            cDataList.forEach(function (cData) {
                if (cData.type === 'Collection' || cData.type === 'TextBook') {
                    return hierarchyData = cData.id;
                }
            });
        }
        return '';
    };
    return SummarizerHandler;
}());
export { SummarizerHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyaXplci1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N1bW1hcml6ZXIvaGFuZGxlci9zdW1tYXJpemVyLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDckYsT0FBTyxFQU1ILG1CQUFtQixFQUV0QixNQUFNLElBQUksQ0FBQztBQUNaLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUlsRDtJQUNJO0lBQ0EsQ0FBQztJQUVhLHVEQUFxQyxHQUFuRCxVQUFvRCx3QkFBa0Q7O1FBRWxHO1lBQ0ksR0FBQyx1QkFBdUIsQ0FBQyxlQUFlLElBQUcsd0JBQXdCLENBQUMsR0FBRztZQUN2RSxHQUFDLHVCQUF1QixDQUFDLHNCQUFzQixJQUFHLHdCQUF3QixDQUFDLFNBQVM7WUFDcEYsR0FBQyx1QkFBdUIsQ0FBQyxlQUFlLElBQUcsd0JBQXdCLENBQUMsR0FBRztZQUN2RSxHQUFDLHVCQUF1QixDQUFDLG1CQUFtQixJQUFHLHdCQUF3QixDQUFDLE1BQU07WUFDOUUsR0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsSUFBRyx3QkFBd0IsQ0FBQyxPQUFPO1lBQy9FLEdBQUMsdUJBQXVCLENBQUMsaUJBQWlCLElBQUcsd0JBQXdCLENBQUMsS0FBSztZQUMzRSxHQUFDLHVCQUF1QixDQUFDLHNCQUFzQixJQUFHLHdCQUF3QixDQUFDLFNBQVM7WUFDcEYsR0FBQyx1QkFBdUIsQ0FBQyxlQUFlLElBQUcsd0JBQXdCLENBQUMsR0FBRztZQUN2RSxHQUFDLHVCQUF1QixDQUFDLHFCQUFxQixJQUFHLHdCQUF3QixDQUFDLFNBQVM7WUFDbkYsR0FBQyx1QkFBdUIsQ0FBQyxrQkFBa0IsSUFBRyx3QkFBd0IsQ0FBQyxLQUFLO1lBQzVFLEdBQUMsdUJBQXVCLENBQUMsbUJBQW1CLElBQUcs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QUFDO2lCQUNuQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTCx3QkFBQztBQUFELENBQUMsQUFyTkQsSUFxTkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LCBMZWFybmVyU3VtbWFyeUVudHJ5fSBmcm9tICcuLi8uLi9wcm9maWxlL2RiL3NjaGVtYSc7XG5pbXBvcnQge1xuICAgIENvbnRlbnRDYWNoZSxcbiAgICBMZWFybmVyQXNzZXNzbWVudERldGFpbHMsXG4gICAgTGVhcm5lckFzc2Vzc21lbnRTdW1tYXJ5LFxuICAgIExlYXJuZXJDb250ZW50U3VtbWFyeURldGFpbHMsXG4gICAgUXVlc3Rpb25TdW1tYXJ5LFxuICAgIFJlcG9ydERldGFpbFBlclVzZXIsXG4gICAgVXNlclJlcG9ydFN1bW1hcnlcbn0gZnJvbSAnLi4nO1xuaW1wb3J0IHtOdW1iZXJVdGlsfSBmcm9tICcuLi8uLi91dGlsL251bWJlci11dGlsJztcbmltcG9ydCB7Q29ycmVsYXRpb25EYXRhLCBTdW5iaXJkVGVsZW1ldHJ5fSBmcm9tICcuLi8uLi90ZWxlbWV0cnknO1xuaW1wb3J0IFRlbGVtZXRyeSA9IFN1bmJpcmRUZWxlbWV0cnkuVGVsZW1ldHJ5O1xuXG5leHBvcnQgY2xhc3MgU3VtbWFyaXplckhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbWFwTGVhcm5lckFzc2VzbWVudERldGFpbHNUb0RiRW50cmllcyhsZWFybmVyQXNzZXNzbWVudERldGFpbHM6IExlYXJuZXJBc3Nlc3NtZW50RGV0YWlscyk6XG4gICAgICAgIExlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LlNjaGVtYU1hcCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVUlEXTogbGVhcm5lckFzc2Vzc21lbnREZXRhaWxzLnVpZCxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lEXTogbGVhcm5lckFzc2Vzc21lbnREZXRhaWxzLmNvbnRlbnRJZCxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9RSURdOiBsZWFybmVyQXNzZXNzbWVudERldGFpbHMucWlkLFxuICAgICAgICAgICAgW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FfSU5ERVhdOiBsZWFybmVyQXNzZXNzbWVudERldGFpbHMucWluZGV4LFxuICAgICAgICAgICAgW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX0NPUlJFQ1RdOiBsZWFybmVyQXNzZXNzbWVudERldGFpbHMuY29ycmVjdCxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9TQ09SRV06IGxlYXJuZXJBc3Nlc3NtZW50RGV0YWlscy5zY29yZSxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9USU1FX1NQRU5UXTogbGVhcm5lckFzc2Vzc21lbnREZXRhaWxzLnRpbWVzcGVudCxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9SRVNdOiBsZWFybmVyQXNzZXNzbWVudERldGFpbHMucmVzLFxuICAgICAgICAgICAgW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1RJTUVTVEFNUF06IGxlYXJuZXJBc3Nlc3NtZW50RGV0YWlscy50aW1lc3RhbXAsXG4gICAgICAgICAgICBbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfUV9ERVNDXTogbGVhcm5lckFzc2Vzc21lbnREZXRhaWxzLnFkZXNjLFxuICAgICAgICAgICAgW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FfVElUTEVdOiBsZWFybmVyQXNzZXNzbWVudERldGFpbHMucXRpdGxlLFxuICAgICAgICAgICAgW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX01BWF9TQ09SRV06IGxlYXJuZXJBc3Nlc3NtZW50RGV0YWlscy5tYXhTY29yZSxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9ISUVSQVJDSFlfREFUQV06IGxlYXJuZXJBc3Nlc3NtZW50RGV0YWlscy5oaWVyYXJjaHlEYXRhLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbWFwQ29udGVudFN1bW1hcnlEZXRhaWxzVG9EYkVudHJpZXMobGVhcm5lckNvbnRlbnRTdW1tYXJ5RGV0YWlsczogTGVhcm5lckNvbnRlbnRTdW1tYXJ5RGV0YWlscyk6XG4gICAgICAgIExlYXJuZXJTdW1tYXJ5RW50cnkuU2NoZW1hTWFwIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtMZWFybmVyU3VtbWFyeUVudHJ5LkNPTFVNTl9OQU1FX1VJRF06IGxlYXJuZXJDb250ZW50U3VtbWFyeURldGFpbHMudWlkLFxuICAgICAgICAgICAgW0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfQ09OVEVOVF9JRF06IGxlYXJuZXJDb250ZW50U3VtbWFyeURldGFpbHMuY29udGVudElkLFxuICAgICAgICAgICAgW0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfQVZHX1RTXTogbGVhcm5lckNvbnRlbnRTdW1tYXJ5RGV0YWlscy5hdmd0cyEsXG4gICAgICAgICAgICBbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9UT1RBTF9UU106IGxlYXJuZXJDb250ZW50U3VtbWFyeURldGFpbHMudG90YWx0cyEsXG4gICAgICAgICAgICBbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9MQVNUX1VQREFURURfT05dOiBsZWFybmVyQ29udGVudFN1bW1hcnlEZXRhaWxzLmxhc3RVcGRhdGVkISxcbiAgICAgICAgICAgIFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9ISUVSQVJDSFlfREFUQV06IGxlYXJuZXJDb250ZW50U3VtbWFyeURldGFpbHMuaGllcmFyY2h5RGF0YSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1hcERCRW50cmllc1RvTGVhcm5lckFzc2VzbWVudFN1bW1hcnkoYXNzZXNtZW50c0luRGI6IExlYXJuZXJTdW1tYXJ5RW50cnkuU2NoZW1hTWFwW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiBNYXA8c3RyaW5nLCBDb250ZW50Q2FjaGU+KTogTGVhcm5lckFzc2Vzc21lbnRTdW1tYXJ5W10ge1xuICAgICAgICByZXR1cm4gYXNzZXNtZW50c0luRGJcbiAgICAgICAgICAgIC8vIC5maWx0ZXIoKGFzc2VzbWVudDogTGVhcm5lclN1bW1hcnlFbnRyeS5TY2hlbWFNYXApID0+IHtcbiAgICAgICAgICAgIC8vICAgICBjb25zdCBjb250ZW50Q2FjaGU6IENvbnRlbnRDYWNoZSB8IHVuZGVmaW5lZCA9IGNhY2hlLmdldChhc3Nlc21lbnRbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lEXSk7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuICEhY29udGVudENhY2hlO1xuICAgICAgICAgICAgLy8gfSlcbiAgICAgICAgICAgIC5tYXAoKGFzc2VzbWVudDogTGVhcm5lclN1bW1hcnlFbnRyeS5TY2hlbWFNYXApID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50Q2FjaGU6IENvbnRlbnRDYWNoZSB8IHVuZGVmaW5lZCA9IGNhY2hlLmdldChhc3Nlc21lbnRbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lEXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdWlkOiBhc3Nlc21lbnRbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9VSURdLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRJZDogYXNzZXNtZW50W0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfQ09OVEVOVF9JRF0udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgbm9PZlF1ZXN0aW9uczogTnVtYmVyVXRpbC5wYXJzZUludChhc3Nlc21lbnRbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9OT19PRl9RVUVTVElPTlNdKSxcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdEFuc3dlcnM6IE51bWJlclV0aWwucGFyc2VJbnQoYXNzZXNtZW50W0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfQ09SUkVDVF9BTlNXRVJTXSksXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsVGltZXNwZW50OiBOdW1iZXIoYXNzZXNtZW50W0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfVE9UQUxfVElNRV9TUEVOVF0pLFxuICAgICAgICAgICAgICAgICAgICBoaWVyYXJjaHlEYXRhOiBhc3Nlc21lbnRbTGVhcm5lclN1bW1hcnlFbnRyeS5DT0xVTU5fTkFNRV9ISUVSQVJDSFlfREFUQV0udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxNYXhTY29yZTogTnVtYmVyVXRpbC50b0ZpeGVkKGFzc2VzbWVudFtMZWFybmVyU3VtbWFyeUVudHJ5LkNPTFVNTl9OQU1FX1RPVEFMX01BWF9TQ09SRV0pLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbFNjb3JlOiBOdW1iZXJVdGlsLnRvRml4ZWQoYXNzZXNtZW50W0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfVE9UQUxfU0NPUkVdKSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxRdWVzdGlvbnNTY29yZTogY29udGVudENhY2hlID8gY29udGVudENhY2hlIS50b3RhbFNjb3JlIDogMCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogY29udGVudENhY2hlID8gY29udGVudENhY2hlIS5uYW1lIDogYXNzZXNtZW50W0xlYXJuZXJTdW1tYXJ5RW50cnkuQ09MVU1OX05BTUVfQ09OVEVOVF9JRF0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbWFwREJFbnRyaWVzVG9MZWFybmVyQXNzZXNtZW50RGV0YWlscyhhc3Nlc21lbnREZXRhaWxzSW5EYjogTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuU2NoZW1hTWFwW10pOlxuICAgICAgICBNYXA8c3RyaW5nLCBSZXBvcnREZXRhaWxQZXJVc2VyPiB7XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXA8c3RyaW5nLCBSZXBvcnREZXRhaWxQZXJVc2VyPigpO1xuICAgICAgICBhc3Nlc21lbnREZXRhaWxzSW5EYi5tYXAoKGFzc2VzbWVudERldGFpbEluRGI6IExlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LlNjaGVtYU1hcCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXNzZXNtZW50RGV0YWlsczogTGVhcm5lckFzc2Vzc21lbnREZXRhaWxzID0ge1xuICAgICAgICAgICAgICAgIHVpZDogYXNzZXNtZW50RGV0YWlsSW5EYltMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9VSURdLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRJZDogYXNzZXNtZW50RGV0YWlsSW5EYltMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lEXSxcbiAgICAgICAgICAgICAgICBxaWQ6IGFzc2VzbWVudERldGFpbEluRGJbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfUUlEXSxcbiAgICAgICAgICAgICAgICBxaW5kZXg6IE51bWJlcihhc3Nlc21lbnREZXRhaWxJbkRiW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FfSU5ERVhdKSxcbiAgICAgICAgICAgICAgICBjb3JyZWN0OiBOdW1iZXJVdGlsLnBhcnNlSW50KGFzc2VzbWVudERldGFpbEluRGJbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfQ09SUkVDVF0pLFxuICAgICAgICAgICAgICAgIHNjb3JlOiBOdW1iZXJVdGlsLnRvRml4ZWQoYXNzZXNtZW50RGV0YWlsSW5EYltMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9TQ09SRV0pLFxuICAgICAgICAgICAgICAgIHRpbWVzcGVudDogTnVtYmVyKGFzc2VzbWVudERldGFpbEluRGJbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVElNRV9TUEVOVF0pLFxuICAgICAgICAgICAgICAgIHJlczogYXNzZXNtZW50RGV0YWlsSW5EYltMZWFybmVyQXNzZXNzbWVudHNFbnRyeVtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9SRVNdXSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IE51bWJlcihhc3Nlc21lbnREZXRhaWxJbkRiW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1RJTUVTVEFNUF0pLFxuICAgICAgICAgICAgICAgIHFkZXNjOiBhc3Nlc21lbnREZXRhaWxJbkRiW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FfREVTQ10sXG4gICAgICAgICAgICAgICAgcXRpdGxlOiBhc3Nlc21lbnREZXRhaWxJbkRiW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FfVElUTEVdLFxuICAgICAgICAgICAgICAgIG1heFNjb3JlOiBOdW1iZXJVdGlsLnRvRml4ZWQoYXNzZXNtZW50RGV0YWlsSW5EYltMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9NQVhfU0NPUkVdKSxcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHlEYXRhOiBhc3Nlc21lbnREZXRhaWxJbkRiW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX0hJRVJBUkNIWV9EQVRBXSxcbiAgICAgICAgICAgICAgICB0b3RhbF90czogTnVtYmVyKGFzc2VzbWVudERldGFpbEluRGJbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVE9UQUxfVFNdKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCByZXBvcnRQZXJVc2VyOiBSZXBvcnREZXRhaWxQZXJVc2VyID0gbWFwLmdldChhc3Nlc21lbnREZXRhaWxzLnVpZCkhO1xuICAgICAgICAgICAgaWYgKHJlcG9ydFBlclVzZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydFBlclVzZXIgPSBuZXcgUmVwb3J0RGV0YWlsUGVyVXNlcigpO1xuICAgICAgICAgICAgICAgIHJlcG9ydFBlclVzZXIudWlkID0gYXNzZXNtZW50RGV0YWlscy51aWQ7XG4gICAgICAgICAgICAgICAgcmVwb3J0UGVyVXNlci50b3RhbFNjb3JlID0gMDtcbiAgICAgICAgICAgICAgICByZXBvcnRQZXJVc2VyLm1heFRvdGFsU2NvcmUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVwb3J0UGVyVXNlci5yZXBvcnREZXRhaWxzTGlzdC5wdXNoKGFzc2VzbWVudERldGFpbHMpO1xuICAgICAgICAgICAgcmVwb3J0UGVyVXNlci50b3RhbFNjb3JlICs9IGFzc2VzbWVudERldGFpbHMuc2NvcmU7XG4gICAgICAgICAgICByZXBvcnRQZXJVc2VyLnRvdGFsVGltZSA9IGFzc2VzbWVudERldGFpbHMudG90YWxfdHMhO1xuICAgICAgICAgICAgcmVwb3J0UGVyVXNlci5tYXhUb3RhbFNjb3JlICs9IGFzc2VzbWVudERldGFpbHMubWF4U2NvcmU7XG4gICAgICAgICAgICByZXBvcnRQZXJVc2VyLnRvdGFsU2NvcmUgPSBwYXJzZUZsb2F0KHJlcG9ydFBlclVzZXIudG90YWxTY29yZS50b0ZpeGVkKDIpKTtcbiAgICAgICAgICAgIG1hcC5zZXQoYXNzZXNtZW50RGV0YWlscy51aWQsIHJlcG9ydFBlclVzZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1hcERCRW50cmllc1RvUXVlc3Rpb25SZXBvcnRzKGFjY3VyYWN5TWFwOiB7IFtwOiBzdHJpbmddOiBhbnkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uUmVwb3J0c0luRGI6IExlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LlF1ZXN0aW9uUmVwb3J0c1NjaGVtYVtdKTpcbiAgICAgICAgTGVhcm5lckFzc2Vzc21lbnREZXRhaWxzW10ge1xuICAgICAgICByZXR1cm4gcXVlc3Rpb25SZXBvcnRzSW5EYi5tYXAoKHF1ZXN0aW9uUmVwb3J0OiBMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5TY2hlbWFNYXApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHFpZCA9IHF1ZXN0aW9uUmVwb3J0W0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FJRF07XG4gICAgICAgICAgICBsZXQgY29ycmVjdFVzZXJDb3VudCA9IDA7XG4gICAgICAgICAgICBpZiAoYWNjdXJhY3lNYXAuaGFzT3duUHJvcGVydHkocWlkKSkge1xuICAgICAgICAgICAgICAgIGNvcnJlY3RVc2VyQ291bnQgPSBOdW1iZXJVdGlsLnBhcnNlSW50KGFjY3VyYWN5TWFwW3FpZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1aWQ6IHF1ZXN0aW9uUmVwb3J0W0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1VJRF0sXG4gICAgICAgICAgICAgICAgY29udGVudElkOiBxdWVzdGlvblJlcG9ydFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9DT05URU5UX0lEXSxcbiAgICAgICAgICAgICAgICBxaWQ6IHF1ZXN0aW9uUmVwb3J0W0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FJRF0sXG4gICAgICAgICAgICAgICAgcWluZGV4OiBOdW1iZXIocXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfUV9JTkRFWF0pLFxuICAgICAgICAgICAgICAgIGNvcnJlY3Q6IE51bWJlclV0aWwucGFyc2VJbnQocXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfQ09SUkVDVF0pLFxuICAgICAgICAgICAgICAgIHNjb3JlOiBOdW1iZXJVdGlsLnRvRml4ZWQocXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfU0NPUkVdKSxcbiAgICAgICAgICAgICAgICB0aW1lc3BlbnQ6IE51bWJlcihxdWVzdGlvblJlcG9ydFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9USU1FX1NQRU5UXSksXG4gICAgICAgICAgICAgICAgcmVzOiBxdWVzdGlvblJlcG9ydFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeVtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9SRVNdXSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IE51bWJlcihxdWVzdGlvblJlcG9ydFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9USU1FU1RBTVBdKSxcbiAgICAgICAgICAgICAgICBxZGVzYzogcXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfUV9ERVNDXSxcbiAgICAgICAgICAgICAgICBxdGl0bGU6IHF1ZXN0aW9uUmVwb3J0W0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1FfVElUTEVdLFxuICAgICAgICAgICAgICAgIG1heFNjb3JlOiBOdW1iZXJVdGlsLnRvRml4ZWQocXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfTUFYX1NDT1JFXSksXG4gICAgICAgICAgICAgICAgaGllcmFyY2h5RGF0YTogcXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfSElFUkFSQ0hZX0RBVEFdLFxuICAgICAgICAgICAgICAgIHRvdGFsX3RzOiBOdW1iZXIocXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVE9UQUxfVFNdKSxcbiAgICAgICAgICAgICAgICBtYXJrczogTnVtYmVyKHF1ZXN0aW9uUmVwb3J0W0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX01BUktTXSksXG4gICAgICAgICAgICAgICAgb2NjdXJlbmNlQ291bnQ6IHF1ZXN0aW9uUmVwb3J0W0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX0NPVU5UXSxcbiAgICAgICAgICAgICAgICBzdW1fbWF4X3Njb3JlOiBOdW1iZXIocXVlc3Rpb25SZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVE9UQUxfTUFYX1NDT1JFXSksXG4gICAgICAgICAgICAgICAgY29ycmVjdF91c2Vyc19jb3VudDogY29ycmVjdFVzZXJDb3VudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtYXBEQkVudHJpZXNUb0FjY3VyYWN5KGFjY3VyYWN5UmVwb3J0c0luRGI6IExlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkFjY3VyYWN5U2NoZW1hW10pOlxuICAgICAgICB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHtcbiAgICAgICAgY29uc3QgYWNjdXJhY3k6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgICAgYWNjdXJhY3lSZXBvcnRzSW5EYi5tYXAoKGFjY3VyYWN5UmVwb3J0OiBMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5BY2N1cmFjeVNjaGVtYSkgPT4ge1xuICAgICAgICAgICAgYWNjdXJhY3lbYWNjdXJhY3lSZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfUUlEXV0gPVxuICAgICAgICAgICAgICAgIE51bWJlclV0aWwucGFyc2VJbnQoYWNjdXJhY3lSZXBvcnRbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVVNFUlNfQ09VTlRdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhY2N1cmFjeTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1hcERCRW50cmllc1RvUXVlc3Rpb25EZXRhaWxzKHF1ZXN0aW9uU3VtbWFyaWVzOiBRdWVzdGlvblN1bW1hcnlbXSk6IFF1ZXN0aW9uU3VtbWFyeVtdIHtcbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9uU3VtbWFyaWVzLm1hcCgocXVlc3Rpb25TdW1tYXJ5OiBRdWVzdGlvblN1bW1hcnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdWlkOiBxdWVzdGlvblN1bW1hcnkudWlkLFxuICAgICAgICAgICAgICAgIHRpbWU6IE51bWJlcihxdWVzdGlvblN1bW1hcnkudGltZSksXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBOdW1iZXJVdGlsLnJvdW5kKHF1ZXN0aW9uU3VtbWFyeS5yZXN1bHQpLFxuICAgICAgICAgICAgICAgIG1heF9zY29yZTogTnVtYmVyVXRpbC5wYXJzZUludChxdWVzdGlvblN1bW1hcnkubWF4X3Njb3JlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtYXBEQkVudHJpZXNUb1VzZXJSZXBvcnRzKHVzZXJSZXBvcnRzSW5EYjogTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuVXNlclJlcG9ydFNjaGVtYVtdKTpcbiAgICAgICAgVXNlclJlcG9ydFN1bW1hcnlbXSB7XG4gICAgICAgIHJldHVybiB1c2VyUmVwb3J0c0luRGIubWFwKChhc3Nlc21lbnREZXRhaWw6IExlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LlVzZXJSZXBvcnRTY2hlbWEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG90YWxUaW1lc3BlbnQ6IE51bWJlcihhc3Nlc21lbnREZXRhaWxbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfVE9UQUxfVFNdKSxcbiAgICAgICAgICAgICAgICBzY29yZTogTnVtYmVyVXRpbC50b0ZpeGVkKGFzc2VzbWVudERldGFpbFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9TQ09SRV0pLFxuICAgICAgICAgICAgICAgIGhEYXRhOiBhc3Nlc21lbnREZXRhaWxbTGVhcm5lckFzc2Vzc21lbnRzRW50cnkuQ09MVU1OX05BTUVfSElFUkFSQ0hZX0RBVEFdLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRJZDogYXNzZXNtZW50RGV0YWlsW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX0NPTlRFTlRfSURdLFxuICAgICAgICAgICAgICAgIHVpZDogYXNzZXNtZW50RGV0YWlsW0xlYXJuZXJBc3Nlc3NtZW50c0VudHJ5LkNPTFVNTl9OQU1FX1VJRF0sXG4gICAgICAgICAgICAgICAgdXNlck5hbWU6IGFzc2VzbWVudERldGFpbFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9IQU5ETEVdLFxuICAgICAgICAgICAgICAgIHRpbWVzcGVudDogTnVtYmVyKGFzc2VzbWVudERldGFpbFtMZWFybmVyQXNzZXNzbWVudHNFbnRyeS5DT0xVTU5fTkFNRV9USU1FX1NQRU5UXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbWFwVGVsZW1ldHJ5VG9Db250ZW50U3VtbWFyeURldGFpbHModGVsZW1ldHJ5OiBUZWxlbWV0cnkpOiBMZWFybmVyQ29udGVudFN1bW1hcnlEZXRhaWxzIHtcbiAgICAgICAgY29uc3QgZURhdGEgPSB0ZWxlbWV0cnkuZWRhdGE7XG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uID0gZURhdGEuaXRlbTtcbiAgICAgICAgY29uc3QgY0RhdGFMaXN0OiBBcnJheTxDb3JyZWxhdGlvbkRhdGE+ID0gdGVsZW1ldHJ5LmNvbnRleHQuY2RhdGE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1aWQ6IHRlbGVtZXRyeS5hY3Rvci5pZCxcbiAgICAgICAgICAgIGNvbnRlbnRJZDogdGVsZW1ldHJ5Lm9iamVjdC5pZCxcbiAgICAgICAgICAgIHRpbWVzcGVudDogTnVtYmVyKGVEYXRhLmR1cmF0aW9uKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGVsZW1ldHJ5LmV0cyxcbiAgICAgICAgICAgIGhpZXJhcmNoeURhdGE6IHRoaXMuZ2V0SGllcmFyY2h5RGF0YShjRGF0YUxpc3QpXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1hcFRlbGVtZXRyeVRvTGVhcm5lckFzc2VzbWVudERldGFpbHModGVsZW1ldHJ5OiBUZWxlbWV0cnkpOiBMZWFybmVyQXNzZXNzbWVudERldGFpbHMge1xuICAgICAgICBjb25zdCBlRGF0YSA9IHRlbGVtZXRyeS5lZGF0YTtcbiAgICAgICAgY29uc3QgcXVlc3Rpb24gPSBlRGF0YS5pdGVtO1xuICAgICAgICBjb25zdCBjRGF0YUxpc3Q6IEFycmF5PENvcnJlbGF0aW9uRGF0YT4gPSB0ZWxlbWV0cnkuY29udGV4dC5jZGF0YTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVpZDogdGVsZW1ldHJ5LmFjdG9yLmlkLFxuICAgICAgICAgICAgY29udGVudElkOiB0ZWxlbWV0cnkub2JqZWN0LmlkLFxuICAgICAgICAgICAgcWlkOiBxdWVzdGlvbiAmJiBxdWVzdGlvbi5pZCxcbiAgICAgICAgICAgIHFpbmRleDogTnVtYmVyKGVEYXRhLmluZGV4KSxcbiAgICAgICAgICAgIGNvcnJlY3Q6IGVEYXRhLnBhc3MgPT09ICdZZXMnID8gMSA6IDAsXG4gICAgICAgICAgICBzY29yZTogTnVtYmVyKGVEYXRhLnNjb3JlKSxcbiAgICAgICAgICAgIHRpbWVzcGVudDogTnVtYmVyKGVEYXRhLmR1cmF0aW9uKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGVsZW1ldHJ5LmV0cyxcbiAgICAgICAgICAgIHJlczogSlNPTi5zdHJpbmdpZnkoZURhdGEucmVzdmFsdWVzKSxcbiAgICAgICAgICAgIHFkZXNjOiBxdWVzdGlvbiAmJiBxdWVzdGlvbi5kZXNjLFxuICAgICAgICAgICAgcXRpdGxlOiBxdWVzdGlvbiAmJiBxdWVzdGlvbi50aXRsZSxcbiAgICAgICAgICAgIG1heFNjb3JlOiBxdWVzdGlvbiAmJiBOdW1iZXIocXVlc3Rpb24ubWF4c2NvcmUpLFxuICAgICAgICAgICAgaGllcmFyY2h5RGF0YTogdGhpcy5nZXRIaWVyYXJjaHlEYXRhKGNEYXRhTGlzdClcbiAgICAgICAgfTtcblxuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0SGllcmFyY2h5RGF0YShjRGF0YUxpc3Q6IEFycmF5PENvcnJlbGF0aW9uRGF0YT4pOiBzdHJpbmcge1xuICAgICAgICBsZXQgaGllcmFyY2h5RGF0YSA9ICcnO1xuICAgICAgICBpZiAoY0RhdGFMaXN0KSB7XG4gICAgICAgICAgICBjRGF0YUxpc3QuZm9yRWFjaCgoY0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY0RhdGEudHlwZSA9PT0gJ0NvbGxlY3Rpb24nIHx8IGNEYXRhLnR5cGUgPT09ICdUZXh0Qm9vaycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhpZXJhcmNoeURhdGEgPSBjRGF0YS5pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG59XG4iXX0=