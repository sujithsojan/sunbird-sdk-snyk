import { Response } from '../../../api';
import { MetaEntry } from '../../db/schema';
import { ErrorCode } from '../../../content';
import { ArrayUtil } from '../../../util/array-util';
import { ImportedMetadataEntry } from '../../../profile/db/schema';
var ValidateTelemetryMetadata = /** @class */ (function () {
    function ValidateTelemetryMetadata(dbService) {
        this.dbService = dbService;
    }
    ValidateTelemetryMetadata.prototype.execute = function (importContext) {
        var _this = this;
        var response = new Response();
        return this.dbService.open(importContext.sourceDBFilePath).then(function () {
            return _this.dbService.read({
                table: MetaEntry.TABLE_NAME,
                useExternalDb: true
            }).toPromise();
        }).then(function (results) {
            if (!results || !results.length) {
                response.errorMesg = ErrorCode.IMPORT_FAILED.valueOf();
                throw response;
            }
            var metaData = {};
            results.forEach(function (result) {
                metaData[result['key']] = result['value'];
            });
            importContext.metadata = metaData;
            var importTypes = _this.getImportTypes(metaData);
            if (importTypes && ArrayUtil.contains(importTypes, 'telemetry')) {
                var importId = metaData['export_id'];
                var did = metaData['did'];
                return _this.dbService.read({
                    table: ImportedMetadataEntry.TABLE_NAME,
                    selection: ImportedMetadataEntry.COLUMN_NAME_IMPORTED_ID + " = ?\n                    AND " + ImportedMetadataEntry.COLUMN_NAME_DEVICE_ID + " = ?",
                    selectionArgs: [importId, did]
                }).toPromise();
            }
            else {
                response.errorMesg = ErrorCode.IMPORT_FAILED.valueOf();
                throw response;
            }
        }).then(function (importedResults) {
            if (importedResults && importedResults.length) {
                response.errorMesg = ErrorCode.IMPORT_FAILED.valueOf();
                throw response;
            }
            response.body = importContext;
            return response;
        });
    };
    ValidateTelemetryMetadata.prototype.getImportTypes = function (result) {
        var importTypes = [];
        if (result.hasOwnProperty('types')) {
            importTypes = result['types'];
        }
        return importTypes;
    };
    return ValidateTelemetryMetadata;
}());
export { ValidateTelemetryMetadata };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtdGVsZW1ldHJ5LW1ldGFkYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3RlbGVtZXRyeS9oYW5kbGVyL2ltcG9ydC92YWxpZGF0ZS10ZWxlbWV0cnktbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRTtJQUVJLG1DQUFvQixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQ3hDLENBQUM7SUFFTSwyQ0FBTyxHQUFkLFVBQWUsYUFBcUM7UUFBcEQsaUJBdUNDO1FBdENHLElBQU0sUUFBUSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDNUQsT0FBTyxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDdkIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxVQUFVO2dCQUMzQixhQUFhLEVBQUUsSUFBSTthQUN0QixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsT0FBOEI7WUFDbkMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQzdCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDdkQsTUFBTSxRQUFRLENBQUM7YUFDbEI7WUFDRCxJQUFNLFFBQVEsR0FBMkIsRUFBRSxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO2dCQUNuQixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsYUFBYSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDbEMsSUFBTSxXQUFXLEdBQWEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1RCxJQUFJLFdBQVcsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBRTtnQkFDN0QsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN2QyxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzVCLE9BQU8sS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7b0JBQ3ZCLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxVQUFVO29CQUN2QyxTQUFTLEVBQUsscUJBQXFCLENBQUMsdUJBQXVCLHNDQUNyRCxxQkFBcUIsQ0FBQyxxQkFBcUIsU0FBTTtvQkFDdkQsYUFBYSxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztpQkFDakMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ2xCO2lCQUFNO2dCQUNILFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDdkQsTUFBTSxRQUFRLENBQUM7YUFDbEI7UUFDTCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxlQUFrRDtZQUN2RCxJQUFJLGVBQWUsSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFO2dCQUMzQyxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZELE1BQU0sUUFBUSxDQUFDO2FBQ2xCO1lBQ0QsUUFBUSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7WUFDOUIsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sa0RBQWMsR0FBdEIsVUFBdUIsTUFBTTtRQUN6QixJQUFJLFdBQVcsR0FBYSxFQUFFLENBQUM7UUFDL0IsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2hDLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUV2QixDQUFDO0lBQ0wsZ0NBQUM7QUFBRCxDQUFDLEFBdERELElBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYlNlcnZpY2V9IGZyb20gJy4uLy4uLy4uL2RiJztcbmltcG9ydCB7SW1wb3J0VGVsZW1ldHJ5Q29udGV4dH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHtSZXNwb25zZX0gZnJvbSAnLi4vLi4vLi4vYXBpJztcbmltcG9ydCB7TWV0YUVudHJ5fSBmcm9tICcuLi8uLi9kYi9zY2hlbWEnO1xuaW1wb3J0IHtFcnJvckNvZGV9IGZyb20gJy4uLy4uLy4uL2NvbnRlbnQnO1xuaW1wb3J0IHtBcnJheVV0aWx9IGZyb20gJy4uLy4uLy4uL3V0aWwvYXJyYXktdXRpbCc7XG5pbXBvcnQge0ltcG9ydGVkTWV0YWRhdGFFbnRyeX0gZnJvbSAnLi4vLi4vLi4vcHJvZmlsZS9kYi9zY2hlbWEnO1xuXG5leHBvcnQgY2xhc3MgVmFsaWRhdGVUZWxlbWV0cnlNZXRhZGF0YSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRiU2VydmljZTogRGJTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGV4ZWN1dGUoaW1wb3J0Q29udGV4dDogSW1wb3J0VGVsZW1ldHJ5Q29udGV4dCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2U6IFJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRiU2VydmljZS5vcGVuKGltcG9ydENvbnRleHQuc291cmNlREJGaWxlUGF0aCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYlNlcnZpY2UucmVhZCh7XG4gICAgICAgICAgICAgICAgdGFibGU6IE1ldGFFbnRyeS5UQUJMRV9OQU1FLFxuICAgICAgICAgICAgICAgIHVzZUV4dGVybmFsRGI6IHRydWVcbiAgICAgICAgICAgIH0pLnRvUHJvbWlzZSgpO1xuICAgICAgICB9KS50aGVuKChyZXN1bHRzOiBNZXRhRW50cnkuU2NoZW1hTWFwW10pID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0cyB8fCAhcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5lcnJvck1lc2cgPSBFcnJvckNvZGUuSU1QT1JUX0ZBSUxFRC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXRhRGF0YTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgICAgICAgICAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBtZXRhRGF0YVtyZXN1bHRbJ2tleSddXSA9IHJlc3VsdFsndmFsdWUnXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW1wb3J0Q29udGV4dC5tZXRhZGF0YSA9IG1ldGFEYXRhO1xuICAgICAgICAgICAgY29uc3QgaW1wb3J0VHlwZXM6IHN0cmluZ1tdID0gdGhpcy5nZXRJbXBvcnRUeXBlcyhtZXRhRGF0YSk7XG4gICAgICAgICAgICBpZiAoaW1wb3J0VHlwZXMgJiYgQXJyYXlVdGlsLmNvbnRhaW5zKGltcG9ydFR5cGVzLCAndGVsZW1ldHJ5JykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbXBvcnRJZCA9IG1ldGFEYXRhWydleHBvcnRfaWQnXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaWQgPSBtZXRhRGF0YVsnZGlkJ107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGJTZXJ2aWNlLnJlYWQoe1xuICAgICAgICAgICAgICAgICAgICB0YWJsZTogSW1wb3J0ZWRNZXRhZGF0YUVudHJ5LlRBQkxFX05BTUUsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbjogYCR7SW1wb3J0ZWRNZXRhZGF0YUVudHJ5LkNPTFVNTl9OQU1FX0lNUE9SVEVEX0lEfSA9ID9cbiAgICAgICAgICAgICAgICAgICAgQU5EICR7SW1wb3J0ZWRNZXRhZGF0YUVudHJ5LkNPTFVNTl9OQU1FX0RFVklDRV9JRH0gPSA/YCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uQXJnczogW2ltcG9ydElkLCBkaWRdXG4gICAgICAgICAgICAgICAgfSkudG9Qcm9taXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yTWVzZyA9IEVycm9yQ29kZS5JTVBPUlRfRkFJTEVELnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigoaW1wb3J0ZWRSZXN1bHRzOiBJbXBvcnRlZE1ldGFkYXRhRW50cnkuU2NoZW1hTWFwW10pID0+IHtcbiAgICAgICAgICAgIGlmIChpbXBvcnRlZFJlc3VsdHMgJiYgaW1wb3J0ZWRSZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yTWVzZyA9IEVycm9yQ29kZS5JTVBPUlRfRkFJTEVELnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSBpbXBvcnRDb250ZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEltcG9ydFR5cGVzKHJlc3VsdCk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGltcG9ydFR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAocmVzdWx0Lmhhc093blByb3BlcnR5KCd0eXBlcycpKSB7XG4gICAgICAgICAgICBpbXBvcnRUeXBlcyA9IHJlc3VsdFsndHlwZXMnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1wb3J0VHlwZXM7XG5cbiAgICB9XG59XG4iXX0=