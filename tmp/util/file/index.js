export var LocalFileSystem;
(function (LocalFileSystem) {
    LocalFileSystem[LocalFileSystem["PERSISTENT"] = 1] = "PERSISTENT";
    LocalFileSystem[LocalFileSystem["TEMPORARY"] = 0] = "TEMPORARY";
})(LocalFileSystem || (LocalFileSystem = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbC9maWxlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVUQSxNQUFNLENBQU4sSUFBWSxlQUdYO0FBSEQsV0FBWSxlQUFlO0lBQ3ZCLGlFQUFjLENBQUE7SUFDZCwrREFBYSxDQUFBO0FBQ2pCLENBQUMsRUFIVyxlQUFlLEtBQWYsZUFBZSxRQUcxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBUaGlzIGludGVyZmFjZSByZXByZXNlbnRzIGEgZmlsZSBzeXN0ZW0uICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTeXN0ZW0ge1xuICAgIC8qIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHN5c3RlbSwgdW5pcXVlIGFjcm9zcyB0aGUgbGlzdCBvZiBleHBvc2VkIGZpbGUgc3lzdGVtcy4gKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqIFRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgZmlsZSBzeXN0ZW0uICovXG4gICAgcm9vdDogRGlyZWN0b3J5RW50cnk7XG59XG5cbi8qKlxuICogQW4gYWJzdHJhY3QgaW50ZXJmYWNlIHJlcHJlc2VudGluZyBlbnRyaWVzIGluIGEgZmlsZSBzeXN0ZW0sXG4gKiBlYWNoIG9mIHdoaWNoIG1heSBiZSBhIEZpbGUgb3IgRGlyZWN0b3J5RW50cnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW50cnkge1xuICAgIC8qKiBFbnRyeSBpcyBhIGZpbGUuICovXG4gICAgaXNGaWxlOiBib29sZWFuO1xuICAgIC8qKiBFbnRyeSBpcyBhIGRpcmVjdG9yeS4gKi9cbiAgICBpc0RpcmVjdG9yeTogYm9vbGVhbjtcbiAgICAvKiogVGhlIG5hbWUgb2YgdGhlIGVudHJ5LCBleGNsdWRpbmcgdGhlIHBhdGggbGVhZGluZyB0byBpdC4gKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqIFRoZSBmdWxsIGFic29sdXRlIHBhdGggZnJvbSB0aGUgcm9vdCB0byB0aGUgZW50cnkuICovXG4gICAgZnVsbFBhdGg6IHN0cmluZztcbiAgICAvKiogVGhlIGZpbGUgc3lzdGVtIG9uIHdoaWNoIHRoZSBlbnRyeSByZXNpZGVzLiAqL1xuICAgIGZpbGVzeXN0ZW06IEZpbGVTeXN0ZW07XG4gICAgbmF0aXZlVVJMOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBMb29rIHVwIG1ldGFkYXRhIGFib3V0IHRoaXMgZW50cnkuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdpdGggdGhlIHRpbWUgb2YgdGhlIGxhc3QgbW9kaWZpY2F0aW9uLlxuICAgICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrICAgQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGVycm9ycyBoYXBwZW4uXG4gICAgICovXG4gICAgZ2V0TWV0YWRhdGEoXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogKG1ldGFkYXRhOiBNZXRhZGF0YSkgPT4gdm9pZCxcbiAgICAgICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogRmlsZUVycm9yKSA9PiB2b2lkKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIE1vdmUgYW4gZW50cnkgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gb24gdGhlIGZpbGUgc3lzdGVtLiBJdCBpcyBhbiBlcnJvciB0byB0cnkgdG86XG4gICAgICogICAgIG1vdmUgYSBkaXJlY3RvcnkgaW5zaWRlIGl0c2VsZiBvciB0byBhbnkgY2hpbGQgYXQgYW55IGRlcHRoO21vdmUgYW4gZW50cnkgaW50byBpdHMgcGFyZW50IGlmIGEgbmFtZSBkaWZmZXJlbnRcbiAgICAgKiAgICAgZnJvbSBpdHMgY3VycmVudCBvbmUgaXNuJ3QgcHJvdmlkZWQ7XG4gICAgICogICAgIG1vdmUgYSBmaWxlIHRvIGEgcGF0aCBvY2N1cGllZCBieSBhIGRpcmVjdG9yeTtcbiAgICAgKiAgICAgbW92ZSBhIGRpcmVjdG9yeSB0byBhIHBhdGggb2NjdXBpZWQgYnkgYSBmaWxlO1xuICAgICAqICAgICBtb3ZlIGFueSBlbGVtZW50IHRvIGEgcGF0aCBvY2N1cGllZCBieSBhIGRpcmVjdG9yeSB3aGljaCBpcyBub3QgZW1wdHkuXG4gICAgICogQSBtb3ZlIG9mIGEgZmlsZSBvbiB0b3Agb2YgYW4gZXhpc3RpbmcgZmlsZSBtdXN0IGF0dGVtcHQgdG8gZGVsZXRlIGFuZCByZXBsYWNlIHRoYXQgZmlsZS5cbiAgICAgKiBBIG1vdmUgb2YgYSBkaXJlY3Rvcnkgb24gdG9wIG9mIGFuIGV4aXN0aW5nIGVtcHR5IGRpcmVjdG9yeSBtdXN0IGF0dGVtcHQgdG8gZGVsZXRlIGFuZCByZXBsYWNlIHRoYXQgZGlyZWN0b3J5LlxuICAgICAqIEBwYXJhbSBwYXJlbnQgIFRoZSBkaXJlY3RvcnkgdG8gd2hpY2ggdG8gbW92ZSB0aGUgZW50cnkuXG4gICAgICogQHBhcmFtIG5ld05hbWUgVGhlIG5ldyBuYW1lIG9mIHRoZSBlbnRyeS4gRGVmYXVsdHMgdG8gdGhlIEVudHJ5J3MgY3VycmVudCBuYW1lIGlmIHVuc3BlY2lmaWVkLlxuICAgICAqIEBwYXJhbSBzdWNjZXNzQ2FsbGJhY2sgQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aXRoIHRoZSBFbnRyeSBmb3IgdGhlIG5ldyBsb2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gZXJyb3JDYWxsYmFjayAgIEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBlcnJvcnMgaGFwcGVuLlxuICAgICAqL1xuICAgIG1vdmVUbyhwYXJlbnQ6IERpcmVjdG9yeUVudHJ5LFxuICAgICAgICAgICBuZXdOYW1lPzogc3RyaW5nLFxuICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s/OiAoZW50cnk6IEVudHJ5KSA9PiB2b2lkLFxuICAgICAgICAgICBlcnJvckNhbGxiYWNrPzogKGVycm9yOiBGaWxlRXJyb3IpID0+IHZvaWQpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQ29weSBhbiBlbnRyeSB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBvbiB0aGUgZmlsZSBzeXN0ZW0uIEl0IGlzIGFuIGVycm9yIHRvIHRyeSB0bzpcbiAgICAgKiAgICAgY29weSBhIGRpcmVjdG9yeSBpbnNpZGUgaXRzZWxmIG9yIHRvIGFueSBjaGlsZCBhdCBhbnkgZGVwdGg7XG4gICAgICogICAgIGNvcHkgYW4gZW50cnkgaW50byBpdHMgcGFyZW50IGlmIGEgbmFtZSBkaWZmZXJlbnQgZnJvbSBpdHMgY3VycmVudCBvbmUgaXNuJ3QgcHJvdmlkZWQ7XG4gICAgICogICAgIGNvcHkgYSBmaWxlIHRvIGEgcGF0aCBvY2N1cGllZCBieSBhIGRpcmVjdG9yeTtcbiAgICAgKiAgICAgY29weSBhIGRpcmVjdG9yeSB0byBhIHBhdGggb2NjdXBpZWQgYnkgYSBmaWxlO1xuICAgICAqICAgICBjb3B5IGFueSBlbGVtZW50IHRvIGEgcGF0aCBvY2N1cGllZCBieSBhIGRpcmVjdG9yeSB3aGljaCBpcyBub3QgZW1wdHkuXG4gICAgICogICAgIEEgY29weSBvZiBhIGZpbGUgb24gdG9wIG9mIGFuIGV4aXN0aW5nIGZpbGUgbXVzdCBhdHRlbXB0IHRvIGRlbGV0ZSBhbmQgcmVwbGFjZSB0aGF0IGZpbGUuXG4gICAgICogICAgIEEgY29weSBvZiBhIGRpcmVjdG9yeSBvbiB0b3Agb2YgYW4gZXhpc3RpbmcgZW1wdHkgZGlyZWN0b3J5IG11c3QgYXR0ZW1wdCB0byBkZWxldGUgYW5kIHJlcGxhY2UgdGhhdCBkaXJlY3RvcnkuXG4gICAgICogRGlyZWN0b3J5IGNvcGllcyBhcmUgYWx3YXlzIHJlY3Vyc2l2ZS0tdGhhdCBpcywgdGhleSBjb3B5IGFsbCBjb250ZW50cyBvZiB0aGUgZGlyZWN0b3J5LlxuICAgICAqIEBwYXJhbSBwYXJlbnQgVGhlIGRpcmVjdG9yeSB0byB3aGljaCB0byBtb3ZlIHRoZSBlbnRyeS5cbiAgICAgKiBAcGFyYW0gbmV3TmFtZSBUaGUgbmV3IG5hbWUgb2YgdGhlIGVudHJ5LiBEZWZhdWx0cyB0byB0aGUgRW50cnkncyBjdXJyZW50IG5hbWUgaWYgdW5zcGVjaWZpZWQuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdpdGggdGhlIEVudHJ5IGZvciB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gZXJyb3JDYWxsYmFjayBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gZXJyb3JzIGhhcHBlbi5cbiAgICAgKi9cbiAgICBjb3B5VG8ocGFyZW50OiBEaXJlY3RvcnlFbnRyeSxcbiAgICAgICAgICAgbmV3TmFtZT86IHN0cmluZyxcbiAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrPzogKGVudHJ5OiBFbnRyeSkgPT4gdm9pZCxcbiAgICAgICAgICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogRmlsZUVycm9yKSA9PiB2b2lkKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBVUkwgdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgc3JjIGF0dHJpYnV0ZSBvZiBhIDx2aWRlbz4gb3IgPGF1ZGlvPiB0YWcuXG4gICAgICogSWYgdGhhdCBpcyBub3QgcG9zc2libGUsIGNvbnN0cnVjdCBhIGNkdmZpbGU6Ly8gVVJMLlxuICAgICAqIEByZXR1cm4gc3RyaW5nIFVSTFxuICAgICAqL1xuICAgIHRvVVJMKCk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIFVSTCB0aGF0IGNhbiBiZSBwYXNzZWQgYWNyb3NzIHRoZSBicmlkZ2UgdG8gaWRlbnRpZnkgdGhpcyBlbnRyeS5cbiAgICAgKiBAcmV0dXJuIHN0cmluZyBVUkwgdGhhdCBjYW4gYmUgcGFzc2VkIGFjcm9zcyB0aGUgYnJpZGdlIHRvIGlkZW50aWZ5IHRoaXMgZW50cnlcbiAgICAgKi9cbiAgICB0b0ludGVybmFsVVJMKCk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBmaWxlIG9yIGRpcmVjdG9yeS4gSXQgaXMgYW4gZXJyb3IgdG8gYXR0ZW1wdCB0byBkZWxldGUgYSBkaXJlY3RvcnkgdGhhdCBpcyBub3QgZW1wdHkuIEl0IGlzIGFuIGVycm9yIHRvIGF0dGVtcHQgdG8gZGVsZXRlXG4gICAgICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIGEgZmlsZXN5c3RlbS5cbiAgICAgKiBAcGFyYW0gc3VjY2Vzc0NhbGxiYWNrIEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgb24gc3VjY2Vzcy5cbiAgICAgKiBAcGFyYW0gZXJyb3JDYWxsYmFjayAgIEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBlcnJvcnMgaGFwcGVuLlxuICAgICAqL1xuICAgIHJlbW92ZShzdWNjZXNzQ2FsbGJhY2s6ICgpID0+IHZvaWQsXG4gICAgICAgICAgIGVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IEZpbGVFcnJvcikgPT4gdm9pZCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBMb29rIHVwIHRoZSBwYXJlbnQgRGlyZWN0b3J5RW50cnkgY29udGFpbmluZyB0aGlzIEVudHJ5LiBJZiB0aGlzIEVudHJ5IGlzIHRoZSByb290IG9mIGl0cyBmaWxlc3lzdGVtLCBpdHMgcGFyZW50IGlzIGl0c2VsZi5cbiAgICAgKiBAcGFyYW0gc3VjY2Vzc0NhbGxiYWNrIEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2l0aCB0aGUgdGltZSBvZiB0aGUgbGFzdCBtb2RpZmljYXRpb24uXG4gICAgICogQHBhcmFtIGVycm9yQ2FsbGJhY2sgICBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gZXJyb3JzIGhhcHBlbi5cbiAgICAgKi9cbiAgICBnZXRQYXJlbnQoc3VjY2Vzc0NhbGxiYWNrOiAoZW50cnk6IEVudHJ5KSA9PiB2b2lkLFxuICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrPzogKGVycm9yOiBGaWxlRXJyb3IpID0+IHZvaWQpOiB2b2lkO1xufVxuXG4vKiogVGhpcyBpbnRlcmZhY2Ugc3VwcGxpZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN0YXRlIG9mIGEgZmlsZSBvciBkaXJlY3RvcnkuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhIHtcbiAgICAvKiogVGhpcyBpcyB0aGUgdGltZSBhdCB3aGljaCB0aGUgZmlsZSBvciBkaXJlY3Rvcnkgd2FzIGxhc3QgbW9kaWZpZWQuICovXG4gICAgbW9kaWZpY2F0aW9uVGltZTogRGF0ZTtcbiAgICAvKiogVGhlIHNpemUgb2YgdGhlIGZpbGUsIGluIGJ5dGVzLiBUaGlzIG11c3QgcmV0dXJuIDAgZm9yIGRpcmVjdG9yaWVzLiAqL1xuICAgIHNpemU6IG51bWJlcjtcbn1cblxuLyoqIFRoaXMgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSBkaXJlY3Rvcnkgb24gYSBmaWxlIHN5c3RlbS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlyZWN0b3J5RW50cnkgZXh0ZW5kcyBFbnRyeSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBEaXJlY3RvcnlSZWFkZXIgdG8gcmVhZCBFbnRyaWVzIGZyb20gdGhpcyBEaXJlY3RvcnkuXG4gICAgICovXG4gICAgY3JlYXRlUmVhZGVyKCk6IERpcmVjdG9yeVJlYWRlcjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgb3IgbG9va3MgdXAgYSBmaWxlLlxuICAgICAqIEBwYXJhbSBwYXRoICAgIEVpdGhlciBhbiBhYnNvbHV0ZSBwYXRoIG9yIGEgcmVsYXRpdmUgcGF0aCBmcm9tIHRoaXMgRGlyZWN0b3J5RW50cnlcbiAgICAgKiAgICAgICAgICAgICAgICB0byB0aGUgZmlsZSB0byBiZSBsb29rZWQgdXAgb3IgY3JlYXRlZC5cbiAgICAgKiAgICAgICAgICAgICAgICBJdCBpcyBhbiBlcnJvciB0byBhdHRlbXB0IHRvIGNyZWF0ZSBhIGZpbGUgd2hvc2UgaW1tZWRpYXRlIHBhcmVudCBkb2VzIG5vdCB5ZXQgZXhpc3QuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgSWYgY3JlYXRlIGFuZCBleGNsdXNpdmUgYXJlIGJvdGggdHJ1ZSwgYW5kIHRoZSBwYXRoIGFscmVhZHkgZXhpc3RzLCBnZXRGaWxlIG11c3QgZmFpbC5cbiAgICAgKiAgICAgICAgICAgICAgICBJZiBjcmVhdGUgaXMgdHJ1ZSwgdGhlIHBhdGggZG9lc24ndCBleGlzdCwgYW5kIG5vIG90aGVyIGVycm9yIG9jY3VycywgZ2V0RmlsZSBtdXN0IGNyZWF0ZSBpdCBhcyBhIHplcm8tbGVuZ3RoIGZpbGVcbiAgICAgKiAgICAgICAgICAgICAgICBhbmQgcmV0dXJuIGEgY29ycmVzcG9uZGluZyBGaWxlRW50cnkuXG4gICAgICogICAgICAgICAgICAgICAgSWYgY3JlYXRlIGlzIG5vdCB0cnVlIGFuZCB0aGUgcGF0aCBkb2Vzbid0IGV4aXN0LCBnZXRGaWxlIG11c3QgZmFpbC5cbiAgICAgKiAgICAgICAgICAgICAgICBJZiBjcmVhdGUgaXMgbm90IHRydWUgYW5kIHRoZSBwYXRoIGV4aXN0cywgYnV0IGlzIGEgZGlyZWN0b3J5LCBnZXRGaWxlIG11c3QgZmFpbC5cbiAgICAgKiAgICAgICAgICAgICAgICBPdGhlcndpc2UsIGlmIG5vIG90aGVyIGVycm9yIG9jY3VycywgZ2V0RmlsZSBtdXN0IHJldHVybiBhIEZpbGVFbnRyeSBjb3JyZXNwb25kaW5nIHRvIHBhdGguXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHRvIHJldHVybiB0aGUgRmlsZSBzZWxlY3RlZCBvciBjcmVhdGVkLlxuICAgICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrICAgQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGVycm9ycyBoYXBwZW4uXG4gICAgICovXG4gICAgZ2V0RmlsZShwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBGbGFncyxcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjaz86IChlbnRyeTogRmlsZUVudHJ5KSA9PiB2b2lkLFxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogRmlsZUVycm9yKSA9PiB2b2lkKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgb3IgbG9va3MgdXAgYSBkaXJlY3RvcnkuXG4gICAgICogQHBhcmFtIHBhdGggICAgRWl0aGVyIGFuIGFic29sdXRlIHBhdGggb3IgYSByZWxhdGl2ZSBwYXRoIGZyb20gdGhpcyBEaXJlY3RvcnlFbnRyeVxuICAgICAqICAgICAgICAgICAgICAgIHRvIHRoZSBkaXJlY3RvcnkgdG8gYmUgbG9va2VkIHVwIG9yIGNyZWF0ZWQuXG4gICAgICogICAgICAgICAgICAgICAgSXQgaXMgYW4gZXJyb3IgdG8gYXR0ZW1wdCB0byBjcmVhdGUgYSBkaXJlY3Rvcnkgd2hvc2UgaW1tZWRpYXRlIHBhcmVudCBkb2VzIG5vdCB5ZXQgZXhpc3QuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgSWYgY3JlYXRlIGFuZCBleGNsdXNpdmUgYXJlIGJvdGggdHJ1ZSBhbmQgdGhlIHBhdGggYWxyZWFkeSBleGlzdHMsIGdldERpcmVjdG9yeSBtdXN0IGZhaWwuXG4gICAgICogICAgICAgICAgICAgICAgSWYgY3JlYXRlIGlzIHRydWUsIHRoZSBwYXRoIGRvZXNuJ3QgZXhpc3QsIGFuZCBubyBvdGhlciBlcnJvciBvY2N1cnMsIGdldERpcmVjdG9yeSBtdXN0IGNyZWF0ZSBhbmQgcmV0dXJuIGFcbiAgICAgKiAgICAgICAgICAgICAgICBjb3JyZXNwb25kaW5nIERpcmVjdG9yeUVudHJ5LlxuICAgICAqICAgICAgICAgICAgICAgIElmIGNyZWF0ZSBpcyBub3QgdHJ1ZSBhbmQgdGhlIHBhdGggZG9lc24ndCBleGlzdCwgZ2V0RGlyZWN0b3J5IG11c3QgZmFpbC5cbiAgICAgKiAgICAgICAgICAgICAgICBJZiBjcmVhdGUgaXMgbm90IHRydWUgYW5kIHRoZSBwYXRoIGV4aXN0cywgYnV0IGlzIGEgZmlsZSwgZ2V0RGlyZWN0b3J5IG11c3QgZmFpbC5cbiAgICAgKiAgICAgICAgICAgICAgICBPdGhlcndpc2UsIGlmIG5vIG90aGVyIGVycm9yIG9jY3VycywgZ2V0RGlyZWN0b3J5IG11c3QgcmV0dXJuIGEgRGlyZWN0b3J5RW50cnkgY29ycmVzcG9uZGluZyB0byBwYXRoLlxuICAgICAqIEBwYXJhbSBzdWNjZXNzQ2FsbGJhY2sgQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB0byByZXR1cm4gdGhlIERpcmVjdG9yeSBzZWxlY3RlZCBvciBjcmVhdGVkLlxuICAgICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrICAgQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGVycm9ycyBoYXBwZW4uXG4gICAgICovXG4gICAgZ2V0RGlyZWN0b3J5KHBhdGg6IHN0cmluZywgb3B0aW9ucz86IEZsYWdzLFxuICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s/OiAoZW50cnk6IERpcmVjdG9yeUVudHJ5KSA9PiB2b2lkLFxuICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrPzogKGVycm9yOiBGaWxlRXJyb3IpID0+IHZvaWQpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIGRpcmVjdG9yeSBhbmQgYWxsIG9mIGl0cyBjb250ZW50cywgaWYgYW55LiBJbiB0aGUgZXZlbnQgb2YgYW4gZXJyb3IgKGUuZy4gdHJ5aW5nXG4gICAgICogdG8gZGVsZXRlIGEgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgYSBmaWxlIHRoYXQgY2Fubm90IGJlIHJlbW92ZWQpLCBzb21lIG9mIHRoZSBjb250ZW50c1xuICAgICAqIG9mIHRoZSBkaXJlY3RvcnkgbWF5IGJlIGRlbGV0ZWQuIEl0IGlzIGFuIGVycm9yIHRvIGF0dGVtcHQgdG8gZGVsZXRlIHRoZSByb290IGRpcmVjdG9yeSBvZiBhIGZpbGVzeXN0ZW0uXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAgICogQHBhcmFtIGVycm9yQ2FsbGJhY2sgICBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gZXJyb3JzIGhhcHBlbi5cbiAgICAgKi9cbiAgICByZW1vdmVSZWN1cnNpdmVseShzdWNjZXNzQ2FsbGJhY2s6ICgpID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogRmlsZUVycm9yKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuLyoqXG4gKiBUaGlzIGRpY3Rpb25hcnkgaXMgdXNlZCB0byBzdXBwbHkgYXJndW1lbnRzIHRvIG1ldGhvZHNcbiAqIHRoYXQgbG9vayB1cCBvciBjcmVhdGUgZmlsZXMgb3IgZGlyZWN0b3JpZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmxhZ3Mge1xuICAgIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoYXQgdGhlIHVzZXIgd2FudHMgdG8gY3JlYXRlIGEgZmlsZSBvciBkaXJlY3RvcnkgaWYgaXQgd2FzIG5vdCBwcmV2aW91c2x5IHRoZXJlLiAqL1xuICAgIGNyZWF0ZT86IGJvb2xlYW47XG4gICAgLyoqIEJ5IGl0c2VsZiwgZXhjbHVzaXZlIG11c3QgaGF2ZSBubyBlZmZlY3QuIFVzZWQgd2l0aCBjcmVhdGUsIGl0IG11c3QgY2F1c2UgZ2V0RmlsZSBhbmQgZ2V0RGlyZWN0b3J5IHRvIGZhaWwgaWYgdGhlIHRhcmdldCBwYXRoXG4gICAgICogYWxyZWFkeSBleGlzdHMuICovXG4gICAgZXhjbHVzaXZlPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBsZXRzIGEgdXNlciBsaXN0IGZpbGVzIGFuZCBkaXJlY3RvcmllcyBpbiBhIGRpcmVjdG9yeS4gSWYgdGhlcmUgYXJlXG4gKiBubyBhZGRpdGlvbnMgdG8gb3IgZGVsZXRpb25zIGZyb20gYSBkaXJlY3RvcnkgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3QgY2FsbCB0b1xuICogcmVhZEVudHJpZXMsIGFuZCBubyBlcnJvcnMgb2NjdXIsIHRoZW46XG4gKiAgICAgQSBzZXJpZXMgb2YgY2FsbHMgdG8gcmVhZEVudHJpZXMgbXVzdCByZXR1cm4gZWFjaCBlbnRyeSBpbiB0aGUgZGlyZWN0b3J5IGV4YWN0bHkgb25jZS5cbiAqICAgICBPbmNlIGFsbCBlbnRyaWVzIGhhdmUgYmVlbiByZXR1cm5lZCwgdGhlIG5leHQgY2FsbCB0byByZWFkRW50cmllcyBtdXN0IHByb2R1Y2UgYW4gZW1wdHkgYXJyYXkuXG4gKiAgICAgSWYgbm90IGFsbCBlbnRyaWVzIGhhdmUgYmVlbiByZXR1cm5lZCwgdGhlIGFycmF5IHByb2R1Y2VkIGJ5IHJlYWRFbnRyaWVzIG11c3Qgbm90IGJlIGVtcHR5LlxuICogICAgIFRoZSBlbnRyaWVzIHByb2R1Y2VkIGJ5IHJlYWRFbnRyaWVzIG11c3Qgbm90IGluY2x1ZGUgdGhlIGRpcmVjdG9yeSBpdHNlbGYgW1wiLlwiXSBvciBpdHMgcGFyZW50IFtcIi4uXCJdLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdG9yeVJlYWRlciB7XG4gICAgLyoqXG4gICAgICogUmVhZCB0aGUgbmV4dCBibG9jayBvZiBlbnRyaWVzIGZyb20gdGhpcyBkaXJlY3RvcnkuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayBDYWxsZWQgb25jZSBwZXIgc3VjY2Vzc2Z1bCBjYWxsIHRvIHJlYWRFbnRyaWVzIHRvIGRlbGl2ZXIgdGhlIG5leHRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzbHktdW5yZXBvcnRlZCBzZXQgb2YgRW50cmllcyBpbiB0aGUgYXNzb2NpYXRlZCBEaXJlY3RvcnkuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBJZiBhbGwgRW50cmllcyBoYXZlIGFscmVhZHkgYmVlbiByZXR1cm5lZCBmcm9tIHByZXZpb3VzIGludm9jYXRpb25zXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBvZiByZWFkRW50cmllcywgc3VjY2Vzc0NhbGxiYWNrIG11c3QgYmUgY2FsbGVkIHdpdGggYSB6ZXJvLWxlbmd0aCBhcnJheSBhcyBhbiBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0gZXJyb3JDYWxsYmFjayAgIEEgY2FsbGJhY2sgaW5kaWNhdGluZyB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvciByZWFkaW5nIGZyb20gdGhlIERpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkRW50cmllcyhcbiAgICAgICAgc3VjY2Vzc0NhbGxiYWNrOiAoZW50cmllczogRW50cnlbXSkgPT4gdm9pZCxcbiAgICAgICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogRmlsZUVycm9yKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuLyoqIFRoaXMgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSBmaWxlIG9uIGEgZmlsZSBzeXN0ZW0uICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVFbnRyeSBleHRlbmRzIEVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZpbGVXcml0ZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlIHRoYXQgdGhpcyBGaWxlRW50cnkgcmVwcmVzZW50cy5cbiAgICAgKiBAcGFyYW0gc3VjY2Vzc0NhbGxiYWNrIEEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2l0aCB0aGUgbmV3IEZpbGVXcml0ZXIuXG4gICAgICogQHBhcmFtIGVycm9yQ2FsbGJhY2sgICBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gZXJyb3JzIGhhcHBlbi5cbiAgICAgKi9cbiAgICBjcmVhdGVXcml0ZXIoc3VjY2Vzc0NhbGxiYWNrOiAoXG4gICAgICAgIHdyaXRlcjogRmlsZVdyaXRlcikgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogRmlsZUVycm9yKSA9PiB2b2lkKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBGaWxlIHRoYXQgcmVwcmVzZW50cyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZmlsZSB0aGF0IHRoaXMgRmlsZUVudHJ5IHJlcHJlc2VudHMuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdpdGggdGhlIEZpbGUuXG4gICAgICogQHBhcmFtIGVycm9yQ2FsbGJhY2sgICBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gZXJyb3JzIGhhcHBlbi5cbiAgICAgKi9cbiAgICBmaWxlKHN1Y2Nlc3NDYWxsYmFjazogKGZpbGU6IEZpbGUpID0+IHZvaWQsXG4gICAgICAgICBlcnJvckNhbGxiYWNrPzogKGVycm9yOiBGaWxlRXJyb3IpID0+IHZvaWQpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRoaXMgaW50ZXJmYWNlIHByb3ZpZGVzIG1ldGhvZHMgdG8gbW9uaXRvciB0aGUgYXN5bmNocm9ub3VzIHdyaXRpbmcgb2YgYmxvYnNcbiAqIHRvIGRpc2sgdXNpbmcgcHJvZ3Jlc3MgZXZlbnRzIGFuZCBldmVudCBoYW5kbGVyIGF0dHJpYnV0ZXMuXG4gKi9cbmludGVyZmFjZSBGaWxlU2F2ZXIgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gICAgLyoqXG4gICAgICogVGhlIEZpbGVTYXZlciBvYmplY3QgY2FuIGJlIGluIG9uZSBvZiAzIHN0YXRlcy4gVGhlIHJlYWR5U3RhdGUgYXR0cmlidXRlLCBvbiBnZXR0aW5nLFxuICAgICAqIG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLCB3aGljaCBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAgICAgKiAgICAgSU5JVFxuICAgICAqICAgICBXUklUSU5HXG4gICAgICogICAgIERPTkVcbiAgICAgKi9cbiAgICByZWFkeVN0YXRlOiBudW1iZXI7XG4gICAgLyoqIEhhbmRsZXIgZm9yIHdyaXRlc3RhcnQgZXZlbnRzLiAqL1xuICAgIG9ud3JpdGVzdGFydDogKGV2ZW50OiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkO1xuICAgIC8qKiBIYW5kbGVyIGZvciBwcm9ncmVzcyBldmVudHMuICovXG4gICAgb25wcm9ncmVzczogKGV2ZW50OiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkO1xuICAgIC8qKiBIYW5kbGVyIGZvciB3cml0ZSBldmVudHMuICovXG4gICAgb253cml0ZTogKGV2ZW50OiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkO1xuICAgIC8qKiBIYW5kbGVyIGZvciBhYm9ydCBldmVudHMuICovXG4gICAgb25hYm9ydDogKGV2ZW50OiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkO1xuICAgIC8qKiBIYW5kbGVyIGZvciBlcnJvciBldmVudHMuICovXG4gICAgb25lcnJvcjogKGV2ZW50OiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkO1xuICAgIC8qKiBIYW5kbGVyIGZvciB3cml0ZWVuZCBldmVudHMuICovXG4gICAgb253cml0ZWVuZDogKGV2ZW50OiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkO1xuICAgIC8qKiBUaGUgbGFzdCBlcnJvciB0aGF0IG9jY3VycmVkIG9uIHRoZSBGaWxlU2F2ZXIuICovXG4gICAgZXJyb3I6IEVycm9yO1xuXG4gICAgLyoqIFRlcm1pbmF0ZSBmaWxlIG9wZXJhdGlvbiAqL1xuICAgIGFib3J0KCk6IHZvaWQ7XG59XG5cbi8qKlxuICogVGhpcyBpbnRlcmZhY2UgZXhwYW5kcyBvbiB0aGUgRmlsZVNhdmVyIGludGVyZmFjZSB0byBhbGxvdyBmb3IgbXVsdGlwbGUgd3JpdGVcbiAqIGFjdGlvbnMsIHJhdGhlciB0aGFuIGp1c3Qgc2F2aW5nIGEgc2luZ2xlIEJsb2IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVdyaXRlciBleHRlbmRzIEZpbGVTYXZlciB7XG4gICAgLyoqXG4gICAgICogVGhlIGJ5dGUgb2Zmc2V0IGF0IHdoaWNoIHRoZSBuZXh0IHdyaXRlIHRvIHRoZSBmaWxlIHdpbGwgb2NjdXIuIFRoaXMgYWx3YXlzIGxlc3Mgb3IgZXF1YWwgdGhhbiBsZW5ndGguXG4gICAgICogQSBuZXdseS1jcmVhdGVkIEZpbGVXcml0ZXIgd2lsbCBoYXZlIHBvc2l0aW9uIHNldCB0byAwLlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGxlbmd0aCBvZiB0aGUgZmlsZS4gSWYgdGhlIHVzZXIgZG9lcyBub3QgaGF2ZSByZWFkIGFjY2VzcyB0byB0aGUgZmlsZSxcbiAgICAgKiB0aGlzIHdpbGwgYmUgdGhlIGhpZ2hlc3QgYnl0ZSBvZmZzZXQgYXQgd2hpY2ggdGhlIHVzZXIgaGFzIHdyaXR0ZW4uXG4gICAgICovXG4gICAgbGVuZ3RoOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSB0aGUgc3VwcGxpZWQgZGF0YSB0byB0aGUgZmlsZSBhdCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Jsb2J8c3RyaW5nfSBkYXRhIFRoZSBibG9iIHRvIHdyaXRlLlxuICAgICAqL1xuICAgIHdyaXRlKGRhdGE6IEJsb2IgfCBzdHJpbmcpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpbGUgcG9zaXRpb24gYXQgd2hpY2ggdGhlIG5leHQgd3JpdGUgd2lsbCBvY2N1ci5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IElmIG5vbm5lZ2F0aXZlLCBhbiBhYnNvbHV0ZSBieXRlIG9mZnNldCBpbnRvIHRoZSBmaWxlLlxuICAgICAqICAgICAgICAgICAgICAgSWYgbmVnYXRpdmUsIGFuIG9mZnNldCBiYWNrIGZyb20gdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgICAgKi9cbiAgICBzZWVrKG9mZnNldDogbnVtYmVyKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIGxlbmd0aCBvZiB0aGUgZmlsZSB0byB0aGF0IHNwZWNpZmllZC4gSWYgc2hvcnRlbmluZyB0aGUgZmlsZSwgZGF0YSBiZXlvbmQgdGhlIG5ldyBsZW5ndGhcbiAgICAgKiB3aWxsIGJlIGRpc2NhcmRlZC4gSWYgZXh0ZW5kaW5nIHRoZSBmaWxlLCB0aGUgZXhpc3RpbmcgZGF0YSB3aWxsIGJlIHplcm8tcGFkZGVkIHVwIHRvIHRoZSBuZXcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSBzaXplIFRoZSBzaXplIHRvIHdoaWNoIHRoZSBsZW5ndGggb2YgdGhlIGZpbGUgaXMgdG8gYmUgYWRqdXN0ZWQsIG1lYXN1cmVkIGluIGJ5dGVzLlxuICAgICAqL1xuICAgIHRydW5jYXRlKHNpemU6IG51bWJlcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUVycm9yIHtcbiAgICAvKiogRXJyb3IgY29kZSAqL1xuICAgIGNvZGU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW1vdmVSZXN1bHQge1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgZmlsZVJlbW92ZWQ6IEVudHJ5O1xufVxuXG4vKipcbiAqIFdoZW4gYW4gZXJyb3Igb2NjdXJzLCB0aGUgZm9sbG93aW5nIGNhbGxiYWNrIGlzIG1hZGUuXG4gKi9cbmV4cG9ydCB0eXBlIEVycm9yQ2FsbGJhY2sgPSAoZXJyOiBGaWxlRXJyb3IpID0+IHZvaWQ7XG5cbi8qKlxuICogVGhpcyBleHBvcnQgaW50ZXJmYWNlIGlzIHRoZSBjYWxsYmFjayB1c2VkIHRvIGxvb2sgdXAgRW50cnkgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IHR5cGUgRW50cnlDYWxsYmFjayA9IChlbnRyeTogRW50cnkpID0+IHZvaWQ7XG5cblxuZXhwb3J0IGVudW0gTG9jYWxGaWxlU3lzdGVtIHtcbiAgICBQRVJTSVNURU5UID0gMSxcbiAgICBURU1QT1JBUlkgPSAwXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVdyaXRlT3B0aW9ucyB7XG4gICAgcmVwbGFjZT86IGJvb2xlYW47XG4gICAgYXBwZW5kPzogYm9vbGVhbjtcbiAgICB0cnVuY2F0ZT86IG51bWJlcjsgLy8gaWYgcHJlc2VudCwgbnVtYmVyIG9mIGJ5dGVzIHRvIHRydW5jYXRlIGZpbGUgdG8gYmVmb3JlIHdyaXRpbmdcbn1cbiJdfQ==