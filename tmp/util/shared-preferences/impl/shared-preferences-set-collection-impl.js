import { BehaviorSubject } from 'rxjs';
import Set from 'typescript-collections/dist/lib/Set';
import { map, mapTo, mergeMap, tap } from 'rxjs/operators';
var SharedPreferencesSetCollectionImpl = /** @class */ (function () {
    function SharedPreferencesSetCollectionImpl(sharedPreferences, key, toStringFunction) {
        this.sharedPreferences = sharedPreferences;
        this.key = key;
        this.toStringFunction = toStringFunction;
        this.changes = new BehaviorSubject(undefined);
    }
    SharedPreferencesSetCollectionImpl.prototype.addAll = function (items) {
        var _this = this;
        return this.asSet()
            .pipe(mergeMap(function (set) {
            items.forEach(function (item) { return set.add(item); });
            return _this.sharedPreferences.putString(_this.key, JSON.stringify(set.toArray())).pipe(mapTo(undefined));
        }), tap(function () { return _this.changes.next(undefined); }));
    };
    SharedPreferencesSetCollectionImpl.prototype.add = function (item) {
        var _this = this;
        return this.asSet()
            .pipe(mergeMap(function (set) {
            set.add(item);
            return _this.sharedPreferences.putString(_this.key, JSON.stringify(set.toArray())).pipe(mapTo(undefined));
        }), tap(function () { return _this.changes.next(undefined); }));
    };
    SharedPreferencesSetCollectionImpl.prototype.clear = function () {
        var _this = this;
        return this.sharedPreferences.putString(this.key, '[]')
            .pipe(mapTo(undefined), tap(function () { return _this.changes.next(undefined); }));
    };
    SharedPreferencesSetCollectionImpl.prototype.remove = function (item) {
        var _this = this;
        return this.asSet()
            .pipe(mergeMap(function (set) {
            var hasRemoved = set.remove(item);
            return _this.sharedPreferences.putString(_this.key, JSON.stringify(set.toArray())).pipe(mapTo(hasRemoved));
        }), tap(function () { return _this.changes.next(undefined); }));
    };
    SharedPreferencesSetCollectionImpl.prototype.contains = function (item) {
        return this.asSet()
            .pipe(map(function (set) {
            return set.contains(item);
        }));
    };
    SharedPreferencesSetCollectionImpl.prototype.asList = function () {
        return this.sharedPreferences.getString(this.key)
            .pipe(map(function (downloadListStringified) {
            if (!downloadListStringified) {
                return [];
            }
            return JSON.parse(downloadListStringified);
        }));
    };
    SharedPreferencesSetCollectionImpl.prototype.asSet = function () {
        var _this = this;
        return this.asList()
            .pipe(map(function (items) {
            return items.reduce(function (acc, item) {
                acc.add(item);
                return acc;
            }, new Set(_this.toStringFunction));
        }));
    };
    SharedPreferencesSetCollectionImpl.prototype.asListChanges = function () {
        var _this = this;
        return this.changes.asObservable()
            .pipe(mergeMap(function () {
            return _this.asList();
        }));
    };
    return SharedPreferencesSetCollectionImpl;
}());
export { SharedPreferencesSetCollectionImpl };
//# sourceMappingURL=data:application/json;base64,